%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: title.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMBX12 CMR10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o title.ps title
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2005.06.05:1010
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro
%!
% PostScript prologue for pst-coil.tex.
% Version 97 patch 1, 98/06/02
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { /t ED t sin AspectSin mul t 180 div AspectCos mul add t cos
lineto } def
/Coil { /Inc ED dup sin /AspectSin ED cos /AspectCos ED /ArmB ED /ArmA ED
/h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED x0 y0 translate y1 y0 sub x1 x0
sub 2 copy Pyth /TotalLength ED Atan rotate /BeginAngle ArmA AspectCos
Div w h mul Div 360 mul def /EndAngle TotalLength ArmB sub AspectCos Div
w h mul Div 360 mul def 1 0 0 0 ArrowA ArmA 0 lineto /mtrx CM def w h
mul 2 Div w 2 Div scale BeginAngle Inc EndAngle { CoilLoop } for
EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
TotalLength 0 ArrowB lineto
pop pop pop pop } def
% DG/SR modification end
/AltCoil { /Inc ED dup sin /AspectSin ED cos /AspectCos ED /h ED /w ED
/EndAngle ED /BeginAngle ED /mtrx CM def w h mul 2 Div w 2 Div scale
BeginAngle sin AspectSin mul BeginAngle 180 div AspectCos mul add
BeginAngle cos /lineto load stopped { moveto } if BeginAngle Inc
EndAngle { CoilLoop } for EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { /ArmB ED /ArmA ED 2 div /w ED w mul /h ED /y1 ED /x1 ED /y0 ED
/x0 ED x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth /TotalLength ED
Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
sub 2 div dup ArmA add /ArmA ED ArmB add /ArmB ED /x ArmB h 2 div add
def mark 0 0 ArmB 0 n { x w /w w neg def /x x h add def } repeat
TotalLength ArmA sub 0 TotalLength 0 } def
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 71 /G put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 82 /R put
dup 85 /U put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
/UniqueXX 5000769 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bacdd6500abda5ed9835f6a016cfc8f0
0b6c052ed76a87856b50f4d80dfaeb508c97f8281f3f88b17e4d3b90c0f65ec3
79791aacdc162a66cbbc5be2f53aad8de72dd113b55a022fbfee658cb95f5bb3
2ba0357b5e050fddf264a07470bef1c52119b6fbd5c77ebed964ac5a2bbec9d8
b3e48ae5bb003a63d545774b922b9d5ff6b0066ece43645a131879b032137d6d
823385fe55f3402d557fd3b4486be79011d1f5bfae5c1f476ee6f05eb1d2caeb
269958b194521197b312fcced4867f3c8fbd030bd715d8ffda1dcd454b174e7a
1a97b59fe770e67702519d9d9b23d61ac08424d555242a8ca08c49aef300945d
99b999a79ce74804ae6bfde623f4463371442f6523a5f6ce19c839a708c02513
2e22c696c8ccade45680e5197189d0f98e7f0d5f955e353970b392cf530a68cc
56b0035ddfbf206c3074beeb0739dcbca272a6e629fb7aea2c5ba7bae50c7b4c
a595df78200c352997ec3ee564df229fbb5473f5e8ccb1cc0153e9a7e299a8ea
a29b69d1b622b1f0cffc58291248759607d91150cb0651120970dc9f743bebef
44f6ae92facec57658999c8bf01f60611560043962c0695e1bb87d090e0fdaab
659d6557208a660be9aeef8ae55f71b8bc76394d792967e41bd8023b6e7f8c3d
9987d5e54c53bf2bbb32855b946473b44833bd78873df8e4c7e668ffff25aabb
8da4148f744b9d0524d6cb8281247b3052cc5d66f3f1bcf8a56a3fb446ea587b
d8be30257652cee035628aeddfd8283b5ad21b8b1480ad24d898970ac8a1e33e
543ce4e3c48f9ee621c5ce3e8ae930f890011b630866c988606068d9e92396eb
f51bb3db204505fc3d09d4701ac703a14d92bbfe27bd7411b363a88e33a8e9a8
025ac31f21e73dc52b333b918d0b1270c54873a490222d041a66e0192612be6d
2c88958a8f70c10390146ee5091df020ab97675e8e6acf98b28b539cd0a20d24
a42f535ae44b8f5e9290b38fc6b02e1bbbdf1aca96558c2dd5afbec53f03ab51
fbce958ed4a65b17fbc03f9defd4aea4a15229f3c320876235f2d8b69bda5f48
03a2798790d35b394c63295997dd487bc603cdd10d18f3e3fcc7f17d2a6afc77
f1d7f6cf69d2a86b104b9d3b260e4a78716927a485ad8a650d610e68378f4514
3610b087981f0a0655090163dd2dd4d0030faf6a953896a9cb2cd033ec9cd3e7
30956fe1ea6ad845354429876b6036015fa94b9ad089cec7b06b781b2c18388c
c763d28aff27c34eaa3cf5ca5b87fb5004704996422cb579f8b454059db45df3
948404c64a033e28e247a3918488f07cfc2e10f6737c99386ec4f6bb0b305259
905965cec42a1a21a5759e965970abf2f31aa3c582b45f0c5e49e71727bb0c32
2eef00c04baedd2fce91831face343d3a4e7ad54c64ebb19a060f56e81352d81
859b8383f1b5bfdc6c8c07aa55cb97962d3dfcd1748500d002bc01e51ec7d496
be0d256c5d40ceeb9374ad9a6b86dab8f53801eb1de38e10b36e71072a8d044b
4c6f6eb0030c613b0169d385a8e5bed9707a188e054d0dfca05ba7d10f1a2acb
3a8df49c2cb5708e76c54173e7133f4c2873b7750d63a2a20bbe1f8209e296cd
5d66b599d0986e7e3279d50162d3633b52a7a008426f426d95155295d3eb8dea
e445dd11bdf8c1aa8d25173bd2439ebd85bd15d1245b656eb146d267f601077d
373f3c1e8ee76a70719deb9de04bfb8c4286ff900c53a2e3eceb55e26e03f032
d6f6debb9a55e3aec968676ead9296a46110c870f3358796efe086fc50cffaae
d0d3f4de3283d359393cae91e49fa9dd16e601fe65f538f9821b44cf6a0c7122
8b3c3060d91a0fb476a9dfbd32084cd1b330fbd38f1b20db89349da86c65d2dd
abd5319d1e3e67c3610e83553c780b662c08f019f1f6d58fa2dd8ddec5a608f2
7f0f1710b0e7d2c4fe2c68c9cf6dec9b06e8029436dd9aef4b8685135d0c3814
4fd83659123a7028bd0876152162dc6e0d3e3b45de5c0794f7b35aadb4756a2b
345550b504785624abbcc68ecc35711ef7cd6d635f9e1b614cc7a5296b166d15
08a358cbbbb78773e67e949ef1725475ab51ecca82b49c794255d351e8a61388
6be7ff7d2289502e3aaec21344998e4226907f8c869095a56c5318e55cdcce82
ad5be59b9f3e6506e930552e3c18224992abd98fa5df8f64b39059c6bd005a07
fadcee62d02a6adbe246ad9b84b48dc199878726c0bf2fa7bfcbeeb1bc574984
4ca557f1244c0ef3d5d539698f5f17c361395a52989354fae59b3a31bf07774f
1bb5c135b35ffbc593002303cf656e6003979801494a72bdbd7335794c320ad7
eea797286b384b584d028eae462020708e2ff06999b07ab2c52b5610c75e0b4b
a873a38c0b4036e74c519c338de9349235af774cbf1159637484644503cffb81
5fe480dfaed9c460a68b177085b6eebb811dbddc643915e4c91709791d93918b
8209b014a88e8f99ab0cec9710025cda18e596bcebd160451aed16271a6d42cd
60015f6afa34829355c799245804f047e9601a455029d217f9bd922e030da58c
7551434b8e0ea35eb459a31bf7595aa2d30f698a8d886a020360ecf7290d2573
f27648954f8add09a7fa6c02081758dc4d599f7e5ee7947a10d99bb5eead042e
58a7e5a62efafa9c828dc3b79c8240bd5e7fdae4199898bc9986eab0138f81c3
4d8759b5eef8d5243eae668e61826f0c7eff2c6b235674e4ad5775e0fce0ddaf
b0c5f7cd9185377e5ff677e55415df352de3640bc035ef73545ac7be66abbd1c
c3568ae72787e76c5df6f7e0c632c0d19b82e5a6bfbc48aa7c0ebdecafa2c490
f66537131b80b88c8127dca603640868560ed10221441b516e387266f1d2553c
b9b321748f9b10917cf90db80b4782b8efb12172311ec3e74f1ccfd247a2618f
acdc4f8aeac3571a8c1c7a7bf96cd4b288a1ba8f1468b8cd126a19dd3bfafeb3
bd3620c3c804db26dd233ad8aae2a738d0c0c60ab1379b7d0bcca08f6b09b500
b0fac1e1b108bd1f5c548bf5711c77005d6206596f9d76ad323733932b4aa929
bb194f61baf3526cdead062c1b3a3a58a4fecd0372f767f00bcd17a257568bc9
3cdd72656ab84769b594363ef3ec579cdfb159b90e6ee1cb80917cd7ad49445c
50501faf8b24f902057c722a2eea308778460956d139eccc2a6be8b1232db155
910ef3ba184b82c75bd371f28b42087f556036fe229793eea7e3fb5f23696a19
6467b2b0c12b7c8e0b29e5bfd9c4c8d9209965cbbf005d7b48d6d4fb8674bc4b
edf290cbb143d7e6a339b08101f84f86d0549e3ed1f90a4f27e699cf54da1613
7a01ce8c11136b33512f38d27d027c0d46be91cc9088c20d1ce2493afdf481d9
3de5cbad99b442211c99dd18f918915772efca18bebfd684c294263691111a9b
84ab83ecf02596ebef3f693485be4f0d178b0581b742e93afc7f43f3d4627af9
0dea28f54b4a524af166abc08293df1305bfd3119886e74d977cb68be3a98e9d
fec8dd409cfa2e665d1c67330b88f3224c3e271a023ced11bb297e753ad115c9
7ab1c9ca33789323ba39ca1cd53a4a71ecba16096347378358cbea56ebb8955a
7f53bc5251d70dfde691e50e06bacc75552fb03849791d389f77c98ccc5cd3e6
a3e0d5a68f2e5c73e019e3c4fee96c87de44b1bac08ed12680876152ba7e3756
63c9b88d5a6418a8731869b8761fd39031cfa02329581486103f13ce6b7c3aae
cd7fd4f47d2303440df52805c408adbbd960653d305284b3be3c2d66bda9a0f1
07dc971308b598dbcbb52194a6392667f3c0caffb7e902fa21ff56ab9f7c967a
d49160e6bc6528a1ecf4c7f23ca7660f9e21706ab461aced77e0a9eb6ab948ff
9890c33a2f560d573ade583ce4b2eb9fda7fde10ef87f5ce8f0471b9d4ff96f2
dd941b7d47aea993645a02b6dc7df9ee36cb9a40cea8dfe062cee52fea9d3532
c6f6de121d270fb1019c060191986971a1e00c41677b60e0e233450d9038f05f
b880483632d879a518ec6cc95914c95b1694b046449fb4c90af03e2852c16e89
f38df1ea5c545d6daf610b2c8c99399926cf9b10e4a0a09bb3171167607dfde2
1bbe1ae6a1c60f565c16dc7e8fa6d0e43d96684dafda53d4d3249777017ead36
4c1a22b1e2be66eaf1005a1ebead5318983c3b2cd289f8e67053194b2c3dd0c6
c481f5473bfa035b66891a95cde2ad9793ac77d9aa5ccdabf8a66bf54851f5d8
df42c6c08b1dfcc7bfeadbaf3818fa891b98487d4336538269845235d5ba04c5
de06850e1cab2062581d8aaa5844180ca899f458a954aced15106e48319631a4
9c8488d5d046c81d78b86ebc8a3a099681cf1ee785705c1384a93f096a3d02cb
aad3354268f7966ebd06ed711fdb1a36bd137a4f3080215f8d1c3927e6ae2f19
632853035ad41acdb95b3bea296dd56e0810978c170369bbafbcdf02ee79ad9d
77c68bfc8e2501eaffdea4a3a76084d7417dd7dc4817035565741c6314278479
9873071ae0be885cf3fa99494fea2a0c7f0aadf8be89ee3b6f7a9c840e5ece41
13b1d0e3ee7c8d3088c90c1d03c5873d8c5c71f41b48170730f34ab01c06ff74
0d6cb05d98d9d429e1b3b6633ef86ffcf670ba7f59421b7ed2d6f5d80b62c302
41724f4c35ee6ccc470dbfa82b2963b423e3a84d2fefc13e5befaf18fa54ab76
57ab5360968ee950aa63590cba4dd9b8a42aeb2890fd48b252bfecdd83bf6c8e
2cbc98e6ff73700628c6b7d35881e346e19698e97f7cde935fea8c04a4ea62ea
09ce1138fafe5a35
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52

% Copyright (C) 1997 American Mathematical Society.  All Rights Reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 50 /two put
dup 52 /four put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 73 /I put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
/UniqueXX 5000793 def
currentdict end
currentfile eexec
8053514d28ec28da1630165fab262882d3fca78881823c5537fe6c3dda8ee5b8
97e17cb027f5c73fdbb56b0a7c25fc3512b55fe8f3acfbffcc7f4a382d8299cc
8fd37d3cea49dabdca92847af0560b404ef71134b0f3d99934fc9d0b4e602011
b9cfb856c23f958f3c5a2fbe0ef8587d1f5774879c324e51fcb22888b74f2415
50d7401eb990d4f3a7af635198422283cac1b6cd446ddbcbd915db9bff88844e
784c6bf7389803d9450b0c21756a017306457c7e62c1d269f306bd3402e266de
fc3b5e7d8a8d2f5bf0fe6ddd40d07391df4fad4a6018dce29a2b8f692b29f202
3a7c0e66de8ed85c14f1f8492167357f51a7e84cc5d92e0fee4d81cf7fbc8de5
2d2e7bb57142033993f9c08c315abade8dbc4a732e84e142d3bee51557910e12
cd8aa37c459a5e6b7f5269f59078aba3be4641a11ac48d0b625c8325b38ec08e
4c9e5e7fed976a5650d99d82114f449b9ca14c4ec957702295a39a93ef93f618
99b8ea06b092c3c1e503e6e436e0a9fa22576c8930ab3dc8c20f5d82b69cddf8
ff4dacfa9c54bed5a3aa3ea5b129fe96be632843b9b6bc91b615581a985db56b
1e01ca60ee69ca92cf5c0882ece62edad3e106d835348822400f0b66af658f2a
e56ed08f8b0010571807009b73ab12a8cf14ca6c71f03c2a48c500f9d62266af
154a6375ff600d9bac3f05ce34142d6867a79581c533176bb2f3117336671e2e
44638a97167e2ea9644e31ea16c2ad2990ea33c54001e0c8156e6de8ab6a4d40
a7137ba275f39589fea2e2db8256adc103d6f9cc038037a47e8fd469c5f98a5e
3c15bd4ace40d340018b1cff7d1ed8abb0ac57b5b5a2c20a51957b96c453edb7
dae5affd91a46d938fe0a13363001d844ded4323f1ee6d30012aea19b024a552
315505535c85dc26bad31e09c50e6512802976d298c4e90d0044c362e6bf3ab3
62a454ee93de25ce54411090c29e9d75c80ce26a84404bd9de3aee0e3f921ac5
87f907572b8354a5c3165eea7e8b2ba4e333802132f760b41a900c698eb3d273
8bea0aaf7aae96a558f08b61aec7c7d65b2889bb7b99800cffee5ba19ac90fce
11437be1ddfcf0bca5670b543b9644a71c8726d0c1005abdb96f6e0cf7caaa31
95017ca81519151c2c0b04f81e717c0691b63a76e9b25329ce2625b711cb7bf9
9d23ec2bb5ec8aefb8c1a3b422ad617b3da4d49685fd44cc21a1fe5e1541163a
b3e15d9571f8fd14cc14ed56c3efff0a294d22cb240fad9d6101f1964c4a6fed
9db6f6738a65626477c1e42fc0e73c09895ae08f8ad0c290817ba13ccfb1116f
3e1f533151cfc5b9ee88eb14431478abca00b7efe75e9c454f46036220f60652
69d117bae23353da3a82d0e658621264cb6fb4385865a7ceea8b373ddeb3e4da
a1fdb6eda8ca8d4d9f6dbf124276e5f413bb1f777ff8dc24f8e59589c0501606
793fe09b188c5bef1fb6302d4e9fe0788841768aa870b2244ed143398da24f88
6f18a6110ca7f74dad83fc5ae2f40654595969eb322644d8a0a0e109cb0c12a7
a955bb643980754bb35ad5df1bb2ae2a915bd03a12f20b32d25131e0f8e914b8
8bb62e1b97f80797859cb5a23b5c4d86692bd294e5e459aa4f129ff39b4876ac
83584c754dae928ab2757c31b4d32a51c5a5b0d8c39a69022b3dbfa279c24aa4
7b5ac2827380bc87fe919cf5d2a21749e4ba165ed8e91a4647f3affedbae46ca
b82225927d1774b905f59447e478150a1105c742917b94466c4127abeb4fca43
c080244bc1788462000f1b5a65c9e92a78c4cc34e60c003641be612088e0b366
c5d6c1369b20748268671850f455eb72b23af87c876f83e9b09ba81f884bed2c
2d7ccb800762d209977dc7c70df4699933047aa51229684eed500f382cc8a60f
497769620c1ada9f3d3b8dc894192260c2a9f68dbdc5a31f9372a3027ed274a8
338372f4fa7a4a59faf9536c1fe9964d8af2346f450d2e07ea58074380d860fa
140be1c3b8d0b97538350e207a549a4c96756b7b3678c59a2987393e753dc84d
0e8730bcac520f9de1dc39eb77e9722c7860cdcd9a25396a1c425ec6c7ca6dba
8f763a658a78f7022f452d64fc5f9c0301a55af51641af4c898ca40e620d2856
a9cc305dba3de681f76847ed1d550c81131be5864b63d18ee25775164618b000
8be824aa1f6cdd7bde370244a0fde98a5d46677f211ec8a5dcab5d8aeafc36e3
d36cddaa5bcc6141b9b25808a9585ab68ddd5387b882ec158224037b00ddc245
09606341390ba414802846a1b9a620fd841a2b7534192afd3582028d172ab314
ca77771b5027d36f2057e531c02f3aaf955b8691b25ccf5432ac6cdb26572d82
2b58fbb9cd538affda5b9b6fd891b0b50eaccc947b5328060dc86b9f43418ecb
32f04500e4886284bf5f35ef24c45dc9853f749c2018ce73c30c5aec0d1c6674
7580dbd0baf136c7146898d77aea4c7ea1d25bdd8beee90559ae302481bf92b6
2d100ce11832e31aa4d71f741294ffc84213d6314b245f631a7dd95f905ef19e
061c7e06577fe48810097a73f84d3a11e9d40a547b2cec2ab908c6f1e83a4c34
e800bc3d6565a78f2375a3d58369ddaf44e4690b81ce075d46560715c615134f
c62c57330c719158607a4d40a8bf0e61d789e2b0e1394452f528a0ca323f86da
4ad3a28b29595914bf6096258a49f37b1b2aff36184f0edc41afafbbab164e53
ed97575c0797ac2c6c12fc9af3cb88d467a437cb3045bc1026e9e00452b01642
fb41c02328a326b394e85a824028ab13209e640faf2b5e71863c8607314de9ad
f4849470fa6c8e3224467fc72fb105ffbf6d3bf4b4e16db5901c690e918ffb73
0c2acf8f9bcd7fff731367ecab7346247e9113f448eb366b95447298c0091135
4e04399c9835c36565022edbe7ad5a0bf1401d9a7b2c19ec1470c0291e3d1240
81136291d51a46df3b5b3bdd1cc835c1dfcfaf278026953420edab9a4c072130
a70bb131c3e50f9543df2907fc9babe516b62c6c5e7522504a9b6017270f22ca
2d0b3c9f155402e04e655045e5a481a8f4205e37328122cdff3b8dabf0ad86eb
0ec64580d7fd3722333ef7b731090de3e13dfc9d3e94e66ed2bbd252c4c5521a
b935c85ef960cec5922ff6fbaa28da437030017700b843d3cf8a9a813af10817
77c36d697b56982b317dc98f20ad7249af74f6abc2d484f464fa06078b8af047
ad78ea2700068a0e81e8b2c4fe480ff2c222514830f29801eac9c1993cc374cb
97a2b6bba3a4e7b349441fa4b702478fb4b175ff6cc98a84aecc904be6da5e62
2c932d96c12c48bb51da16322f2b1c14f603b556bb8846d50f7a2616b9a226f8
50e1312c8a18d792797fd22803d7cdcf1aa0c6f3a149327d5fc83b10feef783b
9fe10a0e07a58c96340250819e3742dad0e75aec8cc960eacf5651d2911fdc3a
4bcb9b532042f7752e6568f745d18e87662df19c543b1d2fb0a23c400ea75cd6
0f4ed597734ff152cc1ce362d7fdfe05ddbdb3403b695a3da92f7556dbe55cb8
f3a4d05fc2eec0cf5181bfbd3169356a320d8c5b8e0a758569f6eb4cb578d6f0
365428f63ec240320c14fda391e240cb1a5132c99f8169754e934adf1e7a0453
9184b9d290f9f04efbf23f21c534784c6944fce46a6ba70a4518b1ef202a7737
217822f93452bcf058d1019c95dacfdf001735f10b2305352a09af326a78c576
28904d5886c54166532d64b23e968a5dfc42ec1945619f81e6203f3ad4f85974
784705f96b64dfc6bca66c20c06dc427c20a130536639c1cf047f47ec9b3100b
06779584c7e32ff0bc964a44ccb4338863cf8cdf63ebe1975a97bbcc6aac535a
8e2c6f36e7206e5e79c10cb644d19a437f7a55cfa4314bec280582d138769971
a1756d9b2e52b40c9f4e655271b298f17cc61d350e58bfa2a700ce0a46f68c54
2bfcf2815c646c8a355a4652c8ce69c7ed238a0488338973dc80a60d578db10c
2ade409f7a0a320988f78243aea49e72617a03e4497af69c5a7fb64bda51c614
cd6753c006e8046d0cd78dfbb78891d68ad3a45aec39222076794caf58026cbf
50a6ff800a025992dcd93fe8681f2881f420bd7f4a3179a42e7442256ed215df
9d3413aeacdc0078a88e9596f7de4acc16989f02d9a5660995f23500ce7c1a76
aa6692fdd342dab3473520f608da462a03f268ae8f73ec48cc0faeff5056ded3
2a40aacbf33514ee53a4a51ba1a8feccdcce398738366019bb6f438a399f21fa
c97a768b10c1bba7deaaa012ddd5ea0ccfec822933c95a17e2e3ed16b0acd7ee
e465799f536af04a6720c6f617a01e9900d615a4ac377cccf7cfdc4b6c949d40
d5bb9b5153e8b5e1939f8308a5ee49a6f3105b98464ecf97f87aece4e4b0433b
b89524abd660bf966169659791df9a0e1f5aae041fc6abce7a24ddfae9f522ae
1b4f445b4483307fb4426db9530ca853a8b9f339ad9724a4651262bced7f6728
9e513a1eeb81e26a5d4b975b3899bda882f4d7f1f5e160d7d2336e6b843ab3a8
c96cdef78bda4b4eb1ce49e3a302d4400b27d131d9210f19086d59beeea0f673
e25936bb35d9c2d9f5e661bfb465c6ef3c7600b6f87231fbd6673df49bb79b2e
01dbbccee81697637fdf70bf7065acb102c44868f77100cc97946897ca608103
da634bc0ff81d036b977874c9107d4e52475160d195b49b73977fad5054174be
26b22ab9d3dcbeeb8405e0ff5f746adb1734424c711815384230eb3bce0a8fb6
b4c3181919fc7d2b4a7bbf3e174caa55286e2dc39ea87a659140b662d4c4711e
fd9769700dcf84cbeb5511df66397667a79123379dbb51acb2dfbbec465af02f
7e3f3dbd4e7bfcb1fa3add7c53a6a9d2b7ae096f9db228de0acb1aa96107feca
664e27b0a44958ea743edc0be001b9f868facf4dcd610eb95113eec41579d44d
cb5dac8b0502fb50a9dd1a9882c6ed15c62221ec70d4085cf8e01c484cec8478
0b3d5d5690e421fabc219a0c62da65c3692626bafee54314baf042d330976fae
de830be539baefd42e8e7eed22f88070ec0ed49a833b3276e1fe2360e42210b9
6a6777ebcd39671929a18b75c058b70aa3beaa2ebd8255dfc128e90f70ac3a08
5b224583d6aaa2607e9834ab96124a1d2801e458abcaa66c3049917bc6f158b8
02871ab864c2aec54964c0d2f316ace58076220b468d8d93d3a405b7ec0ac121
4e8b55cc9770c4d8125143b95495cbe704c50fd925bca99d74639dd44f5ce322
6c9f56886a864fbc97a351b0fd225ec7356ee07d0bf6454f06615b6818d4c0eb
dcb0d5d7ab71ff8a18cb4cd38b791fc1dcd14582c0f0e79267e2bba2ee446ef5
4005ee09447b151c53d1a8ef2927154a37cda141cb26b46d6af337a4eca79f38
c571cf0a8ae3ef8dc913f72af775ea1b82aa9f88f7621641163378b80b5ae672
a145b5e5b2cd5c749df806cb9c8c27fd7d255db0e0be396cc2cde7dc7e25b102
a6e8555b60a824502a0243b15ed6c8f16e3ecde74d62daf1743ac0e1dd99c1fe
04d081e1c4545d4b558ef600c70df13918b764d934bd4016820c1e32ebd536af
7a450ee076e97ccf63aadb7d869155d112733df881551c868caf55862d2861f2
f17d9470c0cfa80e0f2d1cc6349bbe1a22309072847794e988dabf69fa398c76
1098a615a7a5ae0a0560a90c4bc371ac849d5ab96bc6c7e88a260409eadd28c7
7c563a3d8f0721a415b4ea697556de1f9271ec4826ff6ef47044a45ef95b2a08
d136380e97f727fe8d00e08330e22e77ed3ae1e6f8356bf56dca89c6d7ac2bd5
bc3bf0de00acf036fde48d391a6df320a29883c05b04741aff32930a5a6eecf9
5d3e883a6233ae04ecb8c0e7974bdddb742dcbc5c7aeeb7d47f8b44711affa10
5372cc873f9966d8ec9dd29a658043334599f32bee089b8f5b8c164d9873731f
53ee7def62e12ddcfccaa01ae16efec7b29ce4c53bdb58a9c9433e05e6bc9d45
25d987450bbb6311d2449a5f4b1a5315f246f988d98ac1d29804d2b631d6322e
ce72e4a0a53b7f2a6232b3bfa57e42da21f4f19dc6a188fd76d8246cc194e94f
c1016a2774a4d36d18a581a778ed346fa89be77af0337b757238076c03ffa093
af6c264314ff1eaf3f6fe85f103f58a7d43ba73a809d610cd2b9611720cb8e73
aa7f31fbeef7d8e792b68ea28afc3453991bfde3080e29895301a93db1726922
569800b2f425c26bb681af1789ec84b76d5f05c1d09fddee5ae68f81b6923b09
c45248e628ea28ca6605ce0d055862e2430733af9ea192e22e3d628aa219c6fe
8deb7f1081448af26b3d66624b5cd096a2286b8cd78c25b061bc5060a222271c
85a31ded525ffe0a85040e77705422e7e268888346ae9d01636fafe11e6834d4
355fc5635c7f50cb788ad07d8fe95d24fa0c9b3701527efee17c9ab67f405479
4d28f476b1e8a6f3fa6fd79bf7ba78cf1ad8238e0148220ec913873c8917dbbc
cfc95fe9ce84a8dbbed44ec6ddaaecef4fe84d189b4db6f8b8f80cbc2d2aa981
4432b9b4eaa7bec4e6f4f93a4e378b7aa7b7f664ddc0538122bbf072ad96a688
16e987b68c4185476efca06b0b8e4ee10c0b8155dcbf055f12f7e6c2a752bda8
79ed418f2926c2f8ec224be6e107094d8427d977d62f703136d7b4a055cac175
7620ffc64cc7d4241abfad7acb4e0706d32276cbf60e3317560c36f19e26f56d
b39c993523133f7cdd8e14cd093b38fb1236a0965e80bbc75b2c4f1885a36e35
8e9b92862bf98f62ebd74ec270a6ef7cd0aa4e8d0e4f759cebc6c3611ea0dc42
abc0f152c86db77c6dae443acf6f23fbd7e7ac7e543c4e2b8088e00d9222cac9
37de5d00dd9a4e8284f57cbf4f554ebebee4755fdb6ccc27db8fe34cbc1a56bf
7d76a8961b5612058fcc21316c7c36455abcc3489c6dffef9f51b15253b0bdb2
d1a02d37df81c2958be780927919a7810480a4d530b4d39b7f8e62b16d66e037
2adf627915390fcf1fef731c242ab882ffec7d2c501fcddf839ce62492f2d5e8
b5df0e3dccd8bfbfc2b147b913639b5a627d8ca9cd8b0f319dab26a60992fd26
f39ccaefbe4d0253ef01821c8757f64eefe143d5cfa5179a8ac57b222dc91fe0
60ffcbb52cfd49e9ec7bd7beff464ef627d2fff9409e55661e3dbf41ce5a1edd
6ecdf7372850dcbd9d7dc56b379129c7bf79caa6249173a4b871af003c5b7566
1a23c083baad306419bd9e2ac98840d657648f26ce24ed64596d9e5986d08d76
a316e20d53d14b35a9bc1b637243fef1a6d73c23e49d4c4a1c813525464c2cf8
60cb8ebbb3d0a7ecc8b1d6867bf75da7e555006193cc4543215c2dd17d89e62a
cc32b3ed7a5d370f4ef7f4e950a2fee8d94ccfdc9cb72a2d50dcc114a0d6ba27
80cb14f38266e765cdc20d62bc3ba3de5709261cf2256d770ea205f50e03bda8
74efb70147095feec915b392215d5405ba58c147e426dbe41371c8b42c6ec787
762e4feb4af1effd22c45e5af015a0d487baaae45748181be1494734c826aeb4
ef8fa0d92297404a3b292869e23c32a5db688bb85eadb5336fd1491f8013cd12
57ba0136197cc20caf50ba7725397ef8d5d674a2e9fcbc12ac10bd546084f0e2
a9209c2baa0bf9aab3394e4aecd7cfe00bd79e8d5008099c7a219e8fae542a74
96ac0c65c79686c77d5b33ef10a0a41de69f58e8fc564236abbdb1c8ca6bcbf3
95c87de3218f651099228d53ade36765bed5fbcc0a937605c87d655bfb15c3d8
a70b41efff7828c7bc91fe796fad32731e58e06e6a160c8886d91f8f53f548f3
27b582f2ade1d3a095a6c7812fc2e3a44ac925ed4d2fa752683dfc9c3b56ff6f
245d9c3f4797432ac60143aedd2adfe48bb516319d398078b01aa402be40ade3
fb7f22c053c3694a8fb7d0594bccb801525f467c6f05364041d191bc5f8cbac4
1cc75dec5af720649974cfdacc0131e286c5b91f6e1efa6df7a37226ac1303ff
cc9bee036017bceaea8088335198b1a0a3d7926b68457069111ab617a4c6fb15
f5a322293dbe514e5ed9b943107c7f86bde0c558b2672271570fe34c5db2ddbe
4d09cb61e646c9d41fdbf9d16a33b849fae9b6dc7fec8000889863a160b69118
8ab97a84d52ac4a1a5d72ba7d1a389eceb693e119e68af4bc998d4ae72182e6f
e13c5ff39d0462c8edde0e93328774bb35e111e1c0b8679e1a05c95687c62fcc
f1bf3d427a6586bd5b0f92879419ae9fa82bd94212bb7aaf17e3469f750dbd63
157eec9622ac380d951f1f224dacced8e06a99c2d01b69f2fecfd285dc805086
cdcb4d4d686fdca88c4d8575c4dfb258108c5333e3993593105879b58b57cea0
0e188fb3c35eaa396b61221c595066a1535a1a0b3113e4d54212fe0f93382f45
d264580ac179714b897744874a5e51e746f0c0ad0710046b8b22d64695f34e48
9478331b066f45b7cb53f28020a60bdf170167c321188a8926561c106d650c8c
a6d848c00aaeb2a3170dec4121f2b309e9892e4135aa6a747275e3d07a320814
cb1094fe0a3a5e61767ada1bed806a5c0cddf7a0433f5ecf4b1036a998d922c3
0b089a2f12f778484760a57d1071f72ca418328af92f51c63626eaf4c8f0cb2b
664986b1f17b8b52ab72615af382b4a91d84a2286d89d225ff5b013bfc8df330
03164b6b26ac847cd2cf246b24a6de51b9ee0e6fd07ca8911e838e6861b07b01
3a8772f6fb6aea0890a079ecff0662bcc931d9ae83a137bc04862366f6218a48
4fd5b389bc9b0c609600ba9b5e61a0e60fecc6e3b5d49f230137a634fb40bf8b
f5bcfe70dc4923d302b3f9195d16782327130b3083cc31fab56fd167bf6853c2
7a759bab1d115f13122de20e1636436027fc53dbbb4915c8d65bf3f70e8a6fff
3b2a4df6397e2a5d96bbce152bc41ea7ba2eb4443d7fbcb584e688d3ca5a3087
b28622a336a6e44a81348f1a54ae78ac68e02e90b19e1e6bbf19aec0e0bf5efd
edda08aad9b57b6070c12b44bf4dfb3ee58f47cba5a2d523b0b5995974fdd246
0284a0f3380041d118056c1c51ce3247d13d87ea6a4b4ca1cc7ffcba241214f7
00cfae5b4e16fa506b4c8aa182bd45f5980b9a5d2155cc9d48315011b157d453
7b49fcd839362c9736695e31eb82703c4b4052d0f8192b7e0f644e4ff67ee800
f328b56b5b56aeb44a7b73eb0e595b7588b031728c95ff99b80d0be4e8ad9191
26f2d6911f8a14df7aee5d4f63f534afd9d522da2a3a18cf6853d21de4dfe543
17acdd06ba89ed2921f47a50d6d51c9c89edfefe83fe63400703985583290b6b
75c0c25a1e318e779963e962f0967a2ea7d3745ddab434d323328030afeba019
62aab38ab8f39aa668be230675294bdfd7c259f4b38c4083c76b4229a53af019
021f709b7b54c85ec1d4e86c37744b
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (title.dvi)
@start /Fa 137[71 75 52 53 55 3[75 1[37 2[37 3[61 3[65
20[81 4[106 71[{}12 119.552 /CMBX12 rf /Fb 134[44 2[44
46 32 33 33 1[46 42 46 69 23 2[23 1[42 25 37 46 1[46
42 10[62 2[46 61 1[57 1[62 4[30 3[57 1[60 1[62 12[42
1[42 1[42 1[23 1[23 44[{}32 83.022 /CMR10 rf /Fc 137[102
108 1[76 79 3[108 1[54 6[88 3[94 11[149 2[144 1[132 2[184
37[54 39[{}13 172.188 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop 125 1159 a Fc(RealP)-5 b(a)g(v)g(er)65 b(User's)h(Man)-5
b(ual)597 863 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -56.90549 -39.83366
398.33841 -44.10184 .5 Frame  gsave 0. setgray fill grestore gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
1849 1332 a Fb(Solving)27 b(Nonlinear)g(Constrain)n(ts)f(b)n(y)i(In)n
(terv)-5 b(al)27 b(Computations)2527 1443 y(Edition)h(0.4,)e(for)i
(RealP)n(a)n(v)n(er)c(V)-7 b(ersion)27 b(0.4)3449 1544
y(August)h(2004)125 4920 y Fa(Lauren)l(t)45 b(Gran)l(villiers)597
863 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -56.90549 -492.23254
398.33841 -495.07756 .5 Frame  gsave 0. setgray fill grestore gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
