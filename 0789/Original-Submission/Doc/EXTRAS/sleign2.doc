H0:  File name entry:
  This program will create a FORTRAN file containing the coefficients   
p(x),q(x),w(x), defining the differential equation, and the boundary    
condition functions u(x),v(x) if required.  This file has to be given a 
filename which is acceptable to your FORTRAN compiler.  For example, it 
might be called bessel.f or bessel.for depending upon your compiler.    
-----------------------------------------------
H1: The differential equation:
  The prompt "Input p (or q or w) =" requests you to type in a FORTRAN  
expression defining the function p(x), which is one of the three coeffi-
cient functions defining the Sturm-Liouville differential equation      
                                                                        
                   -(p*y')' + q*y =  lambda*w*y              (*)        
                                                                        
to be considered on some interval (a,b) of the real line.  The actual   
interval used in a particular problem can be chosen later, and may be   
either the whole interval (a,b) where the coefficient functions p,q,w,  
etc. are defined or any sub-interval (a',b') of (a,b); a = -infinity    
and/or b = +infinity are allowable  choices for the end-points.         
  The coefficient functions p,q,w of the differential equation may be   
chosen arbitrarily but must satisfy the following conditions:           
  (1) p,q,w must be real-valued throughout (a,b)                        
  (2) p,q,w are piece-wise continuous and defined throughout the        
interior of the interval (a,b)                                          
  (3) both p and w must be strictly positive in (a,b)                   
  For reliable error analysis in the numerical procedures condition     
(iii) above is often replaced with                                      
  (iii)' p,q,w are four times continuously differentiable on (a,b).     
  The values of p,q,w at the end-points a and b are critical to the     
classification of the differential equation.  (See H2 and H9.)          
-----------------------------------------------

H2:  End-point classification:
  The correct classification of the end-points a and b is essential to a
correct working of the SLEIGN2 program.  To classify the end-points it  
is convenient to choose a point c in (a,b); i.e.  a < c < b.  Subject to
the general conditions on the coefficients p,q,w above:                 
  (1) a is REGULAR (say R) if -infinity < a, and p,q,w are piece-wise   
continuous on [a,c], and p(a) > 0  and w(a) > 0.                        
  (2) a is WEAKLY REGULAR (say WR) if -infinity < a, a is not R, and    
               |c                                                       
      integral | {1/p+|q|+w} < +infinity.                               
               |a                                                       
Note: if end-point a is not R or WR, then a is SINGULAR.                
I.e. either -infinity = a, or -infinity < a and                         
               |c                                                       
      integral | {1/p+|q|+w} = +infinity.                               
               |a                                                       
  (3) SINGULAR end-point a is LIMIT CIRCLE NON-OSCILLATORY (say LCNO) if
for some real lambda ALL solutions y of the differential equation       
                                                                        
     -(p*y')' + q*y = lambda*w*y  on (a,c]                      (*)     
                                                                        
satisfy the two conditions:                                             

               |c                                                       
  1.  integral | { w*y*y } < +infinity.                                 
               |a                                                       
  2. y has at most a finite number of zeros in (a,c]                    
                                                                        
  (4) SINGULAR end-point a is LIMIT-CIRCLE OSCILLATORY (say LCO) if for 
some real lambda ALL solutions y of the differential equation (*) satis-
fy the two conditions:                                                  
               |c                                                       
  1.  integral | { w*y*y } < +infinity.                                 
               |a                                                       
  2. y has an infinite number of zeros in (a,c]                         
                                                                        
  (5) SINGULAR end-point a is LIMIT POINT (say LP) if for some real     
lambda at least one solution of the differential equation (*) satisfies 
the condition:                                                          
               |c                                                       
      integral | {w*y*y} = +infinity                                    
               |a                                                       
There is a similar classification of the end-point b into one of the    
five distinct cases R, WR, LCNO, LCO, LP.                               
                                                                        
Although the classification of singular end-points invokes a real value 
of the parameter lambda, the classification is invariant in lambda; all 
real choices of lambda lead to the same classification.                 
                                                                        
In determining the classification of singular end-points invoking the   
differential equation (*), it is often convenient to start with the     
choice lambda=0 in attempting to find solutions (particularly is this   
the case when q =0 on (a,b)); however see example 7 below.              
                                                                        
See H4 below on the use of maximal  domain functions to determine the   
classification at singular end-points.                                 
                                                                        
 EXAMPLES: 
1. -y'' = lambda*y is R at both end-points of (a,b) when a & b are fin- 
     ite.                                                               
2. -y'' = lambda*y on (-infinity, +infinity) is LP at both end-points.  
3. -(sqrt(x)*y'(x))' = lambda*(1./sqrt(x))*y(x) on (0,+infinity) is WR  
     at 0 and LP at +infinity. (take lambda = 0 in (*)); see xamples.x, 
     #10 (weakly regular).                                              
4. -((1-x*x)*y'(x))' = lambda*y(x) on (-1,1) is LCNO at both ends (take 
    lambda=0 in (*)); see xamples.x  #1 (Legendre).                     
5. -y''(x) + C*(1/(x*x))*y(x) = lambda*y(x) on (0,+infinity) is LP at   
   +infinity (take lambda = 0 in (*)), and at 0 is:                     
  (i) LP for C .ge. 3/4 ;                                               
  (ii) LCNO for -1/4 .le. C .lt. 3/4 (but C .ne. 0);                    
  (iii) LCO for C .lt. -1/4                                             
      (in all cases take lambda = 0 in (*));                            
6. -(x*y'(x))' - (1/x)*y(x) = lambda*y(x) on (0,+infinity) is LCO at 0  
  and LP at +infinity (take lambda = 0 in (*) with solutions cos(ln(x)) 
  and sin(ln(x))); see xamples.x #7 (BEZ)                               
7. -(x*y'(x))' - x*y(x) = lambda*(1/x)*y(x) on (0,+infinity) is LP at 0 
  and LCO at +infinity (take lambda = -1/4 in (*) with solutions cos(x)/
  sqrt(x) and sin(x)/sqrt(x)); see xamples.x #6 (Sears-Titchmarsh)      
-----------------------------------------------


H3: DEFAULT entry: 
The complete range of problems for which SLEIGN2 is applicable can only 
be reached by appropriate entries under end-point classification and    
boundary conditions.  However there is a DEFAULT application which re-  
quires no detailed entry of end-point classification or boundary condi- 
tions, subject to:                                                      
(i) the DEFAULT application CAN NOT	be used at a LCO end-point          
(ii) if an end-point a is R, then the Dirichlet boundary condition      
     y(a) = 0 is automatically used.                                    
(iii) if an end-point a is WR, then the following boundary conditions   
      are automatically applied:                                        
  (1) if p(a)=0, and both q(a),w(a) are bounded, then                   
      Dirichlet y(a) = 0.                                               
  (2) if p(a) > 0, and q(a) and/or w(a) are not bounded, then           
      Neumann (py')(a) = 0.                                             
  (3) if p(a)=0, and q(a) and/or w( a) are not bounded, then no reliable
      information can be given on the DEFAULT boundary condition.
(iv) if an end-point is LCNO, then in most cases the principal or Friedr
ichs boundary condition is applied (see H4).                            
(v) if an end-point is LP, then in most cases the normal LP procedure is
    applied.                                                            
                                                                        
If you choose the DEFAULT condition , then no entry is required for the 
u,v boundary condition functions.                                       
-----------------------------------------------

H4: Limit-circle boundary conditions:
At an end-point a the limit-circle type separated boundary condition is 
of the form (similar remarks throughout apply to the end-point b)       
                                                                        
       A1*[y,u](a) + A2*[y,v](a) = 0                           (**)     
                                                                        
where y is a solution of the differential equation                      
                                                                        
     -(p*y')' + q*y = lambda*w*y  on (a,b);                     (*)     
                                                                        
here A1, A2 are real numbers (not both zero); u and v are boundary con- 
dition functions; and for real-valued y and u the form [y,u] is defined 
by                                                                      
      [y,u](x) = y(x)*(pu')(x) - u(x)*(py')(x)   for x in (a,b).        
                                                                        
The object of this section is to provide help in choosing appropriate   
functions u and v in (**), given the differential equation (*).  Full   
details of the boundary conditions for (*) are discussed in H5;  here it
is sufficient to say that the limit-circle type boundary condition (**) 
can be applied at any end-point in the LCNO, LCO classification, but
also in the R, WR classification subject to the appropriate choice of u
and v.

Let (*) be R, WR, LCNO at end-point a; choose c in (a,b); then either   
(i) u and v are a pair of linearly independent solutions of (*) on (a,c]
    for any chosen real values of lambda, or
(ii) u and v are a pair of real-valued maximal domain functions defined 
    on (a,c] satisfying [u,v](a) .ne. 0.                                
    The maximal domain D(a,c] is defined by                             
                                                                        
       D(a,c] = {f:(a,c]->R:: f,pf' in AC(a,c];                         
                   f, ((-pf')'+qf)/w in L2((a,c;w)}                     
                                                                        
    It is known that for all f,g in D(a,c] the limit                    
                                                                        
       [f,g](a) = lim[f,g](x) as x->a                                   
                                                                        
    exists and is finite.                                               
                                                                        
If (*) is LCNO or LCO at a, then all solutions of (*) belong to D(a,c]  
for all values of lambda.                                               
                                                                        
The boundary condition (**) is essential in the LCNO and LCO cases but  
can also be used with advantage in some R and WR cases.                 
In the R, WR and LCNO cases but not in the LCO case, the boundary condi-
tion functions can always be chosen so that                             
        lim u(x)/v(x) = 0 as x->a,                                      
and it is recommended that this normalisation be effected; this has been
done in the examples given below. In this case the boundary condition [y
,u](a)=0 (i.e.A1=1,A2=0 in (**)) is called the principal or Friedrichs b
oundary condition.                                                      
                                                                        
There are similar definitions when the end-point b is R, WR, LCNO or LCO
                                                                        
In the case when both end-points a and b are, independently, in R, WR,  
LCNO or LCO classification it may be that symmetry allows for one set of
boundary condition functions to be used at both end-points (see Example 
3 (Legendre) below); in other cases different pairs have to be chosen,  
one pair for each end-point; see xamples.x #16(Jacobi), #18(Dunsch), #19
(Donsch).                                                               
                                                                        
Note that a solution pair u,v is always a maximal domain pair, but not  
necessarily vice versa.                                                 
EXAMPLES:                                                               
1. -y''(x) = lambda*y(x) on [0,pi] is R at 0 and R at pi.               
   At 0, with lambda=0, a solution pair is u(x) = x, v(x) = 1.          
   At pi, with lambda=1, a solution pair is u(x) = sin(x),v(x) = cos(x).
2. -(sqrt(x)*y'(x))' = lambda*y(x)/sqrt(x) on (0,1] is WR at 0 and      
  R at 1.                                                               
  (The general solutions of this equation are                           
  cos(2*sqrt(x*lambda)), sin(2*sqrt(x*lambda))                          
  At 0 with lambda = 0, a solution pair is                              
    u(x) = 2*sqrt(x), v(x) = 1.                                         
  At 1 with lambda = pi*pi/4 a solution pair is                         
    u(x) = sin(pi*sqrt(x)), v(x) = cos(pi*sqrt(x)).                     
  At 1 with lambda = 0, a solution pair is                              
    u(x) = 2*(1-sqrt(x)), v(x) = 1.                                     
  See also xamples.x #10 (Weakly Regular).                              
3. -((1-x*x)*y'(x))' = lambda*y(x) on (-1,1) is LCNO at both ends.      
  At +-1, with lambda = 0, a solution pair is                           
   u(x) = 1, v(x) = 0.5*log((1+x)/(1-x)).                               
  At +1 a maximal domain pair is u(x) = 1 , v(x) = log(1-x)             
  At -1 a maximal domain pair is u(x) = 1, v(x) = log(1+x).             
  See also xamples.x #1 (Legendre).                                     
4. -y''(x) - (1/(4x*x))*y(x) = lambda*y(x) on (0,+infinity) is LCNO at 0
   and LP at +infinity.                                                 
  At 0 a maximal domain pair is                                         
   u(x) = sqrt(x), v(x) = sqrt(x)*log(x).                               
   See also xamples.x #2 (Bessel).                                      
5. -y''(x) - 5*(1/(4*x*x))*y(x) = lambda*y(x) on (0,+infinity) is LCO at
   0 and LP at +infinity.                                               
  At 0 with lambda = 0, a solution pair is                              
   u(x) = sqrt(x)*cos(log(x)), v(x) = sqrt(x)*sin(log(x))               
  See also xamples.x #20 (Krall).                                       
6. -y''(x) - (1/x)*y(x) = lambda*y(x) on (0,+infinity) is LCNO at 0 and 
   LP at +infinity.                                                     
  At 0 a maximal domain pair is                                         
   u(x) = x, v(x) = 1 -x*log(x) .                                       
  See xamples.x #4(Boyd).                                               
7. -((1/x)*y'(x))' + (k/(x*x) + k*k/x)*y(x) = lambda*y(x) on (0,1], with
   k real and .ne. 0, is LCNO at 0 and R at 1.                          
  At 0 a maximal domain pair is                                         
   u(x) = x*x, v(x) = x - 1/k .                                         
   See also xamples.x #8 (Laplace Tidal Wave).                          
-----------------------------------------------
H5: Boundary conditions:                                                
  Boundary conditions for Sturm-Liouville boundary value problems on an 
interval (a,b) are either                                               
 (i) separated, with at most one condition at end-point a and at most   
    one condition at end-point b, or                                    
 (ii) coupled, when both a and b are, independently, in one of the end- 
    point classifications R, WR, LCNO, LCO, in which case two independ- 
    ent boundary conditions are required which link the solution values 
    near a to those near b.                                             
  The SLEIGN2 program allows for all separated conditions; and special  
cases of the coupled conditions--the periodic-type boundary condi-      
tions applicable only when the interval (a,b) is finite and both a and b
are R.                                                                  
                                                                        
   Separated Conditions                                                 
   --------------------                                                 
2. The boundary conditions to be selected depend upon the classification
 of the differential equation at the end-point.                         
3. If the end-point is LP, then no boundary condition is required or    
allowed.                                                                
4. If the end-point a is R or WR, then a separated boundary condition is
of the form                                                             
         A1*y(a) + A2*(py')(a) = 0,                                     
where A1, A2 are real constants you must choose, but not both zero.     
5. If the end-point a is LCNO or LCO, then a separated boundary condi-  
tion is of the form                                                     
         A1*[y,u](a) + A2*[y,v](a) = 0,                                 
where A1, A2 are real constants you must choose, but not both zero; here
u,v are the pair of boundary condition functions you have previously se-
lected when the program MAKEPQW was being run.                          
6. If the end-point a is LCNO and the boundary condition pair u,v has   
been chosen so that                                                     
         lim u(x)/v(x) = 0  as x->a                                     
(which is always possible) then A1 =1, A2 = 0 ( i.e. [y,u](a) = 0 )     
gives the principal (Friedrichs) boundary condition at a.               
7. If a is R or WR and boundary condition functions u,v have been enter-
ed in MAKEPQW, then both 5. and 6. above apply to entering separated    
boundary conditions at such an end-point; the boundary conditions in    
this form are equivalent to the point-wise conditions in 4. (subject to 
care in choosing A1, A2); this singular form of a regular boundary con- 
dition may be particularly effective in the WR case if the boundary con-
dition form in 4. leads to numerical difficulties.                      
8. Conditions 4., 5., 6., 7. apply similarly at end-point b.            
9. If a is R, WR, LCNO, or LCO and b is LP, then only a separated condi 
tion at a is required and allowed; similarly if a and b are interchanged
10. If both end-points a and b are LP, then no boundary conditions are  
required or allowed.                                                    
11. The indexing of eigenvalues for boundary value problems with sepa-  
rated conditions is discussed below in H11.                             
                                                                        
     Coupled Conditions                                                 
     ------------------                                                 
12. The periodic-type boundary conditions on (a,b) apply only when both 
end-points a and b are R; these conditions are of the form              
        y(b) = c*y(a)                                                   
   &                                                                    
      (py')(b) = (py')(a)/c ,                                           
where c may be chosen to be any real number not equal to 0.             
13. The case c = 1 is called periodic; the case c = -1 is called semi-  
periodic.                                                               
14. The indexing of eigenvalues for periodic-type boundary conditions is
discussed below in H15 .                                                
----------------------------------------------
H6: Recording the results:                                              
If you choose to have a record kept of the results, then the following  
information is stored in a file with the name you select:               
  (i) the file name                                                     
  (ii) the interval (a,b) which was used.                               
     For SEPARATED boundary conditions,                                 
  (iii) the end-point classification                                    
  (iv) a summary of coefficient information at WR, LCNO, LCO end-points 
  (v) boundary condition constants (A1,A2), (B1,B2) if entered          
  (vi) NUMEIG, EIG, TOL  or                                             
      NUMEIG1, NUMEIG2, TOL                                             
      as entered                                                        
  (vii) the computed eigenvalue, EIG, and its estimated accuracy, TOL   
  (viii) IFLAG reported.                                                
    For COUPLED boundary conditions                                     
  (ix) boundary condition parameter c                                   
  (x) EIG value computed; TOL report                                    
  (xi) IFLAG report.                                                    
----------------------------------------------
H7:   Type and choice of interval:                                      
   ----------------------                                               
  You may enter any interval (a,b) for which the coefficients p,q,w are 
well defined by your FORTRAN statements in MAKEPQW, provided that (a,b) 
contains no interior singularities.                                     
----------------------------------------------
H8:  Entry of end-points:                                               
   ----------                                                           
  End-points a and b must be entered as real numbers; there is no sym-  
bolic entry,  e.g. pi must be entered as 3.14159... to a chosen number  
of decimal places.                                                      
----------------------------------------------
H9: End-point values of p,q,w:                                          
   ---------------------                                                
  The program SLEIGN2 needs to know whether or not the coefficient func-
tions p(x), q(x), w(x) defined by the FORTRAN expressions you entered in
 MAKEPQW can be evaluated numerically without running into difficulty.  
If, for example, either q or w has an infinite limit at a, or if p(a) is
 0, then SLEIGN2 needs to know so that only nearby values of x are used.
----------------------------------------------
H10:  Initial Value Problems                                            
   ----------------------                                               
(1) The boundary value problems consist of the Sturm-Liouville differen-
tial equation                                                           
   -(p*y')' + q*y = lambda*w*y   on(a,b)                         (*)    
with either separate or coupled boundary conditions, as given in H5.    
(2) The initial value problem facility allows for the computation of a  
solution of (*), with a user-chosen value of lambda, for user-chosen in-
itial conditions                                                        
either (i) from end-point a, if R,WR,LCNO,LCO but not LP, towards end-  
           point b of any classification                                
or    (ii) from end-point b, if R,WR,LCNO,LCO but not LP, towards end-  
           point a of any classification                                
or   (iii) from end-points a and b, both satisfying the end-point re-   
           quirements in (i) and (ii) above respectively, towards an in-
           terior point of the interval (a,b), selected by the program. 
  The initial values to determine uniquely the computed solution are of 
the form                                                                
      (iv) at end-point a                                               
           if a is R or WR then y(a)=alpha1, (p*y')(a)=alpha2           
           if a is LCNO or LCO then [y,u](a)=alpha1, [y,v](a)=alpha2    
       (v) at end-point b                                               
           if b is R or WR then y(b)= beta1, (p*y')(b)=beta2            
           if b is LCNO or LCO then [y,u](b)=beta1, [y,v](b)=beta2      
where alpha1,alpha2,beta1,beta2 are user-chosen real numbers with       
alpha1,alpha2 not both zero, and    beta1,beta2 not both zero.          
  Note that the value of the parameter lambda in (*) has to be chosen by
the user, and may be any real number.                                   
  In the case (iii) above when the interval (a,b) is finite, the inter- 
ior point selected by the program is generally near to the mid-point of 
(a,b); when (a,b) is not finite no general rule can be given.           
  In the case (iii) above if, given alpha1,alpha2 and beta1,beta2, the  
parameter lambda is chosen to be an eigenvalue of the associated bound- 
ary value problem, the computed solution may or may not be a given eig- 
enfunction; the signs of the two computed solutions either side of the  
interior point, may be different.                                       
  The output for a solution of an initial value problem is in the form  
of stored numerical data.  This leads to a screen plot, or can be print-
ed out in graph form if graphics software is available.                 
----------------------------------------------
H11:   Indexing of Eigenvalues                                          
       -----------------------                                          
  The indexing of eigenvalues is an automatic facility in SLEIGN2.  The 
following general results hold for the separated boundary condition     
problem (see H5 above):                                                 
1. If both end-points a and b are independently R, WR, LCNO, then the   
spectrum of the eigenvalue problem is discrete (consists only of eigen- 
values), simple (all eigenvalues are of multiplicity one), bounded below
 with a single cluster point at +infinity.  These eigenvalues are index-
ed as {lambda(n): n=0,1,2,...}, where                                   
 (i) lambda(n) < lambda(n+1) (n=0,1,2,...), lim lambda(n) = +infinity.  
 (ii) if {psi(x,n): n=0,1,2...} are the corresponding eigenfunctions, th
en psi(x,n) has exactly n zeros in the open interval (a,b).             
2. If both end-points a and b are independently in R, WR, LCNO, LCO and 
at least one end-point is LCO, then the spectrum is discrete, simple,   
but with cluster points at both +infinity and -infinity; the eigenvalues
 are indexed as {lambda(n): n=0,1,-1,2,-2,..}, where                    
 (i) lambda(n) < lambda(n+1) (n=..-2,-1,0,1,2,..)                       
    lambda(n) -> +infinity or -infinity with n tending to + - infinity  
 (ii) the program automatically indexes lambda(0) as the smallest non-  
    negative eigenvalue.                                                
 (iii) if {psi(n): n=0,1,-1,2,-2,..} are the corresponding eigenfunc-   
    tions, then every psi(n) has infinitely many zeros in (a,b)         
3. If one or both end-points is LP, then the spectral sets of the bound-
ary value problem can contain one or more intervals of continuous spec- 
trum, with possibly some (necessarily simple) eigenvalues.  For these   
essentially more difficult spectral problems, SLEIGN2 can be used as an 
investigative tool to give qualitative information on the spectrum.     
  If the continuous spectrum is bounded below, then there may be a fin- 
ite or infinite number of eigenvalues below the lower bound, and SLEIGN2
may be able to detect these eigenvalue's indices and compute their val- 
ues.                                                                    
  It can happen in this case, i.e. at least one end-point is LP, that   
the spectrum is discrete, consisting only of simple eigenvalues with    
cluster at one or both of +infinity, -infinity.  If also the spectrum is
 bounded below, then the eigenvalues can be indexed as in 1. above; i.e.
  {lambda(n): n=0,1,2,..} with lambda(n) -> +infinity.                  
In these circumstances, if {psi(x,n): n=0,1,2..} represents the corre-  
sponding set of eigenfunctions, then psi(n) has exactly n zeros in the  
open interval (a,b).                                                    
  If the discrete spectrum is unbounded below, then all the eigenfunc-  
tions have infinitely many zeros in the open interval (a,b).            
EXAMPLES.                                                               
  In respect of the points 1,2 and 3 above, the following identified ex-
amples illustrate the spectral properties of these boundary value prob- 
lems.                                                                   
1. See xamples.x: #1 (Legendre)                                         
                  #2 (Bessel) with -1/4 < c < 3/4                       
                  #4 (Boyd)                                             
                  #5 (Latzko)                                           
2. See xamples.x: #6 (Sears-Titchmarsh)                                 
                  #7 (BEZ)                                              
                  #19 (Donsch)                                          
3. See xamples.x: #21 (Fourier) on [0,+infinity)                        
                  #13 (Hydrogen atom)                                   
                  #14 (Marletta)                                        
                  #20 (Krall)                                           
----------------------------------------------
H12: Entry for eigenvalue index and tolerance:                          
      ------------------------------                                    
  For SEPARATED boundary condition problems (see H5 above), SLEIGN2     
calls for input information options to compute                          
  (1) A single eigenvalue                                               
  (2) A series of eigenvalues.                                          
In each case indexing of eigenvalues is called for;  see H11 above.     
Entry (1) above asks you to supply data in the form                     
 (1') NUMEIG, EIG, TOL                                                  
Here NUMEIG is the index of the desired eigenvalue, and requires input  
of a positive, negative, or zero integer; negative integers are allowed 
only in the case when the problem is LCO at one or both end-points.     
EIG allows for the entry of an initial guess for the requested eigenval-
ue, if an especially good one is available, or one can enter 0. as defau
lt input--i.e. no initial guess is provided.  In the latter case an init
ial guess is computed by SLEIGN2. If the guess desired is zero, enter   
any small number, like 0.001.                                           
TOL is the accuracy you are asking for in the computed eigenvalue. It is
an absolute accuracy if the magnitude of the eigenvalue is less than or 
equal to 1, but is a relative accuracy otherwise.  Typical values would 
be .001 for nominal accuracy, or perhaps .0000001 for extreme accuracy. 
                                                                        
  There are DEFAULT entries:                                            
      NUMEIG/                                                           
for which the program sets EIG and TOL, and                             
      NUMEIG,EIG/                                                       
for which the program sets TOL.                                         
  Entry (2) above asks you to supply data in the form                   
 (2') NUMEIG1, NUMEIG2, TOL                                             
Here two integers n1, n2 should be entered with n1 < n2; as with (1')   
above negative integers are allowed only in the LCO case.               
TOL has the same meaning as above.                                      
  There is a DEFAULT entry                                              
      NUMEIG1,NUMEIG2/                                                  
for which the program sets TOL.                                         
  In all these DEFAULT modes the program tries to get the most accur-   
acy it is capable of.                                                   
                                                                        
  For COUPLED periodic-type boundary conditions (see H5 and H15) the    
program calls for data in the form                                      
     NUMEIG =                                                           
Here NUMEIG is the index of the requested eigenvalue and requires input 
of a non-negative integer.                                              
  In this mode the program sets its own TOL.                            
----------------------------------------------
H13:  IFLAG information 
  All results are reported with a flag identification.  The flags carry 
the following meanings:                                                 
                                                                        
 IFLAG = 1 - successful problem solution.                               
       = 2 - integrator tolerance cannot be reduced further.            
       = 3 - no more improvement                                        
       = 4 - An internal consistency check failed                       
       = 6 - in SECANT-METHOD, ABS(DE) .LT. EPSMIN                      
       = 7 - iterations are stuck in a loop                             
       = 8 - number of iterations has reached the set limit             
       = 9 - residual truncation error dominates                        
       = 10 - improper input parameters                                 
       = 11 - NUMEIG exceeds actual highest eigenvalue index            
       = 12 - failed to get a bracket                                   
       = 13 - AA cannot be moved in any further.                        
       = 14 - BB cannot be moved in any further.                        
       = 51 - integration failure after 1st call to INTEG               
       = 52 - integration failure after 2nd call to INTEG               
       = 53 - integration failure after 3rd call to INTEG               
       = 54 - integration failure after 4th call to INTEG               
----------------------------------------------
H14:  Plotting       
  After computing a single eigenvalue, see H12 (1) above, (but NOT after
 computing a series of eigenvalues, see H12 (2) ) it is possible to have
 the eigenfunction plotted.  If this is desired, enter 'y' for yes, so  
that SLEIGN2 will compute some points on the eigenfunction and store the
 data.                                                                  
One can have the eigenfunction data in the form of points (xi,yi) with  
the xi selected points in (a,b),    or in the form of points (ti,yi)    
where the ti are points in a standardized interval (-1,1): i.e. the int-
erval (a,b) has been mapped onto (-1,1).  This latter choice can be es- 
pecially helpful when the original interval is infinite.                
  Additionally, one can have a plot of the so-called Pruefer angle or mo
dulus in either the x- or t- variable.                                  
  In either case, once the choice has been made of which function is to 
be plotted, a crude plot is displayed on the monitor screen before ask- 
ing whether or not you wish to save the computed plot points in a file. 
----------------------------------------------
H15:  Periodic-type problems  
  The indexing of eigenvalues is an automatic facility in SLEIGN2.  The 
following general result holds for the periodic-type boundary condition 
problem.                                                                
  Recall that these problems require both the end-points a and b to be  
R.                                                                      
  The spectrum of the boundary value problem is discrete (consists only 
of eigenvalues), bounded below with a single cluster point at +infinity.
In general the spectrum is not simple; there may be one or more eigen-  
values of multiplicity two, but none of higher multiplicity.            
  These eigenvalues are indexed as  {lambda(n): n=0,1,2,...} where      
lambda(0).le.lambda(1).le.lambda(2).le.....le.lambda(n).le...      (*)  
and lambda(n)->+infinity as n->+infinity.                               
  Note that in (*) there can be at most two consecutive .le. since the  
multiplicity of any eigenvalue cannot exceed 2.                         
  The connection between the index n and the number of zeros of the cor-
responding eigenfunction psi(x,n) is not as simple as it is in the case 
of separated conditions; in particular psi(x,n) need not have exactly n 
zeros in the open interval (a,b).                                       
Examples of special interest:                                           
  (i) xamples.x #21 (Fourier) on [0,pi]                                 
  (ii) xamples.x #11 (Plum) on [0,pi]                                   
  (iii) xamples.x #25 (Meissner) on [-0.5,0.5] .                        
----------------------------------------------
