###############################################################################
######            Definition of CacheParameters attributes         ############
#####
##### . Each definition must be separated by at least a comment line
#####     (starting by #)
#####
##### . The definition must provide the name, type and default value
#####     (no default: '-' or 'N/A') in this order, one by line.
#####
##### . Only a single word is considered for the name,
#####     type and default value (extra is comment)
#####
##### . The short info, the help and the keywords must be provided in this
#####     order within "\(" and "\). For keywords, the plural part of a word
#####     can be put in parenthesis; both singular and plural will be keywords
#####
##### . The default value is automatically reported in the help.
#####
##### . In addition, the definition can have optional attributes:
#####       - ALGO_COMPATIBILITY_CHECK yes/no, the default is no. If yes, the
#####         value of this attribute can be used for comparing two sets of
#####         attributes for algorithm compatibility. This is used by the
#####         Runner.
#####
#####       - RESTART_ATTRIBUTE yes/no, the default is no. If yes, the
#####         value of this attribute can be modified during hot or warm
#####         restart. Otherwise, modifying this attribute during hot restart
#####         will trigger an error message.
#####
#####       - UNIQUE_ENTRY yes/no, the default is yes. If no, multiple
#####         values may be assigned to this parameter.
#####
###############################################################################
CACHE_FILE
std::string
""
\( Cache file name \)
\(

. Cache file. If the specified file does not exist, it will be created.

. Argument: one string.

. If the string is empty, no cache file will be created.

. Points already in the cache file will not be reevaluated.

. Example: CACHE_FILE cache.txt

\)
\( basic cache file \)
ALGO_COMPATIBILITY_CHECK no
RESTART_ATTRIBUTE no
###############################################################################
CACHE_SIZE_MAX
size_t
INF
\( Maximum number of evaluation points to be stored in the cache \)
\(

. The cache will be purged from older points if it reaches this number
  of evaluation points.

. Argument: one positive integer (expressed in number of evaluation points).

. Example: CACHE_SIZE_MAX 10000

\)
\( advanced cache \)
ALGO_COMPATIBILITY_CHECK no
RESTART_ATTRIBUTE no
###############################################################################
