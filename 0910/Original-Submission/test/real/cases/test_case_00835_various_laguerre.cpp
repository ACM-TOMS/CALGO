
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00835_various_laguerre : public TestCaseReal
    {
    public:
      TestCase_case_00835_various_laguerre() { }
      virtual ~TestCase_case_00835_various_laguerre() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00835_various_laguerre");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.clear();
        data.push_back(ef::laguerre(ef::euler_gamma() + 77, ef::hundred() + ef::pi()));
        data.push_back(ef::laguerre(ef::fifty(), ef::hundred() + ef::pi()));
        data.push_back(ef::laguerre(50, 60, ef::hundred() + ef::pi()));
        data.push_back(ef::laguerre(11, 123, ef::hundred() + ef::pi()));
        data.push_back(ef::laguerre(123, 11, ef::hundred() + ef::pi()));
        data.push_back(ef::laguerre(50, 60 + ef::euler_gamma(), ef::hundred() + ef::pi()));
        data.push_back(ef::laguerre(13, -23 - ef::euler_gamma(), ef::hundred() + ef::pi()));
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 7u> a =
        {{
           e_float("2.9276356693992164823864772440348752190066024538223074415297105151165770943141759621576909277234267143897827033139969479013316523062229423086482159271414049092941848468153957679407642786072331590318874254625913306242263237681034570202410228853981037467212001225031242187793556822979562040518701574946937389661232911624604735427595156119670185928295801904970825290906753623872046184552669581292550366062e20"),
           e_float("-5.3772858665316367945326670861248035385135068195408107444224140330918618124491913334326108190609663137053621403559449540979980392614275616854837336859533766552006017504470680948439395004503454338661787153619547289266120875664694834173121231542076884118452597331257914597593968891500638528289743812170197636468875487961782682438757169730653602794069999886410934335039494270777306246971543668926389980139e20"),
           e_float("-4.3920794239516673700541748948816833909647206523316230978012570201360380177856854766463221737540352888323237812965193754436867264667329320665300856473473735596778385777771040053813677642478696346798273024226173498649917826473814192909742628427512191522030054122715917080904047636900366161233740299716108548091756036728141842630492276838441115604333062839107019703463879090239223012952919818247971002708e17"),
           e_float("-6.2163440699418234250322295062804283620590842213019461033732755282889113538808636239802704389358819911085357650307961498075860876519993257190563227574450675869275398897069189644375847681827380218618947962485905186000101810272420065585501686817999108270084378661739862154738561455424359191089133645467806560113821174869833340845456815075607131159807124921661178325486978197749473118977344677668306907985e7"),
           e_float("-3.5315191689171526545985401649047366868984677481156991242035951691608051337612353789471435538728184335901900812974449545706407952760621933094371742007747293773571174035440465073956661953792706147260804736119772186608287981600221367607289882192674923827388138935658133692596438821682985854421864353566167423670245025142776743888740941530145142895041164649961253074825579933687916802864483041398049555255e21"),
           e_float("-4.9395776182373906791320871238823817216914749767705159629059420887315314592273167765116558637062679685532679302187357590268525362709614539036971508779591251508646692644633891709970173754108307223168581529765883049669616532473437492750555065593719279597459986225641222838981930415706557751183763318700716875547331562134430215881100141634434381244925034373595432406585816577262730950188401298182358458971e17"),
           e_float("-9.1379435460882371178318540257925348281771171248057587724134647918939773619057076766383506365949937004292310396557263858551169055263671125376159766628206779548121116907355001479912996547731408510748750929755718914936905180944340495345880445652500149795593052260255037934467840594782348328094983046115311851381144373767196745019880283604491127871800657676689743017383324118211080011791227292404944000371e16"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00835_various_laguerre(const bool b_write_output)
    {
      return TestCase_case_00835_various_laguerre().execute(b_write_output);
    }
  }
}
