
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00542_bessel_jv_order4_v : public TestCaseReal
    {
    public:
      TestCase_case_00542_bessel_jv_order4_v() { }
      virtual ~TestCase_case_00542_bessel_jv_order4_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00542_bessel_jv_order4_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_j(ef::euler_gamma() + 10000, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("3.5376077539740904691129540812039697932583230576575437259267749601197959408646353692676272873182616367498078798199363388557368465042214880145639256710866250166784015723884397856019170764516959883169573860161712327212328112628348548367599998909092048005578596818217609287916757030625335508723776089362781942546375344072585716829547560859008354900422000353893132696644084569788750633561788810746991503176e-33701"),
           e_float("6.2086307549866430104487530535508546637376317057620294689928805034958278299989415218144570862558382862970439377295145884688339947024108256786074738821358132019058904726067845014161531006536335384695235731234631826881487836509906730528426224763559390264005872049511214280580644949413102483024496720227064419033471572782693102994196085212960536085056751102575926294797835977060882173173019426316259469747e-32501"),
           e_float("1.5971880875568218650700662355010086751130158351401969698592066132081676898830349088093042472270946930584127612362290886391050025689707764812255907825791384742802204326000371386185904500303348811334751102808731098990396054434658199079102072068306108756335860013951051580992068833437396484854897297591086248646123575219906354951136830813474244269506847407007104015022171294379517585888315170532165210551e-17494"),
           e_float("1.0580968061717265943530053110532831356692815283120356522388374316240503160969010086518253480867922055616669714742980500448908025693538635715962348120153674402240738518224078868290030549168475483411572989835193311273629884774361146874391962751145628602889030932767097139752720910021960321055554968781502197611988836251071729059734748191995229970562297675482114293107720785144835467236819661120909376433e-5318"),
           e_float("-0.0056189916797788527261318139737608059583033154963521597971898771798782425972282361776232708511824377578753983325772498188936241139131949878480752762868486186210001970716151593270519393012628921219786853991738670930233467145147733999172350046364611225196704214226787932031745310648691657607353538576754409160098583139512473908212394706442900179332912972875091075307888509695628186888924432989890413298113"),
           e_float("0.00058607089024721097855435313351098803491144848962103932335043609717117103660207769569501433054836185455596095256868524405881362073877239380261230104305285803310951725309936994595047259739094095200731947951754237531958272116709025192793386874801421075866422023703220012786410999851468706687501363509628088066902076324023197891908723029572812025881977862811622830009329116819880293933610819575167147284397"),
           e_float("0.00097504646249784516138277056694714190745166215902502951479449253684563574299475051970477196581335362727331886472442690671704166252497885178449327920387718691507244925231202553111794500136973459498887711343788804079338146048970408522160923827437537924486123092666980394683499228112897466964712074482668873054872025678786924266730335624213994563513842265770017929173394144593990433585387778795713964611611"),
           e_float("0.00044286517014067125059503598477858227692207234133182175041702777779332019486858256325312695025405222162154261666885038426187591832504331227899075507035993524159755141758529289194408310774171457668124145474894493923748057029226324568080583447803365058706307885911030496399875506792597609580838477854769239686869959073568254655853335958135086459433457832750227553470757407188129230603558047121139879647344"),
           e_float("0.00036978312145717819901098141628385477352878818310771959218497547568508309474031822917510574948641759675437949280321449605304547786850257445135622141589697126251676467282262948575599381904575389334278214794799018334442392256644939090826892208586053235985208540167158561060062761191229361597086120459370990324735047569391388776608281122395765653305555526714504992225602249556435624505806831213624759702329"),
           e_float("0.00034429052937554951038687987500149316292341617258994435218193488610816693775411577896894765503105362761176463641090098627321021682513602836162467247670853613945352935111103257840213328610629579858391422351891352408181632624243851768689722003477883856394633714616329348625634437915058614857777881969974703940000856179655573290424721205794301445856538640046678640358397903447466371451540278491316713233465"),
           e_float("-0.0002433628744633328222039369513241425643855625332126956282052192472768562369981854526915518623477474498142218225418457139080445012285270271904138690800499463900162638726627373098581900878194172249090949163008145044905956419768941562098198014550483452786707608532355079966383358332403186506725187779288407176664371307143485084914272660315801848365541470432233505126474747316124510285625116086607045745277"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00542_bessel_jv_order4_v(const bool b_write_output)
    {
      return TestCase_case_00542_bessel_jv_order4_v().execute(b_write_output);
    }
  }
}
