
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00531_bessel_iv_order3_v : public TestCaseReal
    {
    public:
      TestCase_case_00531_bessel_iv_order3_v() { }
      virtual ~TestCase_case_00531_bessel_iv_order3_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00531_bessel_iv_order3_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_i(ef::euler_gamma() + 1000, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("7.9006268424925347136855644556185496934623655032907365385148954954792485618189045295012768795770349090556000267014415020465291482373085630629830376850687889781576964905666938874673421905091696058219673966633674937420534472728914535353035564401813571897550901618957273978697186803952048213769726401665585952795149165596987264972540870736614254968901045759802416553917975680831489079803539612388587957875e-2374"),
           e_float("9.6657592399704985427084849625409096609170171094192091629013882333903181911537329243297466990337858568771965352481769320910001546105051153761872409405216772739675776746653143940369088863685451306425849777110931648794513508309162338356845219329792315101286379983943593949989635893175966104621240675799167997996558290903565750941826166901934533116028740039390903426073733676676222305103691356953221446557e-2254"),
           e_float("1.9184728457051141962088860113499013733368801991248081034519976163110014461028774921634109654769123192328860622998356968208170518086762873738118922554540720613319099467019683097047159516438168130814600423036484557540354976884682450428573568749098939291146101771705823087708349442224957592014759472247477920697989736032950348787148887656585695796543030632916895087493639260941037157424587882999115459611e-750"),
           e_float("2.7660993572667530744508237404620836474580288353813798003710406584768065820680572233222022737966765380669435553629329483406220777096585590932454839406883227053677495390695363612145151648902509584728430095960456739089457555584792950919213314577242011786449639785918704029213263788719233314801199615764697415632784305787798771514817660073014137662915079236124845493099893687627953197056849967625585658134e851"),
           e_float("1.1916968369069010288198641779941879815143401554806310333571187696279265267033698736614771335730130696298854755491890328790256099433487424862404428179341563507679838543303861231684776972247751144680851626067833574426041985486052492191582868242507189557175636797470976072240314159025496448831371391507686646012113187810436409765680272374404487638083438134696606200322026726746813076695256033770195401385e7101"),
           e_float("9.8337653877046286948727960753852512184343626412297942212132519874563756748582085951630996134932797371853018553560056229005643816944849123761171352412479963076203604497691321310539232637464084968202601277737813622724236803612963303844411576839308758827337406507000716630570614325347502519635736025173316466592489034256186732907825214804921735700152201416843962869065374497272593570259463218874833646251e33924"),
           e_float("1.3342896136995083158357349851254449155262744125426427671209675891134916366314040323335768623417067169919590136589790099352691501545605797708130774148766743300816791516028437931557660424492263307430118818624055256490992464945656664694180412709521610113339066140207980904105093716047979137631748926518644864854493486588319487588053549996384653877387974852386215971327664783064323007029083881425306644263e121572"),
           e_float("8.3941074132384439018211216166990965391722611341713700509177598539705340609040705305892625690871462855856271298389368954322137342459123641478228144442397840279058453634620939790307156953962267846868860850580659244236437501110679246831129244925599797292606377952597124890065506420826375382233203097850319598077976942706940866545388815711480345396983554393819357697390139390042153122208223523148444606995e357657"),
           e_float("1.7463055112843778040995379824374000146451190487457385151207510960500261001374432446980251866676049313932499263569507980810450685190091652159852526902029179742342966155112995715681675553897557521662759056230188831508952787530278486332301525328108512807162874632434862564046624213219884930591926538455046851826526549526179094864717461681667372003901937231593562617487475197541326296194998818159925786003e910779"),
           e_float("4.2053226755912205309147312974605712941356373648597596630849719794695473701579236132147540030765524407137370378158446921003681342256871897316010621135063685823267169270991194632777714538870759278655226176220756872279365240496759361134570931716292382567093620493226284340710763487436478867870932557418662236296367812363321509122949469441297358357969137667952183727627015908066236621282725632749653312057e2077214"),
           e_float("1.8305394020038218517718346091440172947472195220537693254169579369415771611033896831545156075210139646887013664514963186696156915962751937531666309181786770708169047280591178834483021402226542752939295340012773654254985720986021454668996700569792065363867091250623640344276863714325700602482110274132495743071523002751758247919044031149703524169302524818777834147616341325565646772669271399766101377487e4342942"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00531_bessel_iv_order3_v(const bool b_write_output)
    {
      return TestCase_case_00531_bessel_iv_order3_v().execute(b_write_output);
    }
  }
}
