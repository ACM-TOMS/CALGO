
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00741_legendre_pv_vary_01 : public TestCaseReal
    {
    public:
      TestCase_case_00741_legendre_pv_vary_01() { }
      virtual ~TestCase_case_00741_legendre_pv_vary_01() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00741_legendre_pv_vary_01");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +((10 - k) * 13) + sqrt_1_3;
          data[k] = ef::legendre_p(v, x);
        }

      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("0.099487191697535103638673660760637138223051262472677342317143074452274425691735628226625780647097895749349103191488247461176059757753177666398459762860651722671056903661753530320522259324436972696802325717617828501073248096961829824456577005672958329783294628190111006511384400589424776507734176242211786978308878194150308151784043236975928395927041838446930482563600720778923128710360465250627026166991"),
           e_float("-0.05949757659653388725604398512156112841636594423596009909241872120292110117419505159700066049753409689346789618227687347443360753605740611290585083784943867366987287656670375559698015833518554584156724428230141314848972920704096573467057196824468507551638632244529628926332225399875038659525468898519970280747745332184650795432646708976932732887294821777840325334618068646607745427760375694739144015738"),
           e_float("0.019347330628851296198421422077224463049489312201060993341454172204133365606275564490286009825103785887656674676282283870626871919702345021750404934139520987225083058481691462876926259214207448408059558894049374476016954299956824375340582812175732807537401423113626385259231740715621239687096065475471080524851888133542215885376303211684093922130228455426640777704064484898031711072995690021567738921441"),
           e_float("0.043145857818853118903038833135503280842912002826884508284286583617879152308675429742624343922006445986348054240807476586436350045121264880215934600800088772164191267837790783528892579343062711753990296312322531203554378983943847599756278970019799371050440283734934364133888882298902136458990375684349379669091051239849801982909756874581988015771051462155510910590597821552298986320048835623202921265821"),
           e_float("0.071759074081412894535579953427815065253948077951192222832763109684281458569764645649600961725649573419208571437680494819283078974685729286458145452970301965503089824484273986705697343080850811675750109563529371665508016273809816617354251066209072333290844813120290384901170889775160676713659079192847571424336565858502378482741610041024502973652179871238557369836638308960362199848888903985360565443841"),
           e_float("-0.049236997264824214897292658725671393530897235952803127364365234938010466288962885622096367304343589071653628935066178621827925114088109779428692838831760776310561408578497292371434669175903164287958161046177583130825741715653109444771114477320654238038803348410888799488504027724243524719134912298136039529736269674825275438631296397741337015523906684148379146779196690434225183790470706091629455824565"),
           e_float("-0.11046717899873974016667942570871941249692366632562785306063260346059696680790084435563301849176981195246950015189353709181075865714550858232948042113602122828528908855137367021128042629252026141705154880509022802689015194216180871839697788982727792376078041960990829629210730197052388242754338759058874297142951691618170988269857071040288442594073048150231065322882117519065598886339756405676938597886"),
           e_float("-0.047917167890597346677130885431849081225597837397401857516851127216880170526745281965878065204898696502540979095009439203666588057309789758572576596797243124477298550143364160319017330630236450781550180872424016395359179975639543850019269964069223183865115726464269704235271732757884058663916956272506306579074720593204742977635287002289930154062764414489575910998287569742865404677401977205864702968024"),
           e_float("0.13933129574449803744112987153635074269320236499323849927328581491453769296663179207094016545601352466068530672177376969050867973661846339808902340243267978266003320658911171723815496881944746854066696007288189182080245698581667001364647661041595516859383219849827515379316447266647223152308469569472359400330245803304423259480486218267179595350881006391567739767582251481608274650460346670717935984337"),
           e_float("-0.14071903186309836489617366798234285514391284650485612118392095556695409994895948981591887190471792144420598594271225090119001099281776420344511056559339414000244438305865590196902399867419111344501048598903487626539253250655569934728975356389045757622752875513506038843452731984474885072743389247185329905776309379169234647098926479610166854625820822872725683909807596282613954798970680423641559789566"),
           e_float("0.99736962666602337075502846666050056380406857268765774268365286032636344983833554384593970425027241861452956988023619002495831450924983486456834195945679336407227271448962463329607488776852359662416951469572363754286150836988131945153951461483745839035797402109503211144363871690198617041763610500674211329158954005151373116088612982760465086693769726622932011880113177818718818365481476802501163372842"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00741_legendre_pv_vary_01(const bool b_write_output)
    {
      return TestCase_case_00741_legendre_pv_vary_01().execute(b_write_output);
    }
  }
}
