
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00460_bessel_jv_yv_asymp : public TestCaseReal
    {
    public:
      TestCase_case_00460_bessel_jv_yv_asymp() { }
      virtual ~TestCase_case_00460_bessel_jv_yv_asymp() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00460_bessel_jv_yv_asymp");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(10u);
        INT32 n = static_cast<INT32>(1);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float v = n + ef::euler_gamma();
          const e_float x = n + ef::pi();
          const e_float v_plus_one = v + 1;
          data[static_cast<std::size_t>(k)] =   (ef::cyl_bessel_j(v_plus_one, x) * ef::cyl_bessel_y(v, x))
                                              - (ef::cyl_bessel_j(v, x)          * ef::cyl_bessel_y(v_plus_one, x));
          n *= static_cast<INT32>(10);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 10u> a =
        {{
           e_float("0.15371375835713363376439643157984317641469131424288778832864580380068346473882089300172155909572388873748117686482527796971440702696291813542340453778856757616088297417463382312219268236713257106044431012498539412579154515940720783483816425431621954709680521158691756923136335893879463672907606321866591572181582230156697576920619626943521332592647723340366683034880080581420814980965982401341877899034"),
           e_float("0.048443121708971899407842689092916608203739901719577175104231485926874843854818194160203816219608035489009615825645912536874769176957079089856543997037380164704260696335088262930295578535547087399145481337268461430756407408901336249963483873829843909949214710812515891764343460333467706720618660604220075654532511766268501058608961007930467119320258437375310714094778736195794880109945263851647585470182"),
           e_float("0.0061722895292660976750734888331495121537702535856564371507605154635685889715840190473820210380092126753413265789636067890305746894399440033233781790670038242452702963666454185184526521638247528532611871019608576988432060559529128565550419626003785191860459302623033030979694570371740975081663044178323626445229035460489807754049506040767668035208762668246196190592003495856324564896630721375149517803646"),
           e_float("0.00063462603587549806578443922882162998849633480342836937569249142630039448063436538252324704744586914829244826210877623580283911613117815836969409738318034068817190255974865256986285463888880557216925615712560678731673248122515459523095261150557320060656252858835151645116307416833773848605779514130966566555521895284320259749412244903917020993427741051100283446344070644215471676162878721760320689988705"),
           e_float("0.000063641983517970140537698719194136122356144000188095345684660478099135502714285723199708635393996566983280058727992518304812724949166820839247596118445244143048825927119996405805279610736676157189150202310963802451281402367401977600096743123914490647290957044059450110435516174888849655401618024131711805210064385132838394501671416270086712970260831493992459160073348115852007123424370353969971957451031"),
           e_float("6.3659977299588013520479757486515820122454949030071075618977565854677676262361195254694300283214503390814679927775217085311883740885222010448717012254812565666627443161491639476394034831941310900089151537659651419283796593098726874480163692811564924881292919242604808806420004302121992782586038675820007905328826115456141126489481763312492774805112848311327789322316356782755611197089021480212682422962e-6"),
           e_float("6.3661777237386450864356785014680852684520846535149479573474465470932515291598722067615934946593162932930566891099339817797151114715990093078590805473378351215456999844132879342642336051506213492877475584988348197920266463780104630503609687894441371127316480131477499146983271986578584944675314002874346057366359247953191954408337872669471612474845029164767127289317909457999858549624747851734672066472e-7"),
           e_float("6.3661957236764417490886764675390137164659058524356850531896491957417183641355479020574866119506864245544117640574061017982598523485913669559765091481194436847469630559296578295176780831928572403539392594141786839611050506282663144963553601075454606234250822411304470807760662130728778657972629216539425709708049374827018165154240686675261591319619584588845979638549405247143242718478696683863209020395e-8"),
           e_float("6.3661975236758197139404603224052308746340174868915127131911222430226084524540384381775694313662937779775941163511631942817975524579674407266655174076881800187995626795636147366552840408526324090233425139073485290154384805047430789151142294758415745415795742079570393672273354953064193553911496733604557167431451462782454969922610752469939617562491408704325738964387373356759973215442265747731656008464e-9"),
           e_float("6.3661977036758134935872034093043518489696127763330845861982921346505046050575130741892147534064052589557181759938729768429446192766086635419576285520110478805360996042027076645409548407410630464625073862514968929049195496332887827186611647246127914400246864122941708331733550698720950972289790386552950367143953404195734620568704965129344395535964861350359458919972638776710880628143245840655265400308e-10"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00460_bessel_jv_yv_asymp(const bool b_write_output)
    {
      return TestCase_case_00460_bessel_jv_yv_asymp().execute(b_write_output);
    }
  }
}
