
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00629_legendre_qvu_vary_09 : public TestCaseReal
    {
    public:
      TestCase_case_00629_legendre_qvu_vary_09() { }
      virtual ~TestCase_case_00629_legendre_qvu_vary_09() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00629_legendre_qvu_vary_09");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +127 + sqrt_1_3;
          const e_float u  = +17  + sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-3.1281778606525865645628927954525157272874113300240126060416161707185435422060700102481913120637738392882016148187758232038056036961200110345733461015572099515098085037757479253773640916076119730290978174836075058327397382311001590265520485409170411663171963934295947141356022563523874639459789688921368898354344778213390098789325886497808932796069360518001968694747309646494499227529292542121165490927e36"),
           e_float("7.820356502222935010398371441765699049136849382756767560462993570311073144177245621390004143823970800806591854830653827589794169371150215621523973410415201228315490318809521970708402522955287571295700425759718862498051425880656809483460047130927602274841127733883312378176704876125452966895691225325865865426053924671684003667632244014980282576291920406818545465508559606578792006869432042818018319161e35"),
           e_float("-3.5760404182956207237711647405712206617713938899158168921271817082549796954271900515646397501640559622651855146268232583076339486006810310128733778532941759991705095967491379245790045954193129977533244111655290326731124596731863381280848318515274747491496704777454895803865950024001317883315985771739607371416652995378934448544612601558445029254115560677928200884156063925174297755356359389849220175003e35"),
           e_float("-2.5744686427293297849933945634839182777639416916583601121938583604106430596810556927106952184420122090845198198754147890461095462163469560322439602519632540743953867735505856972209703726327364551600862487141590373129838992365746562185524676791532158550908589604358005210754625098440848222457764039489160633458085373104460283272087714187688886924670436969813375927884083360600632054869871970646113001146e35"),
           e_float("-5.9896191875518287248915637915699867845445093444060280493429644419427124512865860597553161445589907832220271327830159255531474841994060053126397726178256556787199943591636279787086216622080640607108542003770672113537758263956750002806077828731624316583092077417105605364571797435179722842464092449972310279145374171246434830064743693773319561596252584867426394510061748544194338126449297024900564677666e35"),
           e_float("-4.7659784299893812156492187800379404838833639827149698049835740547569053951975779968960901682803155470996629422805373813436431162560694793083056100112325080629151659957009770576509033182487419084354526695398515086772006304370778772108447026157099330586362540521570436290309319777457378540831811093225640075817030509660967684209630982896095357742357868633464191878457284331443003347710558435518186356742e35"),
           e_float("-5.8314536275389945882110220725566645322041001763532131407548289340904638836627973656296146752958809720966305685270855616948426602885184350701003855128417351307084228079477186128836203300376558688348928951837005205958949177158215083870716745992844803951691536252619389584447080865057965586276381788013927723423524397539925939506181124739268130499502106441964116848187012688112346704248664660881749163769e35"),
           e_float("-3.0245885889484863605557060694683728541584872134059630737178590830934232254880046048905248550762291797190815675566154255515939532311288706758517760303425188551299093436873545184409540064667426054135821790007376946513820378509697521525629400980849258613425945830132151868179880093582197848884232193165672542416230616691956807727722197290979120000556376118627791169570175309044236797003407768859609150204e35"),
           e_float("-3.1077505225321187043897521593175780803738402100666866316482805816394030857849690119021576559140798133279716359905953268959871431487779909961876368379342746726807277548707600678499799068085616128661575253335074344246486914360026798072540863120019720761144654465839399356142253291146834935186150942178230468029926299408315787477408043913393040136477543894180808571323890531393457012501801700510605873295e35"),
           e_float("7.6606333499182570122642211863123068904878081374661628801171013718796919831059405687650210141818544251455705764319089251234869566520275605615294436598417739298910450418168401420854781782516957234214635051629486947689793631776987859333804793142898457477887994122570734668975789230089710699324913756084371613134237845136935928553252466968485648028260437075480606164705061272636597622054199253154866322817e35"),
           e_float("-2.0916453626004474420652452805940909979445993664917054330227821584326775681098576498699053849480000113594406818376955731088243937060284098473542505681588030524155440551878214454265408503446267752947611747538396813434334549900873557879226330028502178326595076486458907461033420178368574831803382023861328805964749871075134462372827147496021559028994855791382733292322032006417982742633197086897204305336e36"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00629_legendre_qvu_vary_09(const bool b_write_output)
    {
      return TestCase_case_00629_legendre_qvu_vary_09().execute(b_write_output);
    }
  }
}
