
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00442_bessel_jn_zeros : public TestCaseReal
    {
    public:
      TestCase_case_00442_bessel_jn_zeros() { }
      virtual ~TestCase_case_00442_bessel_jn_zeros() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00442_bessel_jn_zeros");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        const std::deque<e_float> zeros = ef::cyl_bessel_j_zero(51, 10u);
        data.assign(zeros.begin(), zeros.end());
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 10u> a =
        {{
           e_float("58.160337057347128067142164454031126944097340092094646543017552978188155494703060777684496325827752413973914584362967121350080186330832905713659693410479201395933492094045274958369104291234666977797492428879441235534425874245820039777210741675808386986329667074494321069748075979375656410507931466646756678142436289051413133550357207372481749611054676092393988327821308490559940615677839629362308260729"),
           e_float("63.881290311492461032590395431757372451177999231181749666710952891898315914868837621057118009185278098387872594922825191482668798243844604338797662673849232750077987655678173800962744300572136085658649857633705799720030263997398389829307427493217587267410609756965389864506282868689775504104398314191446821795104097337991047059999426590859550522038938437868571427890455913806969841877526076202143489532"),
           e_float("68.794231613718921712231379962060344814460001212418837265367961624446872673389345681986614248536517487169054968054983500519435771303906786477359936018793360376839926335092120972693139546509201695670132266159446277509299863133127748035585159818237674138929554283814164741271699615349278263437838202257790717638436120074728473119726894301616867709934108642458994085483052667624175707788246147411131723457"),
           e_float("73.306668638567498919839805122027881544564472803278780740850225645584598667629219339813380054481403405360711818338969882537694861189453357270039512398336182047735947877381500835100068545552612362189143752765412230424532150527910896790496850451483559403913091937903912351269079769512820118170439734462153195690632223315096321993672662199837773059469602995789955196535707388294967785589267960979682257162"),
           e_float("77.570345831048486831787480044958530611611950625881075605567090642669177516104100300657341091253044422593023683197579363477595544889512130322248133198713364012187185453866335604223915327650431724636968129692679766100251065327688471745506801485128349268469122266732256311847727652934149778922883766037331363237701618335041606896435313880068599180963025743826959238046430167527056190515703245711700522597"),
           e_float("81.661634966244490791565947225413995389677067729726766827862907610009327111112216376556752459376257480539741632133491217331977105895362781020541583933738353424192498210575346121145656962524075506384688027118639926785705261060537171828763710017765220639698126641048654714034022044764176932795468038764590196868490743762469255109599937229093819880765144445734846499700636756575683866514301219066792780254"),
           e_float("85.625324372225203714161309528595863766727812304379988492373754733458640946229067432317752968699130069014427081099869937323888312548136934433289326617796247270022401851139072857690038920978703936877304062897866306348402550831012248236274534651860421394193002966835388152640156125838481326746374656199400088070915591239995829597944345935248485715955868916829574486341087206585974980517379475945657062014"),
           e_float("89.490283757836382820971162742318860151546561636188551692799705645755148481840743892786715918009629867385557626285197763567344037798876473734918049764572928895815804108202088993773477940384918786117424901708862064703391113158679145640457201368180772147385448153385336010302852926195935775242345292700054820063974620614018598810665176220376312152401214986331705717672532522624683116934683820737598097868"),
           e_float("93.276365701177434960240158728415046404558085863466237469634640407654723272151211089370924455632642919742921777051635752945122674420840794128216809895947898014178286776197882379809565433841496829886294869007295288921026250764618825962512394376966578985362331645400840523572810599861638928407652494114903630176942286362824415888809862097810739831875643751001802355612352280871888560811875594505698418901"),
           e_float("96.997882422763904438329101838047329298510572044332763259426522840124650909468811644481762817998596767078184561019295373815236851335930088556207085605020201820662605240472599855158127427593142388654079724370235332941256071525254431099485873045046564104304002371539762018415132539409625530281236020683718236869990842028302893143720854603191208946120790142440258083521825123690314129801684361776978321825"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00442_bessel_jn_zeros(const bool b_write_output)
    {
      return TestCase_case_00442_bessel_jn_zeros().execute(b_write_output);
    }
  }
}
