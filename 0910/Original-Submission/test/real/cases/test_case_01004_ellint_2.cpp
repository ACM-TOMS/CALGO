
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_01004_ellint_2 : public TestCaseReal
    {
    public:
      TestCase_case_01004_ellint_2() { }
      virtual ~TestCase_case_01004_ellint_2() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_01004_ellint_2");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(10u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::ellint_2((ef::euler_gamma() + k) / 10, ef::two_third());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 10u> a =
        {{
           e_float("0.66405018295508449639680824916801003470640640742433354451533192468428632785392650961857595563201051580240365336148953741818813858834092511531595702025345079479650625519558816699594566551649768103964351320684477797851562939754007369144467126049265369849847305755785362204333059067000835385023550190033313143715639368050225118427394726817264070515280139888583105172243127066137940540145058731718632499381"),
           e_float("0.65947394174220309537650024597884263472411348185320559679087461844597232840088291122504612068737769000325457556043613156602500484612405410985321440566316858774064812558091242529007079251474750894124586313872985849008311745839017766815866055039184759356305406417081383007522015331384468688243246614233675504935995369138575512405696700357088405053330218626583129508222335561242905237868148671111983507352"),
           e_float("0.65484070426706794681406764401662558987758623507063076488688312028185735102376428426799375472671099936491606414164210396712375557141849092587134039307339206768842180028133521921428471475939933803669535668300733648051689932462867978304531785873665847785169190479048459597519815471545081329825259202200342250030013469378280703263708591450032184639933748610867252946381430182646485339188258191028920950361"),
           e_float("0.65014786046711235722074526016592846143472364423253689666328048763761197973529144381096864580405068990449699167204297695865019549183855902632187586093340435891715317807129005545603395318855949923677015964872726657922510772318609759089292490405829973531288609862599403914033708133548628480514667630737919902190943355180400541964583498664226681202863323298464199281470906133648842715314570058507172762707"),
           e_float("0.64539257509188154409828110129990664672052247887984541773187389186809681918009726808042306993815414911270789365398269412978527058215707655594349698369887603410398296312653656192080995180082357329808703204713199962123872057024251686170995192990078883545903129904873968366538570185968508616749819846864874041477071936545529012006794653483771823863396962813931454763450746019840881947854594199048261515907"),
           e_float("0.64057175786220911213773307483596705196833092408900913952549359711373396602275480857279348190738203842662496200810467858384598900091060955146937847016858298698051823077151432333368491963419205897010904105493816587153948872085204873191447561929571599270286412762968197054824106334874911468188212855174654492086199109747667174417646208790138769435956264107562130911330663792904687988186802292948781500809"),
           e_float("0.6356820281269190938289521976295813217957725449494964194072671795941141536401175219463383860518266352785422923433371167688847718885525961863097869667014171734566665155910480995147753608473552105106454210016025620248160800544972771145056997167182354087383497032176738293837037677277651320372085977938723456841851294597900563091091881741441655796824716927268939025518953926432006412337681001885779197164"),
           e_float("0.63071967268374427959560574356833742590207157930841995300979287556495386864929035462900641172866581216361720425810983772804337325528819155597599924394919363569423780392825869755324390420417639729533217829904369024442440391452699965458760068318837144539584205529259696589365514888425252888060788784181506104151048960073468634306250528714027873173754481389961581664826683656970426191665259509989124783994"),
           e_float("0.62568059502185063037238198030835561648084878368478117802167044489921182475945886367908595780799327069152350569494440646540726948626830968082656019637333166449824420896701006658955288167035559886153947624401154249260587898066420893176729565866860869713770659269468579870596242826933264114464342526550490099860353904592323196486702646031340835633623040067201913114132278254809533952315410983802742762918"),
           e_float("0.62056025367876651885206684482940158956875519902802667874937481714641116286488231544881725652801001773777863986119174802319157993977180470682927706044916826565521027501980551926338466992133592272991906604102057916977999786390881735874000335654093341338217776250296304210094989897583533953541851217140372137989539559411017714847420353095406120927691377008716214447582638304192927252276778285158570427697"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_01004_ellint_2(const bool b_write_output)
    {
      return TestCase_case_01004_ellint_2().execute(b_write_output);
    }
  }
}
