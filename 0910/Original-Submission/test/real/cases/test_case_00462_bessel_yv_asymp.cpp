
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00462_bessel_yv_asymp : public TestCaseReal
    {
    public:
      TestCase_case_00462_bessel_yv_asymp() { }
      virtual ~TestCase_case_00462_bessel_yv_asymp() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00462_bessel_yv_asymp");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(7u);
        static const e_float v = ef::ten_k() + ef::euler_gamma();
        INT32 n = static_cast<INT32>(7000);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_y(v, n + ef::pi());
          n += static_cast<INT32>(1000);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 7u> a =
        {{
           e_float("-6.5298228508762674636191232307125796705628271478924446219721649597651333097208696519704580725904804712073441198370447499183392510789484489011684002044868699083476586447102608435305216671171782206518095531642945947874918363120687447432426739790562615790402039713911376805970364984523654996234102244616340187752713276102299723398159915373594218692539161835120076439206317242574305442218576192878833840263e784"),
           e_float("-4.9769409210319585787982366714292066883393313213206899611067469831601118507389120074438018266126218750385453038631032045802075297806186479461899130311194631138218044730239739759074193264762562956120855943916291222262148380102880283228015883064437766100286204471872687267064364280878412644087984802446353211963897559201680040547217046223223744923377333268571277478124309269165812047369111225144156285464e401"),
           e_float("-1.90490691221005702745259089671578703124199785606527481735657593620048837146680398547735497647459207778979631400473236213762373738749509351123435044096084619614511824964306428486615031260368890973163282954558291140454506851975204062075407089776361025585000753678260559805172807763792307046512821432322935081175415712529531064281783416778844225976164250044913386454595464602060931459903058094061234188e133"),
           e_float("-0.032008639065192256377480023649495573831861804440596569619358285151461844028593797529328762064547543023285460349697861502877655174964529154215813320623764675582543111506339982208176561230996585806128585293282477607670925825133304973376175481194982033572197543723959118810345325396146056236443463925835714740033247771368290176932130989721747236520983155585972636467242428827432872148782311997672121343333"),
           e_float("0.00035590985548561608051750621993535030987692359516917369881595358420898277319436696786351147676683937491915832488594217202281711892010191033407305499923769873958084511800325459530872254820672524435210321942672507338281337640017542135361293033237463708227134513407640375228864917880979581182995213502363913306116942320647733392606717469516947507545264500256992642071415435643691258296192645451768552720772"),
           e_float("-0.0084161999687453175296282466032893415663156848217628268811123075949889879673972526581261768222348110119068207334898595318864363822591873904066577907059892735887368146372993594899546263838637034405098855791992591158922643245780185392880560616629951899078036785905463321237157713246058837764481469878671462419851916054069095867033918061844808463378543738016555571890372638265590232979992555132062748205743"),
           e_float("-0.0014872478761646431745555432557112453980917073289744417765730371822023570411096170712672846292106446941262596979570539235555634950783055309968791431245353600845099560375038882823195374132186063827579773100638086515443429062367597256284872810875293243923007914937040468077364320904171781389624803563315619377086297322817382336321851083875767928009512915753285428532239721215141737934737536414244481186505"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00462_bessel_yv_asymp(const bool b_write_output)
    {
      return TestCase_case_00462_bessel_yv_asymp().execute(b_write_output);
    }
  }
}
