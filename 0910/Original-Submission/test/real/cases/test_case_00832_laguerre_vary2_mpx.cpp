
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00832_laguerre_vary2_mpx : public TestCaseReal
    {
    public:
      TestCase_case_00832_laguerre_vary2_mpx() { }
      virtual ~TestCase_case_00832_laguerre_vary2_mpx() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00832_laguerre_vary2_mpx");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float ak = -ef::third()   - static_cast<INT32>(100 - (10 * k));
          const e_float bk = -ef::quarter() - static_cast<INT32>(0   + (10 * k));
          data[k] = ef::laguerre(ak, bk, ef::euler_gamma() + (100 * k));
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("257125.34496687666730381055017118173056945766414312283664021284177165636793552749260023376063329368923582015382914560813507849244939888103597101735221934401779391360587580505350288854430196746128338785843510279298326896307734179764910346448467294905221077157188491435126872268775363219861523380538244085485437919750535664888468085910540974776578736376151462007471004950259851291878907942240211161994223"),
           e_float("5.1910823359715244008198724102642913845686434994842279492721615357581679206115266259368314479006306463119897770939133499261808245413607716590785252560368364137704058570194352099063227842789825628097471930637655347286404832658438141040669152143977588787500303588216712560861124702118259646704573064821018469586761693738136384012839416873406834430359176262630774370329711821528004443005533998080851824076e108"),
           e_float("5.2163346812082362678401366123240528257300435891544854422210344027104997011191553854610270479830459050165130518870109883078872807458030462403554678103062775500640025139103758028652770149523600556921195638547632872395279749522498340533209431657542288298565930215524217158131287317196804551391873509588133005711442154257756560986114494974808075484093351217774568136452842779573397405124279901792668684836e171"),
           e_float("1.3750578428772156882847878570962973342348671468336044086852423960227850945039372532294566359440191951352189497419401015593217395471205451092717177569873366033522342279438022853164179148240727577436388178641556655064322186705444311744522525423909318881989141343323144282646370403806602556255003806753225436238374105997138589474023707793844374097481944156250458516991090574113128612009877681715666911226e228"),
           e_float("2.5489863042666372783460104074440628685807745879242655243502122554894326945915542989831550516838992863273560129857851566797001639635442351450834722040386683782628683049533433538045544655310679497434584577792848311927133829833797322415696908012601380402806672246749321765765273967067413207461793810162010404519830779942082800375046927463579871555478659091458459478294336921978484805619770888276453775839e281"),
           e_float("6.1134505020420414339801090288496289577912155031613728384643746604842155911992649091147784877552327119108894850010282461799184373965278625667782505266890461073414158078244093179753629397233006563952336676872540595720620758431943247429974434293684708544539754451862130235834296720206690889896451236762330199602843406029437793684139529990441674597249920050553236891838712433339246622429310453979261320375e332"),
           e_float("7.9249208624570845290051500545874305827712659707090127172497726760845547368365487114276324717898899224423227155867116022449605754420788580654947864794594677710066692244847946452755698616214442966528093531632161690735439993788427477795087428829677872165981064876016066754610703632224588024739303925548204129944666686311579373435758940941640963102311654350049603396560111492800541048539931301039258054535e382"),
           e_float("1.2555946730921971897679107467465974368064486466224198302200703553977450391698194576319477618569113859179350008404045743430272347471760382668495504003640811740579403051924361515336584080577075407548057167415705410162538588640281838755166370996310679342277216542081649934538322379947562384529323716912428386859578062844891626315553930612127259036413208885611598540756535423571729632579603370788630861727e432"),
           e_float("4.0580153005654867957625157117991145448500189851307539737135996050729618648828455144322528257678839136293033301541267170328014255160070578748219919865714699444183398931974096169171004019267716054287082688799534875294582196944150515514157644317186393368848644012698494498662519527422790314995267831820102428139106178237738448440266044198822220381780507815907187120703190451930384997932501519820537758551e480"),
           e_float("3.7726970482769788333984467363931375483733949312354879141522223139215726011979716683227285604318866627156039936140638260090366368941416927063329849278411080726712532988518875991103075877605828400321754805058225945572506906111182987543433577396371527764221903455980978157175906857574794354662272847492125874452546531000892452629915807946225812329336193944040802403921913446294808250576738533485800168708e528"),
           e_float("1.2855056012029549652373559058509343233948752113375349319197916357523154655606190748737689023817365801391312195568810028320979810955074500025824762550066156069708723978162712376892224171325884128531396946456651106970161365945973534559642517930370362198699669889945610906754289232371478665312640762587130906040936917889710132431613619028829842607941709739950457842955720825512497200362168144301045171118e576"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00832_laguerre_vary2_mpx(const bool b_write_output)
    {
      return TestCase_case_00832_laguerre_vary2_mpx().execute(b_write_output);
    }
  }
}
