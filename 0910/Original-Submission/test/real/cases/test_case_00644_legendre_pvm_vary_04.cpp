
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00644_legendre_pvm_vary_04 : public TestCaseReal
    {
    public:
      TestCase_case_00644_legendre_pvm_vary_04() { }
      virtual ~TestCase_case_00644_legendre_pvm_vary_04() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00644_legendre_pvm_vary_04");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -((10 - k) * 13) - sqrt_1_3;
          const INT32   m  = +((10 - k) * 11);
          data[k] = ef::legendre_p(v, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("2.8734578597141736973648849045217458515679761641564877547936896973056763412114608098835200064552981393391217147024115516895923765615358201985489151237195891340945185099179808634649675564688258352679308422329817158708251782822175037815161404611507698523570799997784541149745068933832646994187757144321985233745922602339595234975016360330644502594899237098322890253185311231102092875833863436353821122475e315"),
           e_float("-6.2825647025110965026497778911559741929393752439396403903742453140865127614044398615647575831005687232051196198683025097008436846410326019276189332982568366223710425311012633776115757377806361630026280296539654492681898646625085652871185438842871599609368204738264731560669494023629817555496271998179802141308728249484216703622450473623561728270086977297127929483135194114613169979194903838757232715014e206"),
           e_float("1.9282442317162130996480143675402316413765617822403194060004878134277107725479384080998575101354473688289315657765247020429944310605811100214457378357052321223661938833837132121570497695364984863280990735528521864780717817653990833548418204450980142432513579676113952902914379828717010376630677888731451070358962061220457021088396823359771008565229120681392546347239130160507654661796491470003180940451e171"),
           e_float("9.6386394323317279656646089365762133283712375602043795545908243797491557857595388007442260953889587210215154556501502990774661251403805991114930440594907535612754247750063583287586438520602511878743991006802706908468834417271232620825619616046136048248517614573595694714276390238259276910264990531615291714803412527325912863182994365743315943413643323700943003673747516861332108215068036482450313786169e143"),
           e_float("1.2268887302500113250681767549310820175996702668753661252065843600922716251271051634828219089891671607033485185465597557189122071208886950082198918589858320665901423775377900314362965536102416354722324800606061639804354676415509556562834610383621307922525362308490332066226860405886716214448961194488056241644284077016533302748068033919854393484468194053912445571919714025386024015187335887615248589765e119"),
           e_float("7.0859269165957399289965642743969174136167747842308982493868303824879318506039782423921861707054098553147248587315444329234645648951737363773863549967817333885166357330621242693139452701132610395701796997347798008726052306881726104346718732758363172763427483265722668731802286312734408766229553407060998046238947858152327312985514625727841850218668381873340419332253215889896193938656590887498005918227e94"),
           e_float("4.470529972104604305256624154801563624496505646396599165506147507441298155207527374884941581672718842061427517100378080431328150356622069408814008858914345590603575498486406005519527964040587354910140944747548549143514371810840897414789905307540265006405561075731975985417899803996965287386277439178633859787884162273127483570972387198237727166371563305177580959921982120657832247378056130491417455684e71"),
           e_float("-2.2332217921627568307585996202815358144487508042607663234376578676870654659803529415426528894399882158675008962710451005703411957690952097951851450103758289967643350702403299995404721335669885369676348264797910352425105805622082213695994857608403700018840659756857770743089699819229905877189798884747312197856329731453528788499788728958732581838321416347420485774611056745794566221627286725735295087828e49"),
           e_float("4.1633095409784015717953647419087031276389684324394203060299600310547859169716266259645967289465399559029812408250816880611416881617095514395759777728965678972779590541077689021007192654614716829718107267068295078616649391104092229971406631225210782492923462708342794981367865063284695013320604352838445185914367827852846912923578401776845057302238805174261505458762531003376351681895367522164533430889e28"),
           e_float("-4.0186504513769663646910500748043521017789804019807676902385939267837497208243746127319024479140604997253925719448579339788524184312571645624117493472754821417335332858365889224185390975734176962459858094343774964341473559466502448651244314786881338973093754419592271835002120649127715946564127362716248336759781330713753636141001752826331995600601971027881617970476755856799745176856743043153024181836e9"),
           e_float("1.0007053945334960366255749083305905652993693614001548027423116259096385859296367372874412211983564861520849560998619397586530545852475248171737023144061034406504056283811182460543648403833072498205264822064177195489618645497996999370920755549793806991088637232221244798018167402046648854302501459201324519316809968628951618976771264310817239814145331322242393294293588148133700889016608020153606105609"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00644_legendre_pvm_vary_04(const bool b_write_output)
    {
      return TestCase_case_00644_legendre_pvm_vary_04().execute(b_write_output);
    }
  }
}
