
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00653_legendre_pvm_vary_13 : public TestCaseReal
    {
    public:
      TestCase_case_00653_legendre_pvm_vary_13() { }
      virtual ~TestCase_case_00653_legendre_pvm_vary_13() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00653_legendre_pvm_vary_13");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +17  + sqrt_1_3;
          const INT32   m  = +127;
          data[k] = ef::legendre_p(v, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.145571884379080968067564969844122996881642138977961566767622433082207262277636431754316479081352249218430262647604409195625371013078998562101009929570305771927419890226197191433276692346209218957019522958649998196530921111146659223415330854269513490870802433571309343435636545748003305886617847537591126517468682076310105170636691190153441074798231349268182351794602576870393350289824909249218234398e372"),
           e_float("5.0354984208169390059391574367574735411702389611878219605259074170205306477471069180515267672221908064475747166652528117957150472145253625098746601075839252954625952560307996979225840614108081549801664895895095652308193639418398993909942686285750821887092754943593822881972834232502216077794885846921782657740727003739759764024001600257001752348113418015950816846135956204022495434636794553390188240973e270"),
           e_float("6.7525592584422879678492462821125155145927525072087442795764708152516407782572438096410591636679626147962782746330737802528498327614365328548677181635928883240268654429694482066358233466204948932843598144679342346955701852831745833544018835339202015214659791573886981707629892546789766250895994390375015552566138048589307354391670278238628264020942393292575747402057589987637193148058783710428592058184e248"),
           e_float("1.5650466362521313058808008225670218224801739480920681991272832637177864264664686425851763091863496680431300328316266433497807068530654232109505932746895872510992598007028967886761954412675669950429408130038857210632017764795161117863934716682570137397188972347324968938282612698116835803985629637714081190174902861788816904203307915941872684125548014533580496809721038780549702202243364346077069181857e234"),
           e_float("1.475634534408055237599260684427785911791644194768981195832008774062103377411183354895578585758392127116629832656324699858970897754777216282747398541951418824001605799410264448103404249611286305355331191060195564642294847366284172790586585378019887173277119179348883450891895955892523976338932466539224646435345142214005797911857504407684014105619151594804863117525834502112114843949043894878914167704e222"),
           e_float("1.2952733137041297303169430032789084714326429831857997371296879929886921404251901802460507415464127778119707004827472123776289488763196595792475532647462171235407820054596199540030752028408063990267629163653717282288148360544954741761723505599299290082203906870101010566876360788459393801678490679802591152318773492229061473566581633172382509397760689852890765893742379584344653522342710976537035884998e211"),
           e_float("4.8510419247938676174655786651175142154817174292387100921928510728662155359543475432839070800870306797564810371023140195712076531112799766572366050609261345694393310882031023331834806960607239280071159165239205224526544499420172443760343988520537905962338299140113771728475755227460869521826632202157901257070119168989773038969247095629172035063645456624780990319774307550168640589238648644967951730493e200"),
           e_float("4.5683521210613494055642206139564332245779578601113832668198534043666509992475375662934261683951161992205414207501400055504156110427285995783504133898895810914872250347293563771100155109515791650940929751405478968826156309239084742357961291581115168417562911492919023274681273560742466760779246280995325888904520086991149183806748608446695095739902602809842690172044932380363125306951357624515166160585e188"),
           e_float("1.056662008072914426097877393700337238411214759121021856456116300056750928055525341748123405222572904526922217125923507105691185621132685080778501931547610423929827721616391144752344289947297855531505049801491467409244888727296404367740425397963109394794050579901871907542092155092833719188160284242327123816932768860718486810793098795457178725628670880910725998322898913763325154394493649838541731931e174"),
           e_float("1.4129558034791014188442861586238549523908972525882102027106603513400598304468285295058675906213700960968010404393186402667126815151708332185863844359978505988002641056208531554663346485662185952026036960130216845343527194774604674719325211702015868494315810161797515440944751313728032100656396726422358084393153721314553850391311203527418582379454027954744200647370575222850980083624992745288853328053e152"),
           e_float("6.1882814254842824070036137599802478619141013246650904290435584506141829664191793486330653428653986622865810826611339484695346154576521505713290190753574065937188505031619102586715726956058147598030508120426140998105985929716456576864717062948852879169154497788547903067583953786381398658840799111691029761388912984018691366395165194206274820425064170274143898702609620913629407196625366211912621709777e50"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00653_legendre_pvm_vary_13(const bool b_write_output)
    {
      return TestCase_case_00653_legendre_pvm_vary_13().execute(b_write_output);
    }
  }
}
