
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00605_legendre_pvu_vary_05 : public TestCaseReal
    {
    public:
      TestCase_case_00605_legendre_pvu_vary_05() { }
      virtual ~TestCase_case_00605_legendre_pvu_vary_05() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00605_legendre_pvu_vary_05");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +127 + sqrt_1_3;
          const e_float u  = +127 + sqrt_1_5;
          data[k] = ef::legendre_p(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("5.3290795661418285279157276608907106523677285125308597021714574643332629710385538527141345285167874440683921828431386739445321730095738974739708419719514060725850316416556184959504172100770300138401245312804834876807832763703945305953046489777116950350418667260478962576429334829291939919763505431937069815115489833117674667472163411860239170239442541678408109960319168447581640973193089221556861702286e373"),
           e_float("7.255805837982050039762626095990147149633637971410852831315757815615395483941145753576651673740966877598399294605391851680998739896928101267145253572398124678988957966983341259242091760388491743017336475391279103058154392800065648294368749655825288595601499105332860624789543245160787859523581501933709813912900316172901955327739733985268256654610656388539613837541673399141960028659778855679996506912e277"),
           e_float("3.0525322897965670171363723809653866951640054925804519530403892822072220976565005258165979440118223973271446064717031287918975050968561545618282628129914836136032982161773070906752107599694758455219822209737828378366849931625075131473192562392218367509757484494034597122878785416391376670623428183104662362997863594326907405721126852455459400820839355874525714219924214389185807361880769030739994706998e262"),
           e_float("2.0620444344842868479620496210645237347987115175268072436601511769413011587696973406251235160821192448631275547991352715121229079857122279343408715522858367106208359050542251527941844170655153715580964296488529351333627713797025282072775802699954368679530616255962863075817108161135233583228056811434518745251378092352446882525027834915100192838443326459499787082721422087529203452169935443941867335089e255"),
           e_float("1.3215756171947133447357756868947239765955021030567945428264842366036584363106052857114333728616559546544138230537072446895872209499097712898066132765827643306545946472221332561241409976278047286762653814256430070534694618536851512737993675147458465841223445528790128139156236823344499922189479312895980590026779032243782269328626873795061271975256396860882212612372427317662985582438448620929934769352e252"),
           e_float("-1.795163812519946536950869156839980480545059058067960144976643580256339433028326252880508403294960235981482551404907327044784801942386602155509899323722314789922548064126974864510955444660132873874367346713395822231183841597962672257319856913995815911625073112265829646056716737440617421288500671435056431017961558436633544431161341693781506967776325730927900408136082977109368434712623795073894952233e250"),
           e_float("-1.3391828153230898586033081873042960135346538018191689639915047414066201895789645531188905684501014645073791944009445763702410942092493367336787746558952571060232705458990092862088080848258820553157813727373583503427028179128704020942584490238906580617125256258029360212853564894472907533907658324763118400971808120036801344149555596326065206107660871200452403756951826677966802635683401524710093712796e252"),
           e_float("-2.0953163957612660324927000700335632309272964295771639806918318999184175386352723018597901299023788275129594176565216849644048255637906223376056611423949077530304568945603144288742035539501352947199117902750924157280445437675433711097354681208369971815228970892767636688316074013629446949063763757045853812502122788978098343539508027575463157460947504203461457091086421292881143346037474447692468617729e255"),
           e_float("-3.101786194069472935416191644829400419883123080706718253592865260146484997835541246769191760583872534659058224473082463153379709608726258018995882301361855954672129588674673885441047225666741973130017844210241562614182096496199965011023985679566378507336857138326605635139001856397343272248671192359021720363455937846104578349047762372307594380776623308111024400053309143829492564796730861820850828317e262"),
           e_float("-7.3728813452129913449281559921406032255916190770156883947798504737820526710679475062589832856387214632642653876736522902084850477690047690637399987865174859696399940281259410224153154678620519825820586953695958326468574988192287229777413775842572986804754627880533995034067550510673781604063019893219317436556989634541124101914756394554454172952932494505192316667014831796763058745928234343668807424228e277"),
           e_float("-5.4150665270957915109696580808049665219321385966591794112731529100864230052631571437415337738992091071838863893490594405312032852656297570417466702443366357989394229416354171780341638644601344280365990303527118966784107514624143273256819235176953568677364233623609890305519118879935380315378589473508816767723551807664681133790352276713803986428920500441217342247849109045291004436755972731552636204018e373"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00605_legendre_pvu_vary_05(const bool b_write_output)
    {
      return TestCase_case_00605_legendre_pvu_vary_05().execute(b_write_output);
    }
  }
}
