
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00634_legendre_qvu_vary_14 : public TestCaseReal
    {
    public:
      TestCase_case_00634_legendre_qvu_vary_14() { }
      virtual ~TestCase_case_00634_legendre_qvu_vary_14() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00634_legendre_qvu_vary_14");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -17  - sqrt_1_3;
          const e_float u  = -127 - sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-4.4895800448016793765831211419565589240750306701869678598646637126771399384030700969531531140491332646458642377265470888269365066200271726624254615499450637773130694008552836759061701706057824292650989496141456820067809503635035931983538780142913103703785790417804310460913458876199347594158126992421255038444396428099850444888941829450874687011473700064469060179257313021267180344250406234991937668996e-53"),
           e_float("-8.4222575520849235537697867023338566491535655537099932289312943832516777054568230509299886989395165514223886623133822010050191005135068992139564012031809498861114502464462365250554058427216987906133526592859970700496746235231651720055096442046871476721001173048125134046622564177248510297509737252795802019149341072864873206645324434889686458505229874291761801133343846441521279041883674726762175525332e-155"),
           e_float("-9.1818906434298083626246221720090517903018584560433789585577393823411056903252553045350211028245232196733676108883706072592578580627384900950996008547540993548443030642771211387432261314334056540482984460766249894158937576074485570355369301109646849772321031071004668503375899094565679776229555993280825101591108381793640984335273917172202308676076594118054525907033942284735658427875958774550293401513e-177"),
           e_float("-1.8346212180376142542311911630393671457360081476469178909288392431547224029466161024705730304807754558786213472988272415895217730842560000714561348229882125869055268236321370597606280584437809593933401366458649097568670156405055657464314487166295763987478765513981555029950975969894198593197622915465366266357611796074786407933902772765263406190263923060379683406986953817093882263534648365035061425858e-191"),
           e_float("-1.5231531449558276861498555244838688786389715015431757613841034726991774580629570486430090613605277489212007423222281378436451291270148593818594911346622533164706216727718697118769416836638605627233448251220251642717634605956673056233338357525522416157419513573266923131865182152176200634583524506003003431122734158246645817990264136979578832946216958638244995238648506098418754547615064178660914872151e-203"),
           e_float("-6.3011942066558046366442816763915679396138866243660182988178593918698208065562320297686070323916674507789976316907775691451367110680526704489690678805833138237586842660303267805325962255444656258133717476556628944334239894352777608537659432363605640260185053578518285015087004175859315415663116678309924255360898059187196355120095524019446557413329661204557939171695490972559686570456179812998723189862e-214"),
           e_float("-1.5276997330493558817680948213068528989795770119334836703570505704641952160702215258131758765237518702299319510304680282706321853627107688257073144374641081691197040874432771668768182136643315173436749742354377098116713652346182296932089841364089208527679839417575832169598378508709203905399715578944434708988540003877204713262028955455218545978338839833426971279243803627255928077652813895135504731466e-203"),
           e_float("-1.8400975334125241843842738112634727513542223382125259268175328364382061489894152125710313844285361272269568662532571303978795474828087052219970566724007041553904915371319136920286757810553864335626142402895916581160099465414805404238752407227126132274484167208673997752887361597660554617939390909395144132208903384983058932364427205660095413036647524552369298321562078399141244013388831206739214595492e-191"),
           e_float("-9.2092984420571135477973985052345231834308793405859646810940360190156946807700414925916573216318367373495003668792016158883312642874587863981057134146021778328675337921816289206250350500034528095028457827857924096059217973917432281623473367660982177325445022119596012897226840164175487322662986566514901794152940893149531909587058900522309975036743869468603645401031875686461224118601074204439074184634e-177"),
           e_float("-8.447397857925967361461887318390501651527923415573383057942179712792830077689065483685190225724446426929455405277080374399394938253781677399027343480638702960729904387889774281199583843603620102369445823622532990869635161861534688520441759957402756544260062650485028779998125119143724060745159803337709566604598229260799221384661596614007543612945390967752129338431877509620429916118232290601612486576e-155"),
           e_float("-4.502981370363876253421876117328081115206498359553027386962323135245606685850308119724129744062701575989760987438157997646415439215353766536820608156277357568821149828974097673330582117987696913732029047308301542149179117190173936950552663917690556389840804846864484929558196734439690074702390064235814829397756841197131436536736428164095173914087264127960300932325130484439610233799606073005962853199e-53"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00634_legendre_qvu_vary_14(const bool b_write_output)
    {
      return TestCase_case_00634_legendre_qvu_vary_14().execute(b_write_output);
    }
  }
}
