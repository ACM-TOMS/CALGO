
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00616_legendre_pvu_vary_16 : public TestCaseReal
    {
    public:
      TestCase_case_00616_legendre_pvu_vary_16() { }
      virtual ~TestCase_case_00616_legendre_pvu_vary_16() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00616_legendre_pvu_vary_16");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -17  - sqrt_1_3;
          const e_float u  = +127 + sqrt_1_5;
          data[k] = ef::legendre_p(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-3.687236098653940025730451334057871262497580259575290915748622175181769217956591950656508143619492553317141673494127032670208435580800140030569058358286587632866669406667353841931721382087681671812732050083615743960339652596335134482980553690325158378147217504563646773994469702111023584068737753039638541587886049813872770583116960309757056859111601689715755965818066555901159287654199431623609770463e373"),
           e_float("-6.9170950886966754636787994106740226330196907643077914416319454281057446139461771121746202849306203046588567153147533624389863865436490733182148186963592715084693243813631643429265933339221640655046623736508167415933989589120498591148501910527714264882041667564845935691588018555339455728561807958676665932762894625403364887285661024144445900782111210484297335050617049935725950033171429469171575640091e271"),
           e_float("-7.5409722727959006797974889467849222640406719249692556725314223642783323796821486640018264003851945142098466533854372506770257828150835662229662500373009723907068313073371142556978450096242002579384882165922979480014464433671725207376022320795974397945513137212565954828497156827203350490580630839926980129509240272555462746895490902088819989589890709409421309825779994222835583671157072306903827309542e249"),
           e_float("-1.5067515257551382288478251512863589574661095243976708453906350118709655211897250882907794298704484354004806280131124838553619595735176278397233976593449477062777948590352036591832510170334032336358486081349848589109260687409643607981019009292459362450556482866835996135583316238802001570757187246922942102965336033056260704859409731392770621395943602686922388348089227291706864027665450242393283957755e235"),
           e_float("-1.2509466818310160661018832825009722036398657242767181812173529713551059679954327701496095010872794818781078225574368421481590649880434965474379755101708192421072961746069923346201935558095238884895338603917331698292761756976447764555181109058775787041655864643712285011802714931936993605643851136771375924745510909563860911524555157717685454826189654437427219808198895065325374882101870524520147463301e223"),
           e_float("-5.2301671933499638485553551735772512352715031980583817338830716429352223770893428061475698808640259609190615055699114302531155269457278749161582567043464205679431887316770439345887245952261659329436922829555138835788579118182548110931480307676194907776528248037458152920232489482241616941157855363009425655729082253896739393369223315653490214034003504592662364104349869014645548331846465090153469340517e212"),
           e_float("-1.2711312375598337182965107599692153198116305333966692789666258999311305581931713251364030638976046656446083464601006924248729723488717720074092648434941743948383414436792801017204849820159296094412326952059948712127534673622795196424430035628473915803207787481849343951448918722370965622195187025240974203345093097042779945921475326648453933672639374644025777832027741800935506425731461871632857296753e223"),
           e_float("-1.5310636012279072302919223036800351912541518468168425722108668745349411393359154854620237454303221158237978202448933397052393034878324616502359480023116196117649828516098911481185623363355526769313696251321406034142318766935589701787334309535238748689214803612120546485065327271263726269726068697879390074875724691876525264799150104543760505317351132103955633722595401214765209719172178064201347427517e235"),
           e_float("-7.6626490615035739862044798523359329323753954027118120719663253552233703177408958943936368205214832207741671837157670581184257883423458302152762496767415075178075231644569171769646279176576510808496779528512343447512502519587305039001157029277127171354523872321515235187732266856806480678965560960720054823508197251841249520990728452701848925762438897938287948889279468799397919973394902119590568824736e249"),
           e_float("-7.0287053542077272516511815710741342429981224899331137102058080167939975205581121746405961185696136262719615693041236730525131453098684829861288686667652037464152017208045184494703149819339953908114945004986989922982477496772179376903956075291156743049742341993123513578311212286259100882193134780572724819085069012362060438634679291341755196155476837196158454488071922775750441890218020424748554982005e271"),
           e_float("-3.7467312183097610995590152245191020018874833769756252503279952011974067375949140039201338608549759188084782927121684335611365076305489115752549150304953394854631804310790876401416376988217614272117080790989583466679288331733223672236876166216651573593225278888428736779774117346596786022630763152051022525808790172566337091322193686780031824193658022471462833600988504189060184984587705234674373082604e373"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00616_legendre_pvu_vary_16(const bool b_write_output)
    {
      return TestCase_case_00616_legendre_pvu_vary_16().execute(b_write_output);
    }
  }
}
