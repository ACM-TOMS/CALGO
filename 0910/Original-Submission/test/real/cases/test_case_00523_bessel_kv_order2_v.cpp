
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00523_bessel_kv_order2_v : public TestCaseReal
    {
    public:
      TestCase_case_00523_bessel_kv_order2_v() { }
      virtual ~TestCase_case_00523_bessel_kv_order2_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00523_bessel_kv_order2_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_k(ef::euler_gamma() + 100, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.2215861667982481801719223307147753050728466443540401034531798041882250891010523777666518601344460707284633054206577105123462882166872776096895633424572685907898748161133912989865332245262892056905474307750476356362941202974637419763527889595325857522458403547258050365631600209558011708105500634658986804619896541616542569932244951988886589348112911737865175901536451345983466658919696427387071860253e137"),
           e_float("1.0184946831974811757422623314082235927212879782691197732781824361378357169948962562214232118604556615101946828600251127642228892429674058224009514987082194356051244035852497737512536426031113473852895592025430285473563681884113836615857453176187193766408449266432464453445313311965657373016854709099281152373839838020205786965266784582917568877845639663574146658895835256979594166548824223927197090273e125"),
           e_float("1.2009523835718775674843591159806519948851848967502730033880280803282393004185562790472536429214841830109608100572375531814062213558720754285897159642645431117596301158169311860937848145778544952877063712041850494722513315643406870324121999540932821966329725215029488703376423049505030565846141298963244211359140347555017579396188725582625927898795029856419306620779274563137485917385105738941208787103e-42"),
           e_float("1.8362878907332125865953720283429402682112681876045015583757171993789715673151654751719525806820012874242880983082527904958380683806871283035198790420884531931604060958752514589311046317834939452778286841852898947509526313370160179214591589046169012681516462697245307551308238682123923381326773594704306785078829557632582382263862421633113772296350012730164791331247914139498086060238508632761424950529e-952"),
           e_float("1.9040465658358831767100933200467104278656251839394646629770599735068929343526056858598196107506838322029632877148279844311532141236445612302046257328276778118089674072355784175666786476374543660025431503491752272180833332048296097834772564922269646398854168658507305331172972205271397268766073549065503296455745545402963427545860859892571948064145590543918292193931700735351259937729810630750592552781e-7119"),
           e_float("1.14550181644888384667343088135100318132019396947095868941917044633090116339666134668761853212090882577940652455850070102625400302679101593054821138739020788835674662888319133545668690133428091549448165886974902155645708366407431394504819623474224674434971026285318980561245546158481414351854682575045115992798519240191315858873214410483248948548690437611459504304336579549545683068929876645781084886e-33933"),
           e_float("2.2798813518361855117232605039088329159823395212560522611662460104037973372690032089323005216223342326407690715410087750098059532557044392198215739535723377036299253901558656966692812591908843340302852590329076574709550541198804397768389922110325980363277121856194194950915849493505136185291896428489295390716810462828204252749497369063667432487131397023152304682841901741698826957567988393168722967749e-121579"),
           e_float("3.9627507834439475314026505519384068673588100678011865914019610688868621805270092653901461677341128385094394049582384562505108893696801704301454876886920590106197438835856570652158053426835928750031181000998616600948348409398259760001333281311700185617644150671499974387842238462764138514381029344475973005080497761603988365153519741912447174692829598645528045190541200740356907978815063509969754924158e-357665"),
           e_float("1.0779617120487077145991059188655219380787336846892506838790330648745391955215166046267894462296126695326484954402448352888994303287202592338793919006283934460844585394369983475720147385235614461828565079047088711803271554485618193191159065219463725536535828135187874708057186950652219974270696905004529616604746200248040570619435750116016645442539059510338035481582843280837604035658133091830633656224e-910786"),
           e_float("2.2411947167021905466597510449393204479171550524353443930332128020311550277375426450412490481338177321528807956883328586480778700910016897761148162317536022539545681776189578131927359866907465680613383649824514171799754562109223650432139712309960021786029847913447482117944188179292184550317988141746903458010785631647104868954887796273449344723506427226977939228468651168814841898505139098104054537056e-2077222"),
           e_float("2.5993852722717288335832662847891878913182257944528305231956621060193076876577414654924542819025476534329115680066757844244902385703887436425687896891116680783068775289596251253591634953376324832458385613253593055006490191975750921919209269810828657348677090016066130730974351041432380915024400649431439263265056253042160177964502758176928166173300753591155665384342576658020845844084673059613073264891e-4342950"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00523_bessel_kv_order2_v(const bool b_write_output)
    {
      return TestCase_case_00523_bessel_kv_order2_v().execute(b_write_output);
    }
  }
}
