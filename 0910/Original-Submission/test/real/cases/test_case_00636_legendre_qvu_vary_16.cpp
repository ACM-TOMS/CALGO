
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00636_legendre_qvu_vary_16 : public TestCaseReal
    {
    public:
      TestCase_case_00636_legendre_qvu_vary_16() { }
      virtual ~TestCase_case_00636_legendre_qvu_vary_16() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00636_legendre_qvu_vary_16");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -17  - sqrt_1_3;
          const e_float u  = +127 + sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-1.4358224318837676710358160620524301233563646759429192743873347406296617891908711289106529507517216018662186914772009963496873741822807204732918456996428968750904401193525207856728935463067224728736529384708086420219854087503810520495418334644476503627221478015699366136582231015691282109081537715084357015584500227903782592089100531269685607505643786806794059886416434953169806521614343029853856562138e373"),
           e_float("-2.6935406429356106193666253107133229358610840121664779342441417822837362765255023936940983631099053308162440159974522993177115254086571021930968493335027217746644485325063507688987642766333307898426658161425626473640595127970361137382055235432867547457576933425101665050039518738229513307176475411939919000088079304486858836331931392807132677291414382359536881767075108572834721831948808390190957740133e271"),
           e_float("-2.9364805664184486964238952978709920636477668147617618443637732023574633052741135027173959354941541355384387030737707609577548770212741739262221482295588163994495684720118360447920817800009108531315683775951436644530167972585506060149233971284982504243933021963407297672180135263636651139871826893428337182433349585700381122650940297940419472538804335805646656610868667044127429834401909269471060494986e249"),
           e_float("-5.867342318394255887884261554049252186382267411526093179024177801823225968089302949295632077950112952279513451490143883179155679030980411218428394313518635814896205701314187044141254773019736506603210817547560440400177668951799098286628660497631460384670077532876018064517077112949389278635867390503320813121517132683186021572147969802614513550238072834654504680212198451642434840568090684369869890485e234"),
           e_float("-4.8712294488525862324911747082038170122634806069752050433807809249586160759092641522326153214265462371455206941426511688306151115377041246809582784347312544212584906027074900363644286434619802039984237799935393312616197493895224192835156671633550355523759219617908358803703459168645164677051492581373610501477797329191899310438564546109471624235094261602094105734400644060119144006093532340339137373294e222"),
           e_float("-1.4983120138146970918226681371752848347803453460403583198825119681222533902093012495480024432088809016096390155610312950144044044883506790087845665730204960286067403094272742664214780038788371866330631408793440548471568386201995268452987064999304044255179483279750358606747023834556171795601274534610606353521142773297328342508295134114616825878529928191397133108943725683015640053088068047518369858859e212"),
           e_float("-3.3418665526723079866075089225539318038609344943108691814375065266486114390307643114193973167389829813668857758925692480573566980262575208051464457595752648524755134887503099569768367863153063872388797971019543589482580299653983723625096411847871559610002529729329267101405048681332650708941240894595671107105617965569192010154907510931314193122609709104085123185840958887232467695509223450234366898669e222"),
           e_float("-4.0252415232748226924141161312462523186058821851693092889118801776509000096925884879507986737201244251324484297237125042819086204559059661473824436937656722588472209841176094913159770969277709684403531888692809667254464415493953102213075240908324294368800477484985900473684077071645029003707237150089598652701669496030115218093245841357970728457544833161069733342837156685070569508317986160645844819706e234"),
           e_float("-2.0145481321553366232358711474503657310726953606996968128545824078301242355963656589503592027507074446073256793636258218235357355831349357155964898721480995094084223264265251419199692724931339195989185473791258709689832723902041472405330795152222501785062207408751380046177463730357315718070247564889683625763425816018809700426930042804579039438379753614040935301475494851011132942016587504213513412944e249"),
           e_float("-1.8478812130293442550943337843781300388441730225039865254162408579318256599902123263027818716630345627286656030317533834156057462061968193470507812059346016214211690500066296741918582618140883729841359374616801217397638125219559355792586333559141364750891370057924606885458171804270150820906226047364615581014879688229989172475945417042659472667687050299518658093714408466704405182009041733758254114524e271"),
           e_float("-9.8503406810763514149188086731828979355815450197910729719763075751335008439971284722759019854034791291731624102969017131629913034501333105227511271974434627094268123122258025531287238166681114231006531881430775889638920231965593805101731767449439843248136838143614182909167880900608759456943976759466734391052775218705340881159160325539390290868063699691041501991534509209137674238871335484413909104064e372"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00636_legendre_qvu_vary_16(const bool b_write_output)
    {
      return TestCase_case_00636_legendre_qvu_vary_16().execute(b_write_output);
    }
  }
}
