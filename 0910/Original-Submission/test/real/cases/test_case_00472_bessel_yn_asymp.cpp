
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00472_bessel_yn_asymp : public TestCaseReal
    {
    public:
      TestCase_case_00472_bessel_yn_asymp() { }
      virtual ~TestCase_case_00472_bessel_yn_asymp() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00472_bessel_yn_asymp");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(7u);
        static const e_float v = ef::ten_k() + ef::euler_gamma();
        INT32 n = static_cast<INT32>(7000);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_y(static_cast<INT32>(10000), n + ef::pi());
          n += static_cast<INT32>(1000);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 7u> a =
        {{
           e_float("-3.8955247224851191450853642420918927255290697650876620455543621929993271859092789882976938130691907480727651902791005750106221817822123158899153438211566305628955962250322197715272143297521690831140402809716442577075268691106789193299525678923960032967918956160117830582525931044309151288222480498862431267468919379284994906187141917460064926561743822384923695488286713725733052689016576086016618514579e784"),
           e_float("-3.3372609075658351744682606164430379574385523068420802423296436208754870991117894642865591739349634695818588034510055503816049911931707436997503607685366947823565737159685889857515123653753454022425320061347609775426114216875547220176693121017515091837066931151971200284845992208572470870702712135812906039160954863973565004059500538233796356410525452171770420593831767456227369307775760385346746384937e401"),
           e_float("-1.4555244616357391681064826050997098866185250474391211502697385076097196558747801927101578844151221754289043716164179333596562767241685929278077261055950157927930833946252627165309059232138751912441768093259402976832556284419497569410278160372430572703435170046576221501786323720879034758801182088516036528962035135601592915995294562378429832217481267226151926607715342873521030914171436260063537001791e133"),
           e_float("-0.031108514444636400424432795712871137704356755922768259903273963182852076502806772449528927402519520828904609183372517321827834685551169310354605956316340619531457713014854009213646714774446128218627873049648709722086596076769761352658248263267952416461128444696591157309414042721505868340153678182934615994641341456471586234480421308846943929253730619853535406128954816323074886677515638478447416748664"),
           e_float("-0.0025485676439426040401825240245629957757310124511039898624198145369621704003948935109274734126307647851303596630904306828779808364554096895294747483244645092163685044249404368313194960157445514734794892315692818449357551863909302382520997886197722740100403935507362117163294413682839454526522917704844765391195883041151827466863019706960838609290373278152553472903554569534090234538114089439126744351758"),
           e_float("-0.0096002926962066310938627312941750634558540751310365804426024907327848409289432656911062194220319766721818082851959689132750144102747658080599143430002239150908826752478820567474613957101192117189431223636666185195250361167099640343792779972531431552371427517081454744529788522113924122997898706893124722800481094798709745739045240531628750426677167442259307123524194345774052490196556973438034781263834"),
           e_float("0.0019909070773507553372559649440789412422463608621340519996811027883672940791269280960560976359653554016165056641647184496889093129678604019234035259276348207170235022525611126733351955530516616241519334428867978378809338969741558285392007547323590755054639038332045459562230800060742736092318777829336953354298537538869367040822436266039509650145918461833536451420068647852453846138424134976186278838948"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00472_bessel_yn_asymp(const bool b_write_output)
    {
      return TestCase_case_00472_bessel_yn_asymp().execute(b_write_output);
    }
  }
}
