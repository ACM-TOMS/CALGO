
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00861_weber_d_asymp_v : public TestCaseReal
    {
    public:
      TestCase_case_00861_weber_d_asymp_v() { }
      virtual ~TestCase_case_00861_weber_d_asymp_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00861_weber_d_asymp_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(6u);
        INT32 p10 = static_cast<INT32>(1);
        const e_float x = ef::euler_gamma() + static_cast<INT32>(10);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[k] = ef::weber_d(+ef::pi() + p10, x);
          p10 *= static_cast<INT32>(10);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 6u> a =
        {{
           e_float("1.174121859313109931937322463939351888245581508007075996993019888421966985177924745809732910918384218139539315022059725047977711680465088867118521787740416783425015549110161469422292285325520823396584255268646625485361172767614072108578312906464124905356547600498595310522094006712733943652095715441748559355406579875486631474199466741089027474044660414118565147453194630892611547949548759287314660064e-8"),
           e_float("9.2502897408382588690379450422655289911616285791668860562847970211161708246751985694691677232560356829608449860353257202984429046273514685853298449108695823387285151267934680633437001098741619289643979983077068035433137115343469645561069250078931692164235717900925318475280887345739659880190332667134343301843818605459806224662150205424834068823208529029561745078426214174299805450699977944559979811155"),
           e_float("-4.003222212558640130396151674267826874996946025409677508863887957865231499180463134258774516414566106813034150272881718525435752023601513119800839234328681022934360436511660214137172393527286914462292608705380187410377877860386682152369051021810078663720446784563408533306766643559594458352144848821623720884174420771557753347934825341824999520667619087346489694935894259106344930642407547237717560496e81"),
           e_float("-1.5262042246509139808958796962621944031246901532586369796478673460207542200219752850673295613111685391132116060199487355631898093154317805745441024207904637996511020191431734615254140390647915540159995781580291556560011155382185371249419783067126186521470731016315605169538775962178779011706466461114017994848608285657689911020233907200779779218606814065630173002638799766772481766294416231953129186301e1287"),
           e_float("-9.1431709002310862832110791443688510180555716844071684457575699695640263660173272895958105116775281792363106220004244495305308914112462292444057754459213070467820728373886325471756234334160092134000710492054511063747163882945112008194030450700329229629074241490123748296968989732762748424091319289431322266606030867307584191860812163407613787805338314306842170824861989282047594914866246134886302640427e17834"),
           e_float("-1.8400853619820236255119117326257668673646520759080611914275698954648724528544812956709956043904388659319050483517092122642408866667807060407810339018968781689419158041954452010343201019388824115346043013062283077654456159608148644598418284626672836477424544378078715562862781180243329792174279168876265325836944929584871770780803791055594614248952188238620572353981285455337554063005890592909682821602e228293"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00861_weber_d_asymp_v(const bool b_write_output)
    {
      return TestCase_case_00861_weber_d_asymp_v().execute(b_write_output);
    }
  }
}
