
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00463_bessel_iv_kv_asymp : public TestCaseReal
    {
    public:
      TestCase_case_00463_bessel_iv_kv_asymp() { }
      virtual ~TestCase_case_00463_bessel_iv_kv_asymp() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00463_bessel_iv_kv_asymp");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(9u);
        INT32 n = static_cast<INT32>(1);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float v = n + ef::euler_gamma();
          const e_float x = n + ef::pi();
          const e_float v_plus_one = v + 1;
          data[static_cast<std::size_t>(k)] =   (ef::cyl_bessel_k(v_plus_one, x) * ef::cyl_bessel_i(v, x))
                                              + (ef::cyl_bessel_k(v, x)          * ef::cyl_bessel_i(v_plus_one, x));
          n *= static_cast<INT32>(10);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 9u> a =
        {{
           e_float("0.24145300700522385465556931095510713586157363435946900333101178621745186289904262367936682598464422754340509702110327708892862017874769823804423255256911589037803844678750124358505915161028432984721263072994209826049095220077984334060458263307033562596302927513032138918966623277158150350933765656172448833898497564971385681087582108707903953060291119563213951043499849439727168824474322192177268849658"),
           e_float("0.076094277638931174498554081280445683050219782883027021974177258483419375994362099379208524434465994467097606325286353389411977807443761856473214836276498854937176452199376840494677600116115178381707379106092488169604687735976766008206245391079225849765358326861200714983630610573640288270782385149957067927230327969154839402434114182144310596964857625457419355135505216325401362599846814670244150640839"),
           e_float("0.0096954097204857877840930850875531163804066121980910399573089149393641466892521178111265536320455381450793565053355766222570892202319571395870258681132084661949651155425472292235228846026129727143754306943919103812264219828378044302715666302095194402091353678086150189068750603822739464655604672794393139737477094980483059252313890179583060175223364711029919726493814180227529386664195270527344889735189"),
           e_float("0.0009968682460416386455479123342137298207518897667282096490889749675963549512703789186040818095715977659215543991277981723662656266400781209088861298732293343725286540004918702147281733494478292928067072296314016650204841679061496425473590074418450962301675867480219482238108280721095788449781175162246134222834103788960459484176947022115412264274445568325556938890456762270173823351795251268786280482228"),
           e_float("0.000099968593939968849273930774348112288199290540436169072032297622116081697024454181684428562523336995745391813553324549722198946395053109517954229237178963214350298274836126119757439110469829431683774237615783066979712943473559257539949140655992163056646660626529621627767037796730544865785567512498420149570961136305372187121837871363081342261992342371677125242658318044340146027721364078622290736592036"),
           e_float("9.9996858506039353687393124496234566445463305575194004468588444052139566470939067561041164336549580722858146398306472264049878030472535123497601893368501253427180673599577641853186341440608769890281041365382269677418149898128856228462961706207751049672847107561297732478907303688579609454947919574066732487562232166390630315104052341823195405855707773339789978171133905977071641280265274186658769367252e-6"),
           e_float("9.999968584172159836016716244606463150588051654996279623607631310188104594598421479307995403572474928509980192169848000681186492068403629807940965079223811949346541537584329438125363195479130474078674930543337853924615829241055056163207562385438748494802663926780704315523080858971504991181566857159130610905607313849234372298584492881311919246665101372891628093500143764704014493946698087176593897651e-7"),
           e_float("9.9999968584083333703368078038245623998859128644835852228330707677061675675077353274934971850684425097250645610983872831074799588957957109364057427494221131781078335263670271588634207753359737822821725861125331472249070131533205896754851172368340177768867257819766544601587334928584012542088360317651352639926362253869707715788420338236968051889389743027416651871068659549557179650509166032889772726811e-8"),
           e_float("9.9999996858407445106247671803372184171363372618357785759666631726457511482713491339641914830132659796359577563596959460693307852694226589510789906775185017998966374183133912907512189949262676600970673688726148007552462933122679532864363666724324531705259282054439811374756578541043182045030346603627356294865850698458658654594469481057536927688123442307874620305205758970723618051898237979494297021736e-9"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00463_bessel_iv_kv_asymp(const bool b_write_output)
    {
      return TestCase_case_00463_bessel_iv_kv_asymp().execute(b_write_output);
    }
  }
}
