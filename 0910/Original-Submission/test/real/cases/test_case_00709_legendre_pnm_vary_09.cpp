
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00709_legendre_pnm_vary_09 : public TestCaseReal
    {
    public:
      TestCase_case_00709_legendre_pnm_vary_09() { }
      virtual ~TestCase_case_00709_legendre_pnm_vary_09() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00709_legendre_pnm_vary_09");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const INT32   n  = +127;
          const INT32   m  = +17;
          data[k] = ef::legendre_p(n, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-1.5419827724853603637844000516014648352294631493875163486093663740077370936017177501436969165699056079206461580583398280198208160944675720056370075117774728114047708215493482044810598103921373024044576604042912469494473705184642307582077123771606131261685812650971712447134975772740754825839524301840171127051488987943840480971285413279126859768778688745783385917639858898664921805023687950616704563324e34"),
           e_float("-4.085596623829550321924118040812240896059653736661302378842077344188146972360862237935273416952076577154366548170658789616860907597614172525588466018287009045114983648535933077142401907125620532072562411315682706373884797646246093230617401281545222482015033113357840276701742443290832425445514580762495288254036798326958509878212651303527814112147027064224463029368643e34"),
           e_float("8.2728555911620973318989434211634636096454439331879435721012482933546938411558027721280416930528559059830670402320913865665395121314792578805347668302197351923054983434447876111365180550649988295145013723289259638432556464641233031307839007055718812192624312511968339518370650150862549118776346142696398256694869000956835751974271605114586292363146609314755174666337359e33"),
           e_float("2.67821847285931706105024154700079992383096540268556094215795825382666049345415904698115153554239328653577580963384209901331146990848864054870364119919100255628906507945473860862449222863251807515613572510486736930217841743382438176369764641759066484523312178129596927996524143954309592121198584506229055323561051401247436015887460857082159247463251689654008432368887071655e34"),
           e_float("3.841724025514748912499387995744941210439934900897998841234175774939002009535568107246026532991644528884432422642469751109099089524588419299088294172382509594945344017969389743289685250753897907042346995961065990985435976178760628974862863101159591451875667401382560688626924668562809134146789885224932719607781267927579206799633017582598370136373074304545582702337334875931451e34"),
           e_float("3.1284481734642577246814242496842484147269905852242333327125624081716995389133331673399858544801736479226317912439799428315175641439505405051201584142966531825190838615321208083905182370641409367313536329582774092408423854370723890844548275243698295380818036679849005750000403216782287055325380310567618690174648476997074142902669325471451342159412557626107737400609543160257165748298098818269717136472e34"),
           e_float("3.84172402551474891249938799574494121043993490089799884123417577493900200953556810724602653299164452888443242264246975110909908952458841929908829417238250959494534401796938974328968525075389790704234699596106599098543597617876062897486286310115959145187566740138256068862692466856280913414678988522493271960778126792757920679963301758259837013637307430454558270233733487593145091398938069e34"),
           e_float("2.678218472859317061050241547000799923830965402685560942157958253826660493454159046981151535542393286535775809633842099013311469908488640548703641199191002556289065079454738608624492228632518075156135725104867369302178417433824381763697646417590664845233121781295969279965241439543095921211985845062290553235610514012474360158874608570821592474632516896540084323688870716545822283821899606946076e34"),
           e_float("8.2728555911620973318989434211634636096454439331879435721012482933546938411558027721280416930528559059830670402320913865665395121314792578805347668302197351923054983434447876111365180550649988295145013723289259638432556464641233031307839007055718812192624312511968339518370650150862549118776346142696398256694869000956835751974271605114586292363146609314755174666337359475033704564648669153483821356621e33"),
           e_float("-4.0855966238295503219241180408122408960596537366613023788420773441881469723608622379352734169520765771543665481706587896168609075976141725255884660182870090451149836485359330771424019071256205320725624113156827063738847976462460932306174012815452224820150331133578402767017424432908324254455145807624952882540367983269585098782126513035278141121470270642244630293686428956381288762918722795785772109786e34"),
           e_float("-1.5419827724853603637844000516014648352294631493875163486093663740077370936017177501436969165699056079206461580583398280198208160944675720056370075117774728114047708215493482044810598103921373024044576604042912469494473705184642307582077123771606131261685812650971712447134975772740754825839524301840171127051488987943840480971285413279126859768778688745783385917639858898664921805023687950616704563324e34"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00709_legendre_pnm_vary_09(const bool b_write_output)
    {
      return TestCase_case_00709_legendre_pnm_vary_09().execute(b_write_output);
    }
  }
}
