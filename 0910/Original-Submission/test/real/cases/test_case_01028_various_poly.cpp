
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_01028_various_poly : public TestCaseReal
    {
    public:
      TestCase_case_01028_various_poly() { }
      virtual ~TestCase_case_01028_various_poly() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_01028_various_poly");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.clear();
        data.push_back(ef::chebyshev_t(-10, ef::ten() + ef::euler_gamma()));
        data.push_back(ef::chebyshev_t(-11, ef::ten() + ef::euler_gamma()));
        data.push_back(ef::chebyshev_u(-10, ef::ten() + ef::euler_gamma()));
        data.push_back(ef::chebyshev_u(-11, ef::ten() + ef::euler_gamma()));
        data.push_back(ef::hermite    (-10, ef::ten() + ef::euler_gamma()));
        data.push_back(ef::hermite    (-11, ef::ten() + ef::euler_gamma()));
        data.push_back(ef::laguerre   (-10, ef::ten() + ef::euler_gamma()));
        data.push_back(ef::laguerre   (-11, ef::ten() + ef::euler_gamma()));
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 8u> a =
        {{
           e_float("8.7749808272718663743966645340018258153556650635486918350655468929526609913239062059960247883190836480875480618623791678175861398326008734250538545615474171636913078009095588763272801246901118701081274706964908048966606628319303096479866400066430727956690732751535982788358943654222645957500531547203103103999993833460996784235472885175640854051174049713144771589183455346213098747103537410116099527309e12"),
           e_float("1.8521399244455634945327808739656845341758051348681880043405407429678753617864896495878385925882846807781976705418369632975458319457239463671010417035472331927442649287154583236623996962337603626803188460306326959622860119485806474903342546383890070367625434635112400332020651182471615926682650551067727564810931333521941827774117607340393802120347192508374857458421560148626397147709489029945870552687e14"),
           e_float("-3.9481792677039391048613861724431661151519423285234950197253347610397862498389650692576663333475351516615670434741708457369060546742651617450748560045179963726741385884211855221431637566572030554669987159518849899753253623016701272352392691817596865944716743443444048874526623228657449395218406994870349700956280431180086394863756582323347974906997631525281632053663587986192163993322466412840840195539e10"),
           e_float("-8.3334432228682015788232171114559529788132061887273923284634897119093099376684151930806559590398302244354202760437142598512808662693430030284791977742968063327179546243985880774798140721495456144794182873687539174751539288022316728156533381628767457327079886627225652893966770315522636196428787509895083088020395054172155345629386166250003454051850343556069772851343624537237726742782097512595181738408e11"),
           e_float("4.4084313197448008949935147397332481072623253171548998600374597496554120874843738824981178719765657086189261739089435361949631459044090070029903362571506590722233443563476848043823573621628026745256095876720807574544805509955779659396572765836276574928314030985909738947351120436398962237870223345016055527333536544277992008282061956402101117547480139262464426964526017783509264404024753447225239445268e-14"),
           e_float("1.9907938124502396617378395822059678569393211158704933286427895657685100901714612705119167472820114691500645890755896518091614767924782521028400937861787431224985918735819449078986692742951804711140264791381588560780812545299490078916080990020835143205326928343818107025378313128594907936740184501117909075742232123988346378201754808588739406882633448075939005564129777184999950211030563495287835772922e-15"),
           e_float("2.0874778377855893553016833364532151907653757226820040573955981525397754832702001832679003337839963976758282112548564120098396906787698067983525186242443888808137319704467542347084514171740332253707450098849632778150366182200174860002267315219657013833505478108239122438548955161640538582661175708080287209981818689031326790246123141816391266643004768187327211987547069572543157464630828821017286473871e10"),
           e_float("5.4933113635385456685439324739259565422561940839701062868816046849259295572955808071077297358466820573098271516410689104211394609005648199418237615637901880783891928025893537834539831747566778307122076888867382295951534374782315796899144441426345416521732405248895377790674965931786347644447182733370824731735034736176973383898950026518599836850706572436046399383701166479253929645873475359184607894034e10"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_01028_various_poly(const bool b_write_output)
    {
      return TestCase_case_01028_various_poly().execute(b_write_output);
    }
  }
}
