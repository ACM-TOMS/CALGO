
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00534_bessel_yv_order3_v : public TestCaseReal
    {
    public:
      TestCase_case_00534_bessel_yv_order3_v() { }
      virtual ~TestCase_case_00534_bessel_yv_order3_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00534_bessel_yv_order3_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_y(ef::euler_gamma() + 1000, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-4.0465032287771290648812970010955064838522502603184413843343007470052756317393333163641676211673329360065796630447519540709122456672138436281266150752938895496547067872845296858872645481725535123315142192895660419889956626132990879796627859792224289846938350784020183280388813945153807795213036325072929163488705265582623676912291683391904386356771939256791038233873374267240749541597590997576498168791e2369"),
           e_float("-3.3196024830189818053019218907944089193447734966813389527644300907592817058370997293604361278747244711139569473059819515898770388371958461298883749477778092195847912670611094613609891856656487736443935430359108760985067153260354214335083703720902032362365691941836363119298234249220603663251804760893250609478951293171978503049604520756725905318253047320864812441887883383932143694909097765954201025061e2249"),
           e_float("-8.9556038666693069032482072289147445145171496079696427257523535251000092169931721063056096418218914914583120652837444344909425106295602509779795249444789981829022616670675350963192288875326363944825196442616304463473971986404733919168046310602472489459738285668635773095386292763994094262254104433052222699958958517573649549137695391554651834056454626026095295138908981979691894903933302292353689178621e749"),
           e_float("0.014256932583155212664234805563781390131928223582953767407727683448378067843485838410124062587957463463089004417272764377096042471136520484664287376666775335414462582796079389109254747255050814630126024367744468766810048993466029092250172276474926017064313747327235940725724894535784453663435115331973751977221537343772573545025545572246975224701289569112143027359941728702892669309212088920412378720686"),
           e_float("-0.0057786116374352306810748797371285748522431461321480239169651505147934213749704386183673400632230914577477737891240803739892181363143952873269936401978565316539571080165410069427027432084355710597324352424920457355768660938400320441365719507084595030968335502266323735574874605424691086761837368782860620406822880151773564055259945269065992310335887354102033288853371348680630514577640687247529325041194"),
           e_float("0.0028329630104808916796706263675878631817461260473309277320554066807500037603899751018457680597082128747342616786764138756548777366245957140066312651590546560048125439554819779105210495389467289836266167993056174980628559138495916986915588313234980214887735510399072251493014195823813363558963910196050948838283077306648781771522253766119425640868331415205148254211304532558317428823534262545810718744521"),
           e_float("-0.0014684176244836612037615517419268024529656774426377864579243482488449417741261859738653618200909277521628820471748356173035459551585772234273975688095675597281181025787985936890368400418270412783273540364319572097428644797956473434262951675742052144309248211209875467547752518827924724032322446194563301269302174366839552040196772269806499393577806318531083591945669752705608899351901932356115468020505"),
           e_float("0.0008743618335298202396362155058137590886135260881542293512965928471979003810717652243565025501667441333182637978140013128108484497365898692462492472659511796005848331129892092649619398281843469623179787719377936969995528173363725806541623112385120548828844147739308614844692875254913751695867249197361651357876588564750024695883323833072394337190237971836358813658540012542643769733061022016784337050826"),
           e_float("0.00038738154357759650840204937349440444366204465745718854417013999655234276717014392382804604707008871270074644954329957964695892619954446152136995937676450906700023885220689596125765085510482386433827493859952445003489633017582002969929847649581702517646666080512382631367091762459365622139170513767983851808790554886756942227281130954082896708561943572480101915696419790726350102635475970063257257919468"),
           e_float("0.00020248259183417416758823834119562408516837054756078586777738812072748897781533288436422720194067385501819855989004194575705198322396558780212086292935489224722659181814776894390929918558266732464282433196842712897877950365648046953754124032364850597730726411549372303585630063731903147651672680994825493148487199674915495382509051832142470553065004614531173189926575312505456459829936449115436313066569"),
           e_float("-0.0002207837254470612001802372716990229739718954828598520158233496770255725059888567200932224333908218009011623311838704544629992262077260944139121432572499355348780141673740390817660560322386077716563771586030698251524189584881449337119118353213437084030144844112447597534101943243307059601043747963139553148271602815591611405936055378133733645501648188107054352648687783665929687942638321499347346028689"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00534_bessel_yv_order3_v(const bool b_write_output)
    {
      return TestCase_case_00534_bessel_yv_order3_v().execute(b_write_output);
    }
  }
}
