
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00441_bessel_jv_zeros : public TestCaseReal
    {
    public:
      TestCase_case_00441_bessel_jv_zeros() { }
      virtual ~TestCase_case_00441_bessel_jv_zeros() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00441_bessel_jv_zeros");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        const std::deque<e_float> zeros = ef::cyl_bessel_j_zero(ef::third() + 50, 10u);
        data.assign(zeros.begin(), zeros.end());
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 10u> a =
        {{
           e_float("57.464772933262587916257652095575083826517725791856307423673655220884012304909671886974543698479711169895888959526613318388463864453459745201257814485575620119972424828129033675805151328324638208254084742763900424930813957243496580927684432650770345689440971150841452547572395720205676880900282666433134938560979482138561924210702066576607727746531906353834665824989216372862030571174440601186352216988"),
           e_float("63.165662709019484841058755413256746431837729501909501820103073852863783472686744302445866713651684918694402220182594182057446478004612892347583477475083471295938121711509640545079821802552527309846145789925147831022296348342789605744487148750479648697406101670508256713500990323889378545568621771224122395717952958168548622589781175371930562751100847942925469048730393239158818485984056722924392565376"),
           e_float("68.063144037140532344105954213402414370200321621308707466974829131807561833097156751736831762525290131081076074856611641863636886652441786599726232239917498701695436765112786883455669867087048502174029192570977105628541017330315598717276774458556332567834898230169675881857097512571706863727217234673755394612493067618432734008261267574077414668798720314213249856740105504082086412356427988056905468232"),
           e_float("72.562616823265980703038252621289145574466696513775485626514574378159620757160456177202731546554729554873285596887571693377788743805714514207188352438460999727117303300544439599507226734863371432350288277549574068779235953622667144477185443820228701956022474110379504495312842251922042204825027236487476262186540530463324391469670267480287858381843738866166540695723537908873451913892045141040579828757"),
           e_float("76.814997260742703749570387344856361242505455617712957612888190993136416862011639535803684610105324801386041006494409502303689726736142639789558175059646921164954962089677545254680139979876204963707938574634427436711146158814899182264851021973228901179005766238844934844280020244100557048932078156265801008480245740876120848514402392783030073499235461962584328680445411285506190586159860289962966256349"),
           e_float("80.896219695956328132286788198119698759969043057629135564768839368443730042575603128861479765417509740959664319394513703604026170657599231264949866989483888531487514788629673920829698274441454484670153822996388208232918606808809937038523888436065208371963765559163960943337884013035378045986390810361516991457697831314661480304261078293787715599637636540292581730595985707674484800224790965700491720489"),
           e_float("84.850804252789245014851542751691241529636489279233185391220636151873619143509907969564306863512562146614408208390527252037406074949745300648619684564139957703642059197277988901919316031096454143045335629133251447920325919590971966740152862912703735646120391929615627799747530079899925305854852380337070151330194014066294695307198761578875471132752046293953111299842120306269643045550671521846772772769"),
           e_float("88.707440411074016186356730053668310165094311844596279665902070340722523613349426841524088736790432469490691165811579391066069357110787478346018257533432691199003707423414096931544446701239454729838634180678836100804991942500655611059266301654803741490640221604945502865442220974618736598556052943783134975618544414072765378686363373384029949961442194068156695351488643056295820027454611979865811780534"),
           e_float("92.48585185561020107107942873842959238699395198273228206763747541988951718716866591450114640210324768174068117419511617604999191250230992212474276914846928396895961152574793790437480616878636235131478011150491197890537769747818514599460879821679168228815155843291212672564121637363117757188000284544215659679099851470006430094744093594915922822421899306307629497848117478599329418455233710796126842477"),
           e_float("96.200254373695147703510408185299940455290844954148566500611910657323571313288910708390908773166056785451578344062133485745340081599074603675877183146250892139587034460936025872916305706621102777914566006687302222094490102023600782552469347769525207040012966268516448700149229150815100986941800111882077981075747308000246202372676127802385180025953317276008042262283495151484764398670833644167894224349"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00441_bessel_jv_zeros(const bool b_write_output)
    {
      return TestCase_case_00441_bessel_jv_zeros().execute(b_write_output);
    }
  }
}
