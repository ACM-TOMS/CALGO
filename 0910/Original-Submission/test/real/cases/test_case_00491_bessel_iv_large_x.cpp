
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00491_bessel_iv_large_x : public TestCaseReal
    {
    public:
      TestCase_case_00491_bessel_iv_large_x() { }
      virtual ~TestCase_case_00491_bessel_iv_large_x() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00491_bessel_iv_large_x");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_i(100 + ef::third(), ef::euler_gamma() + ef::million() * (k + 1));
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("2.1444150763548735171146972314797983128773114906164496094269183112630710496377587377789127012488494195745980965363817480494521727143161823126319079433691371641935574624717169318929090365981111482462714864309548993316059537505397657046844135409749213087097331888288521947300619122817606436422199009666433668459488483095195902397572960000679172546124291800470277775669581750785802319510519119988471234256e434291"),
           e_float("4.6109469732934486425265339535688040521839860789643868801709986613178941481656660610511770208383840313022370937959688846783794044551880773472395625012774442293337145192677985122784574242540595590855322519664329385326916498114914452575827155406137611376703065599872564178048976368620258950641105821603509832252294932435130098579732780552953861883906892936514075771109101273456207632250862820225848987119e868585"),
           e_float("1.1429101529167493108258173256996891337434518961201264075416396401981905426919963501277052794173148179729234889597138138147556671924136130782628311340839253278354765125946930260367921246457381412608477149056865419185382506096280709767342407085573864372599901296947329763142649305044152028370052176645848599522126522208094501538412190157217266122341425630322168082270307505464419919238411357871750662251e1302880"),
           e_float("3.0035035153879365414386171112665401239253713352696341201993291995513882498910451454270192165262218853686901050483321521983653718448427148350378983839265275403549612290437352795442502052470969050664949536724555131840844351966849625485914094011676941331420162045559086647856879093627476866761480017144010705157875288760220537579859615787362192711834145456816438758444146398405353338699316488072958475197e1737174"),
           e_float("8.150527031637120221507624344542855681816085355246848494329657923580507224089950574967773803642760918949089278609930397890144568506186256901982271390018807432667155457131562519700742977483708825614682078132576864003414810832920149929646365703558092096114412084126728536931929530960333434666673328360085062749099868674290420663053418928987501100914967239503678290618593688147335642756611882534259596502e2171468"),
           e_float("2.257205963798481761504970372606015206362343626039841270979733469077477341585204627145935794060158121328390279853013201075682615856761516774804965449021122140870669579236638389452514063525317005985511729185524255199485995360436845280983319599093795172000539166567649616471712443624491647601976034199376804085878766809076790163155476440991023677795034888682099486136798189416821431950777979059337945832e2605763"),
           e_float("6.3394720982801270103950067638942400585781086398499043750419627042583983194085148383901860524333297001369428936821044529837893453408179463421645769974566437264793403146644776806921824786556508264105661185091003570358172608520531152247604405252515704949114634093144459274501814491373827076146366717574610060687076222611910390672394354153519827127851541187892763828876495568275679807446196596442557993156e3040057"),
           e_float("1.7988684695563678927415496137686911305081256374397885651933092342072720578613755237854371727562355866669070400575544154396451610689991844514362139651967981560231564787055647572697579136708281447715088289376783416548166421087057605443768182163388952536270328061072585721637552115468263506798845625774957881432332313757436663540415052771141469174924731073663900400915136862918437616543235427648916351452e3474352"),
           e_float("5.1446609889473229798713272403792715915790409013429773049919634375730272887550118037255472923640320841290587014921633459861631825068000313484148261829523594292440169780423768117137317648347984601556917679728081197251416523779166223999342211821891214724692005405569455321435257343587025977495508431223317526322524833628762540477482343332660757903237764950388815811318019378323871375902249899586827701665e3908646"),
           e_float("1.4804902711563090964991335428539708241031402231708581248755999930056866478789091622109966959441043224734095295487684545760684081639308414992360920160478983320535475955666306170225344229404108902546663364527221252313066090637806865545011757475010708842986392826648930409638326682333836335749108586629679544351447476784287993753559057262975709567232073367335942696242289485078668553935119383579049850631e4342941"),
           e_float("4.2818587846938989188480380992779570485932204446021451450720124793834102751114815395577600298476514181069601977229850100279333409759717365001374311683560763881326579969491316689257509204922741733359327446152900423033435904023288080003974657126707557618300664900049380069734331885968182911852891224000563950557833893799794155938918207411958856186223447855837819808990646385789003293622221249741986933635e4777235"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00491_bessel_iv_large_x(const bool b_write_output)
    {
      return TestCase_case_00491_bessel_iv_large_x().execute(b_write_output);
    }
  }
}
