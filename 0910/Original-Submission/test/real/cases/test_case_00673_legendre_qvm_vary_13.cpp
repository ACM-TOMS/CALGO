
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00673_legendre_qvm_vary_13 : public TestCaseReal
    {
    public:
      TestCase_case_00673_legendre_qvm_vary_13() { }
      virtual ~TestCase_case_00673_legendre_qvm_vary_13() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00673_legendre_qvm_vary_13");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +17  + sqrt_1_3;
          const INT32   m  = +127;
          data[k] = ef::legendre_q(v, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-4.4608963595450417760697457750878772219619748545764299073657369159811978506204207989213944627229870531025113181912269159991234409321701979038922608857712986624085879730379702625132926125168526900631579306405031820746896027755111043230977166841856030226480608590560582650340673232860919647382580035436728450166359198050939228360901750207700166107442046764362695534176402503124835791869776952599594229127e371"),
           e_float("-1.9608404221697812867390691466175939086686547833326715076488154453358863619338215995795319411177363984856362750113471546513922004238451832443852996134344662921773680856394856549916424239171644049194040604629847205803205190900232258789055823203404461187734600283553692210657410964431706833627866955637631037257933132926623771398261568461544386333376124020959153281381959785980552081138508142552050928012e270"),
           e_float("-2.6294698241415245517884596103580682094218216953635988536648187069068249024445605752099501963945976238936562128673735070696735517437455297443808507488332740641121335081531499028308682539288353756642009542371722392179905542991213498244834588692787851158324701118657959647662489677214851928575530786413480118797473827611616166147743701520011196350589071815878732049440735171015700996908814333868961136988e248"),
           e_float("-6.0943454857566104164002093654886668015540158014062799362427079443555315747799875918424999070404354475482602604780328163435562416749822231361642253235861359495957178702365655788219002576495504750811666322188931162286611801462691452027574027056181548608952628238057274637178869883486772122845581488770092701225299534005609329750243587285589317411527799899242133435209188887511438062164496905277392938423e233"),
           e_float("-5.7461716827379572567925388621735987975049289585928899633990319810009071230332791911241966788398784193915207073831029101543385056269262900484146381142205480524850538711309717885438232703713754746139817009928229739005690502799880493279577134328489903692393517132555018219801053108598233304597996986123316799572047474996651924491667795897924719679619583441883324497729486482358271146147603006996184924455e221"),
           e_float("-9.451688094139109711143388500424643809225367036436946455403120722977089409630106200921982258211860075924577138010490008491050313354368276749858643522274593907167686549488602346369616815659756574695376036518352756449271509950010272328146394274631208864800270105494038791844333444198137551388528623031570233098365658500401515846986521810988418505775128590849246754608255522802352296117292344569665297866e211"),
           e_float("-2.3880837657961933753488691094642916768224021028632796209567790928801299318873198657730707454816375583811825341244472259706903359026420411492659526196437462476972153415800437302201066404935897321255097865956213300754492846322145668839038697833282132648375363189228698123574247262354555727258061008367466290893785815587044687704959825097202962971314140248879746218789528134076514802744571816310921148016e222"),
           e_float("-2.5327832722801671041402691085398057378506986193374483368964149380002039962147358486048970937952774150347111728898416678240882272422111777451761135090645787368467936077476974103812012994453301349662000287369767124442969416916047436927487452417645407589212012208939168133436647196400776216760470049385187868257423687416866682948279346034081751883608170685007620834854831196544644739767625374683796240248e234"),
           e_float("-1.0927961339107287504693092333983507481106345386930326932873251839813601995979041394663731902388482281630792171959196369845303281821434165689322531530507018117710102847816575193318268654351801365455495919513549857159350053545948457749546549466381067269185329726847418258635117044276735230937856877421112080701137664868793773840310014664967959828515575797946157657027724519346984825592315049013793013643e249"),
           e_float("-8.1491668506315875810488700857282806031861180334496207115027463057500388570962267416663409261368257224804422689315616916373844484395989936032474578130680142935438152279836006773538921078336492489668442934863258400042145240592849575877406145404787130933973596075030954446578868113825244702893726388800311603724957558278916868106301677633827013184542961048069777341647073556066431267495429330431100658319e270"),
           e_float("-1.8539289748566779492730876398241461614278755101018036802747006165610353720402519921379537633639400348894722996962762126552292073516383066910733860815174922342354826637614151854939335042092958302438569613747352496558451351410949716123154486572669384029497601485138139207932192000357070160428748803373519940582076685788053781228243000549441784482078699889931162726482951490294343309480088413860641965844e372"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00673_legendre_qvm_vary_13(const bool b_write_output)
    {
      return TestCase_case_00673_legendre_qvm_vary_13().execute(b_write_output);
    }
  }
}
