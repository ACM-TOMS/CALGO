
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00633_legendre_qvu_vary_13 : public TestCaseReal
    {
    public:
      TestCase_case_00633_legendre_qvu_vary_13() { }
      virtual ~TestCase_case_00633_legendre_qvu_vary_13() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00633_legendre_qvu_vary_13");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +17  + sqrt_1_3;
          const e_float u  = +127 + sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-1.4369750133032600906960067153659659174629686007982320848953638727253068074479342348862541172750873905732970870032288408079508324145726752163536592937065626975181508665143111687223955046105804648044627485136866418381550998005952456340058550366897969010369441195036948089997249973313015193117737470329451342296141593117472191203445383772791431354582802502398174432154286481761411348505599654859473761399e373"),
           e_float("-2.7717828692380637401497904580955925956598945220079539255426074539549680669329799579334815815721289743206220298282591626471398523130093850229460930317012943595853707437864689602512752990200538675962271899271189547820376635434632888290032327094633353707728035758584282094745633655904133424353938804254495931926284930290385685963420846830633718206113801640124789182704066257774212918542165099109689754119e271"),
           e_float("-3.1071918610795077060482112683288420357019737292339692466093124862334323178922226119543071470947485067535524543025268079874721923759405746111359573581020345086424193464559427068907377893551821621835653222713764578107333253649952499692002973056582018231064187587564003120196039616899502262440213286508846169009526052635502140532877846390905996132522381177794149018546931509165881793083368490215503117912e249"),
           e_float("-6.384048800640994747406822834470588069252595928680763409000159357536704321391125952305313888514838420091050988392572387628291874698926233793579915424106041976136489026014845056436678648239185315587723524648749796580885415831486411940664684995758763594815211906341460849491599040185087368928140844793196639928561496788082968598025497776138090392797955414866804101574998649146849087178139536807406781443e234"),
           e_float("-5.4501220687459564685756607598376586716241630416140136761909846006208161259895719288716768917321249748812465842648186255433582691146171419777570975646292875832242459801706010671905596908596388888041688086803802604381020653884025969614001973249969236535324174742012380088871331110018123466426034602528097317234070687519792497618726752447106038560373167447533770400317395761364712914641251574077383328392e222"),
           e_float("-1.7216748812927151951281742731238165762447520643565302875370445868114998591293731240859449794543619396552330478948326451074278289003838683290326499759081030391367594206505219241537686834508956461634970036831527875501403330080671106242965608089284091035630422632664896492642161100507301899969197846882169895379678209306325530483169502974425146696870444961112507196035187662229447470256888020613117625383e212"),
           e_float("-3.7390110321765914429614464371825944236861618831731938968486710241855376092617409013459893562781069653466189877591781017832487244958884942154949704622227354721567443479546934853060347515540655573883016571507981004755975924999516451207172082215532551562937558883375354551597929974199294932220839635852797182369195481960988416848682356631002273948398892520967569594592978735008979422903602709162883724434e222"),
           e_float("-4.3797237189299836399434034602028350738882119659304691560365167023531765070757474478732868525525517707592108822009461935931614645595612274655852502710393604796691328362474231707954819255590515243758065964999194107825756644990897803282806658492293794616365062544666958113134561757884403180578101234948145949616238990129226104566243936796436472118323513020458042198373565945273913286973575140825244007246e234"),
           e_float("-2.13166319967192820748523008972677470245289340135159812316826665852452503435011666058740264431379917190646962782797621812223537987352723837643292333743383948059008747141109090194988735396131635068922383679363129217838193024131430090468177793264569364216957422987520469112314906112032041435967252640415689551894951710867590511468951436251615533659982203965288028754916965990825065788205998846301034668e249"),
           e_float("-1.9015586433027993098601427985644264863049295822695514056943629432652421869625174388512181408837320020049466939756360732140150669991624583535759160017378041098727772412261721106290772383759593847618914277938978138630639698156046421881873046213314753002051072085537940150669573728330360510346932714663660000562589939237665877276465357246476514163609073093997360581028924582793795222085865948548503905702e271"),
           e_float("-9.8582478702890060755404048726603393747185849012246098023072566500340911987242466603479337146349051255093040209778541318622938539578249269213817939078172302542252570619333968109734444683126812598048689520570836655985847269953144971370412020655084316528321897740759297722263917187823992064660756730011644182731890485390755625387662826830607542307981260472517567776949743485320098886022106993892403586578e372"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00633_legendre_qvu_vary_13(const bool b_write_output)
    {
      return TestCase_case_00633_legendre_qvu_vary_13().execute(b_write_output);
    }
  }
}
