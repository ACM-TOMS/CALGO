
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00623_legendre_qvu_vary_03 : public TestCaseReal
    {
    public:
      TestCase_case_00623_legendre_qvu_vary_03() { }
      virtual ~TestCase_case_00623_legendre_qvu_vary_03() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00623_legendre_qvu_vary_03");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +((10 - k) * 13) + sqrt_1_3;
          const e_float u  = -((10 - k) * 11) - sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-4.16373757762579757213646361254930546945301493248880945238477536241131377120388281972648166957081860945119429510398878000159546283205914914306158730851954301636579647747045423683084677904763821608096524560298256694461376578962157208752856671605984568445585962937223258865788862518761960102521922001042807509666971834595428579818400723138565529502620378295604778072501515079452752422817749676964964846e-136"),
           e_float("-5.4866739361098404281387242083407433568061521103707828998526202031122359704144256861705914515635723689460337010274321059159801059536948734968922451911588439004028629474929282245171471231927901816917687544099546942639470170688314281972056239965309714630421382791546815118330851003912105202105002280088494196934273428398101994327085598900138448350693675517828399041750042894316237564188295745544181946393e-191"),
           e_float("-1.9396535818249990242432336310743977971757859732792135462185256906832510708253828797096043628886085918758866069233990380872528335950088155721167512766486139214469809447685633401227215910238474030656419227723868986768339033900200169779070338555951367541866904272914117688146793101673492563654471074831877136944409360883703551175120810397832158845272162599223107201208413623886702301967447493835574488099e-173"),
           e_float("2.75487377520768970338821178908859859621343724347486742017596600344961453974066977027746772449597595014383836849603906867350799680698299723285349629459148810846212656307780815556809942815608427144654454788605321173402930532671840113206744962738809357317720865631231723498851084732221015634618440467211689416794102135560882808209993484332290289495457675521155809664572279208048369743406512025502449212e-150"),
           e_float("-4.4152818409587840339696142771745277433052866684324504203523645803593128871598187007109711077029732112996257113317079056865257028450766024495597083998616851088299229119728613442691887162441567188645612908480099325277199501902066333238045070672825893544896785301757294539701002982286811692860244515831084415667437377325930827929194148909318115934478149856856289582370607574595700413629887508274092096084e-123"),
           e_float("-4.8567553301645330475949288934673748987138143873432994642593203921390953385761390029900689156927593929423243026676547663579231316776875727293973815826685832255373134234143123895393867438244571403658435238516088072285444684798759309341983935020541288167303361634545548494115631334570518009558297454986928752258669512332838903521324960674098322062290826204940200745580713882133883806304418038353752672024e-101"),
           e_float("-4.1883584028083865701982160065347428250397050440531725694328863816858255680469866446882025615796927656405195569662349674550167341010660904085893316265953796611744437472879997675108228821412819990890839231375351907755613120319703041869439870694476171422613805431799746151206432500879718698931829292146046974031885392653055107497329491525381083433368988616673237841877184384660314404441094982280595624833e-75"),
           e_float("-1.3147434307276649207933731743077641666572414392591753239981034243027571837764992736652403706374622711959290296615137560962163921348657252036468675140471629639604916319391337478076869318198306144769581491331643725957531430379530204746578743293822002355852924477552344402056641932094798062226285977673549308875487226988157138101620435645225114036401067536881538247650959408586507212761186961069557241307e-52"),
           e_float("1.321091523580680631757792545770690325792672047664927322654583044539608093077457920813279090383503434286944713143492468145401263395320481326775774807517628854916136827559790095439483796040047403794772266913823821159372483775804452024627911926831570036379768726516071769510300104441888477933262913477429296446598998963854718012090696736128802459094269971832696428301624709129396527058346693847640811887e-31"),
           e_float("1.523712309198170529727041703230884327474776871577339890164940984741728363823211520387887192198383601300552916737405661242112531261922699242631221577936385881060845947723335838420458651009174827686629143047904061014750039354354011059171797941957757129240682209594046035498738208751573936257278743779897388557577797822685722668781922171453582345505121853399030519838336533610732730653177555241402029662e-12"),
           e_float("3.3063575529258261968930877442850520099825398923351310038418275231446130738160730737726909410739693607174395877535146200230861599032803849464773239360121458240310391457962438108235951654914966357488446791466291778660687248829060253542574706204794387614389725802663803593264721250847640759150867823015817506902484924713770622552743312000035335521661079537023277627151576102559731137576235558497172749826"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00623_legendre_qvu_vary_03(const bool b_write_output)
    {
      return TestCase_case_00623_legendre_qvu_vary_03().execute(b_write_output);
    }
  }
}
