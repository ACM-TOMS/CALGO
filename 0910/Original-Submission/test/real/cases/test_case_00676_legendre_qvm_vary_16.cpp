
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00676_legendre_qvm_vary_16 : public TestCaseReal
    {
    public:
      TestCase_case_00676_legendre_qvm_vary_16() { }
      virtual ~TestCase_case_00676_legendre_qvm_vary_16() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00676_legendre_qvm_vary_16");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -17  - sqrt_1_3;
          const INT32   m  = +127;
          data[k] = ef::legendre_q(v, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-4.4573056293869212904513926455692651657756432754762276590702244934469137778182832598349815618694624195401958001585570388372603844697501396466984306130201138355230186980287807345796536284262218126861567953106217748110945897520230478308780083599354157933370319196698327124299161189236206785972274623081999444729444277787881118584890814049149867766042257879468626538575557200742075735047027550989875444584e371"),
           e_float("-1.9052953606334726565427544094350731780888231537040001738026501658181715985661763578687288729267964140666968795102840420140472089865268812301080353717425735914707972673329538869551894432286378318037775462990357440684007503871527913664821470183642216385774089216640481793124315114869964240836378262243734871222918451815088328823906859807322937354390004991337590580663255168767377770624652473207131605168e270"),
           e_float("-2.4845039372193966012820717784908536178934727974732935781031333690846935795387790512218832470594236477790699984287653424951834971304448424596095457982664209795531291114217485896499333375240434330392400924703384255279583214270857707084210631386810519802228693902969556179840448888742901908426391497754703244625474712726320507148063853412203944376944893445212304539642371040049299287284589168330356979058e248"),
           e_float("-5.5993972735806714355064231239542349095147639498218002659260680702454056201855476508970421555999256889694931657725455470424599657758296272894711058391488815842854819386626237978750029306973306011770192306967980481752337008929540175900577638471926460106240136577740148974299831427530021733657762000952602177579002882329910981427134279494689953521657616987581506793773971710861826711847339158534547671209e233"),
           e_float("-5.1337701802702365652614006928408869352035655021079786855707789205068916108411120911406298098810240462639314155755292279624159262405779381565341719861166207962415873915451921758651537344569524609954900902260700361837645683350701099970464682813978546568753152875737014057456892205823612723694537173976082533912819854144476942265885500600717787331609205699303566322881676865601926326182481217359782214161e221"),
           e_float("-8.2240277412696174821123260616637881095744323397988573561235779087732653932381347629897010481182288054676031198514816076974573606071630872316418520108204025115899574876974526035797887327401726930301368609252467641939093578574613087807105111698150869496647812583364728006128137704306678793646236228985896643130819092963830256389121956101340354567857674812401651639651689141649758035766031335841654145685e211"),
           e_float("-2.1335723855348364855047988279080125395047045325481685209734297736212015055996796567665514034317094090296654936638554083661634535774001964173369124647596347287152714557975247511347052755699955447884659393287340278423501706233328773536917758369165877152336214175058242939441879324186430521997681519322973037156880056657737217864724909039311310129183637631976279590986498420714927530073929293310572274824e222"),
           e_float("-2.3270849646646841435730152176904281496629243138631630033853198130182689388251455110603502485497090383745388235504268599479459581365784174179677477015789872432761931560259809084753402953366531963277387333159492501238163227275847366332353638683539102337440992406007602678911801082655796987467726272038940264807015425826043555612228266301117873201156732468649828424689219193497649152106302356649455165112e234"),
           e_float("-1.0325489466933732409601766700354160792764205967139963013808433357218358072695977276711006281635723493000387656717135752850004126562706792569334047399737483145857149831818324295763768839447224222007868341253386141718770373923136983322170599984443920775180013113340301061117259900821364059151699691639174052688300564173761866195783942943568876733976434463279728153600506890607464149285875413660714588294e249"),
           e_float("-7.9183240094343934439490777651915601144063570244666755514048476208893737578165487706111325392932015976340970066142399821953529442294399228624149799406472593705405445417167457112376369384408784598711390517093375310401040767862863801523503244395170746354325820393062342885457757111971756841957239312406910935310591421695422700415595096663791043085315823060427216925925641560318376669751000804749755335969e270"),
           e_float("-1.8524366831411828599840071066063787115292787639487280450896756669040970936995929860530433550009070521752157507952529948259003350361923037412116951699192311886029552815638611224915667033008710141419032072889872442190198852194084309488064286108285661186348765949288273231395656235571942322146489986785296642485677886564991379582807275434176697834804684961290269220250472080516776044738560631296090962864e372"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00676_legendre_qvm_vary_16(const bool b_write_output)
    {
      return TestCase_case_00676_legendre_qvm_vary_16().execute(b_write_output);
    }
  }
}
