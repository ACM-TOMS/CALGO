
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00632_legendre_qvu_vary_12 : public TestCaseReal
    {
    public:
      TestCase_case_00632_legendre_qvu_vary_12() { }
      virtual ~TestCase_case_00632_legendre_qvu_vary_12() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00632_legendre_qvu_vary_12");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -127 - sqrt_1_3;
          const e_float u  = +17  + sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-3.0784931427511088752029533060674324537666668982127785868472466963688920447116861580001092554208689717181066622103774097957441875098873593564368254594398159116844402660664691810000907795125221506493008939194408252091048360020694534389161652556204752193242530600079495646644608711218033807873139904569583948637452496780806470403427150670073261487407464876643142175916213269934696395416039098334055499308e36"),
           e_float("6.7432894074938202091446756190733966986870650589497174525166390308599757676240200747545514695613190534923423248598312126236004883851310272971183896823454229394886708849523304895545274016580029321043443939362030299696626691675719172280824442936364875531862198668863691305527963311265532580665909443319576562263630688905877504171517610219663541606035980182562706113029273276931032653593183496621673458082e34"),
           e_float("-1.2922112336841553395308040357240409034299493657730399672029234563093357087875703070948408395735351339572838719202450272222848837882480397525085272034278631097942332496665987847085179167566436503051217789784140868142672474795914786017694821354962443995428786660155402051913735160129937386341539026878181822376308401167190006390052060870596719110729499864991264670715428840150441891112056033841758950882e35"),
           e_float("1.5765404814938484937776965426348861590151024196440950914056159160240025612618595527416665637161184126742823052076340385883849316793955374299656170703277264649610575334395404885340680379455725162566914727799512690229561489925766000823239846834968183025464332141266369535982826935891794786653556884117988351640511301988582920757067300706372476440786219807848781613980099516633202217222036390092351293359e35"),
           e_float("4.6233426336133472013800324406154443994530645369904731488449911961147714185508536317065340382471397383310822601568545935790929135625871165170451831179965144827584130920336802844648433107384851604361645498978187922247694478637950736881364568128370203449102531801415778993559980237905170250215738648454876774146195045367034361883327636084359766831898432729086732792747685557158198535224462721951174805629e34"),
           e_float("1.6939794760440043503746218503744157558782310057885779995468799655779098603929241070922576668804930193600189407690006729248265877661294305358080512971363083187826334543050343409283681718815558419389797748417062536024565993953679627598163980276004883419666163824572978355999770415843377061240099792067506653565375256895004365032683102075830969813286809264703572114090984856477793506622070559418829396013e34"),
           e_float("1.4944821789882452447216187227074426790448208252398509352149299502092453597067872212483401773794117470218250554733372786453132553071719148774128466952849950614302974423150490409658921570160747146085746732360208538063475231933454012348559226259960430436264896994861787191509216627864324070965146224688810023053539256781592282470198849500430776037457755731408386754522429773866915968198204945794655640006e35"),
           e_float("1.9682641531541585167893647160331889671592305757516116944241175190902803168531364805750632463304394845133349618222764193664690651653467232817103651407911484863191711917565847950536469845694998730766371301033384476887981165795428387756039608756753340255009584547353120594635027071210399781834501590410182175582486751208095405096311222983934919712650618303500175781663816991930421529073262316458324076862e34"),
           e_float("9.4232686200886154261840167937820064096310440503403565506697438135962310044179008440134150305566875940817554985696801007506271035838997614960881566164552795544264072093226033473571774680182604474422969017759181927070554016886366178653458070763845527262864733326333055968835891749090373452976395894409282549810568257558724198545084804057986323459769849347262206720498127597678901408326615560049474421629e34"),
           e_float("-1.7509919312588766176373523337997423369928943879891446065140845185875254306664600589058217838616470058286503696227267183337854606250819876588769758543432470609380119630823293783622810166477258416683023660303616590754192186269485185399293869651065726943393965002116071874711469438571866664071779395652235706520684494687444155792030888266054971737656033591952065459869071375154303387220663745604953139394e35"),
           e_float("-2.1552865787533339491452666505416746847422251050954081682757697795291612776987395166461371011180240550205584883719024045079517124465668885274370014193389667032045670080928280086053634315989628297950507192783113513286259147865292486415882255599062598783441424913416721565380849470610832356106116792693692167217866606451440780339843822696112108408247753598101851736564873263279777819188454374422223050958e36"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00632_legendre_qvu_vary_12(const bool b_write_output)
    {
      return TestCase_case_00632_legendre_qvu_vary_12().execute(b_write_output);
    }
  }
}
