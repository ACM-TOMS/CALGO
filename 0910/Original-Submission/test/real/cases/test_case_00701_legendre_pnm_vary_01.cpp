
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00701_legendre_pnm_vary_01 : public TestCaseReal
    {
    public:
      TestCase_case_00701_legendre_pnm_vary_01() { }
      virtual ~TestCase_case_00701_legendre_pnm_vary_01() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00701_legendre_pnm_vary_01");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const INT32   n  = +((10 - k) * 13);
          const INT32   m  = +((10 - k) * 11);
          data[k] = ef::legendre_p(n, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.6429382449432649468714488896113008364842047207257311527412768721273158631065981439082874345702199151805224995226626077612348676062149707754492620199260902817091667659677431680160403455147605102490458798604142054305613136888620587853637485109076536966380940621980617778867379503279551740186280020563035040158030197461033160821052400339347803286555411665983251914243915456550983631576982857539478263873e132"),
           e_float("-9.9102994252294529219253974136040581481020390217285819390262620986726309280828204093246870145078302083242403931583363634331068896264653152587753018216910722973953478293490785920918602977900392336848892714987779544002923785897764073426567126850663952425021950524917468816140111509751988122956100250281590718405469754072728241480649162801418369693186604277437226359227515527173556896368688038784264845976e186"),
           e_float("7.5877855559762164303611481764200560704690821033494862102457092872870578462816003899545104364670543354632344026992980980191314909500169870549000737244870477602056033150505295147427256645626675482327380379096959959439700189079024294513685796230714910143101732758664543241617313209372875856564037504734611367509113626397388374991637466042300056514240237849021247602669840402134423008288902086324478339211e169"),
           e_float("6.9498553807782535272950214759950716993930010732656044933333800197120951922261210744235250431501125762234458097345925419217988641969104838467192529787822812920600425666675157336558406287884174085108853643976653526263956174546801107632423037850643639050437011967793629122468164347222029652295158194172203341231837027960435661015105893872799386995958879113861995788142743092631551656374213781453683697998e144"),
           e_float("-1.3803394925806985329555963100295150673961818107527170761108620371891937983214790313708115383520784182102942953641208535113577078923433455071716254596457070303679568666957141232644613428152941827651268359075942961507448517915826398053582754325616077511956911526089219867124747932321901448697271254126274491696718773146495649200787699164122677680422753170552367297401069823691236168410503052890445282772e119"),
           e_float("1.7777507661518886400290682082708226738239072337957835422334187389076184571694410125437176644677397333666173519269168687834154022272420101146659639096574604398153599170109171775287997410909915645892340097413216818475925342537528264629775450744707445040782392790674676665193059027955707623316835363198292118332657581669903149227943958871824928197649034563807993704108129446705510430522515015600101417104e95"),
           e_float("5.5088533215861475927506058162631416828612261865637550298466837656735107993157325110265743573687242237561541036513075565893277271227828687920387698950873699634828920002862923627366608262914028432439719926901560612525787737288695504537928003045838377106719845053040859843574669272914739410150604239449874589795262881483151702415694717466957412746761052699585272749369984367798934823176202622151287587251e71"),
           e_float("-1.9357343916517419569800345450083867028872088343062336339107896950148475348249125147220590955746156874887813280024141800778242272199644330516272022849514642395936496950834047202701546934785103605659641408893745285082595818524971199222623597060168038148081544330511895428471241464854192625297281360365043834616960102649992579982414674610102259470114111885724326944255170712478034379377527002543507274153e49"),
           e_float("8.6945197641256061121900086819249576173914476002209440128337060923786566943994524293482648372159250231408717818855202513147183376790568760294009191479363613884425617581977000409042015456238553263069582590121439294116369341142186525334423712521623949589114075828399142222858915490811768321583926003709883643026795296234683947285501006322532806390053654840835820264715261595483455323744119131963798013835e28"),
           e_float("-9.7344360577614692477342648860528862892165502479970183821067385388516430152689423805758775693107075073099407899227762928476823859367907973664142279305540857004940585914256250705848719667836402351658077994059464265078986095427038847565227449376016335768755257035674990948669282474454217966526182124445723124602121196478617872251547371198184999694304072071740340618360032941240958989927529835222083153564e9"),
           e_float("1."),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00701_legendre_pnm_vary_01(const bool b_write_output)
    {
      return TestCase_case_00701_legendre_pnm_vary_01().execute(b_write_output);
    }
  }
}
