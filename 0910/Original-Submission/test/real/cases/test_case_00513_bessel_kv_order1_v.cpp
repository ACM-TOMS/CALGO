
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00513_bessel_kv_order1_v : public TestCaseReal
    {
    public:
      TestCase_case_00513_bessel_kv_order1_v() { }
      virtual ~TestCase_case_00513_bessel_kv_order1_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00513_bessel_kv_order1_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_k(ef::euler_gamma() + 10, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("4425.7194993281394098938825215520527934069872909153391370207594626847925880288558758588562180115118189328550800223749773839224798748346456966056352473199889754416921862117266610714703730833968458253866097232369127488453682159050941363702416277411142148661542328173777912879090475153743780292236013769697508451731058370944692164819875029678509648017825757483257392225591422341783358469830547604021447519"),
           e_float("198.18698281339740328532074312351669451398793036355986945654544532881984994198966202601697947518273617732752263443102332674712566572868270097191581514981304710634562911624124612329627041360721416631751563505543601357546669859629771779013424049357752587171589039007106616176003865306522128535291223611442359476773854718664371919289281496679224560479898411506720902684191864576989763176078459678389111556"),
           e_float("1.8584807438060095663936329033494388893623079576673386240454998572467503732169199583643718421373469784680515190217110144747152794203295414643311598534764618930133424274473468505852480841026199679793768216792756355529853287444600218797685905345030013727280658579053700535605763186726321291126166550671873709416690114222152768363991811655122156281592231464649774562709847081588881129791244764176212702379e-58"),
           e_float("1.8727534878421120368797803321426732072515921125106542730619998685413307593004977839490565917155591781776693997035663842185326754900778315299876224958481804824604877815715063016336697072053914742925888788319650873644818948047781358606816518448745699263856333125905098968686578916726358149384548171625369049159063146674101481978495375316797015557612459697223347555952931472396734491625303854740054044706e-953"),
           e_float("1.4032001348070419293210276678429036013394567694082781198223627832768940985198295384304397359039822068500298762921221608584666990081891896772340857163355871618980757013930623314322804005375933127465109493848846977937581860804006613895074642637998040228508478788582836557620295854009225949890097729715289830115512201426970394812256155248652572452471938007540332419390710454992748691688535765530267977531e-7119"),
           e_float("1.0744628360970593862512648591798016833538832711013809840683184693228689372489219710944583742199692713516876140780019667360061584701519301178669899686544994357411757117151795373203973047878305102411165242103714453722453716166397307208841238580664549761010407995716619869977854286080755358384955982962578645546761037269185604786036775373090287105788740115779184926705926947745506250512870831367587779459e-33933"),
           e_float("2.2395063147685286784182795853870299504516708232224386308073586150530771214613197339589297681050245579964837949634244072197711596294231944703821529759110086442892467375333533305950163384575989947845119314125232262050572664512478398932802903760483011894363128659036578960251544883391056561679309688208107979224865330683362597662202031733414615636404354650176925157389789569336676329712562297440559042053e-121579"),
           e_float("3.9387552924119682878551895107231467077654934110526207558773235680168700347227981689526202464684430466046842418867371526793959322673190897041845143327085294863538556066964130040642628893954518573477099258953958699472066985930328207181627521856810629486408096538719857957617517112918270704727603715225312891857548715921244897777761786802232734361715086307721125849283586051263800945581335357283186716396e-357665"),
           e_float("1.0753937171901868720274507373221603561657817799538457553933574077955117477362102069242839733712628376380818098635648284730513524780751695905921584000057297645274482866368965702802901233591347494622976724448038594156312521381173109292999247956008241250362805319986214519304629169629292803694579743615310941479733264507652369644442844405334389407139257135921557992975708352964664374785815449406077843252e-910786"),
           e_float("2.2388521394636925630505890354827633373408797907410278828784387576858492370733592465317513853650029866504625337407405154422634415010409038088090251707966974787676461277461095053199233415795690561489215705736879073307598580677975356993149891813388608537850070668729344160081182917018730553485518845177488554493271772169249119295150202240218669742270195638656661999276001358711195030263506973217555026525e-2077222"),
           e_float("2.5980853985044850136672260132170134736261135591229918836591907037915687499998882978372204984770289519018969817604701423610948321005921853753121108304518053173057330309482854885931002050998170518487501770314196679993269994961034884531929098098112316506686617284609150831788713231409763499170840068605460016546691210663339320898514360230112179127771548457858112842603050826299705976368713264338202157901e-4342950"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00513_bessel_kv_order1_v(const bool b_write_output)
    {
      return TestCase_case_00513_bessel_kv_order1_v().execute(b_write_output);
    }
  }
}
