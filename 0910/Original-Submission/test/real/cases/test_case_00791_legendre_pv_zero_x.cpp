
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00791_legendre_pv_zero_x : public TestCaseReal
    {
    public:
      TestCase_case_00791_legendre_pv_zero_x() { }
      virtual ~TestCase_case_00791_legendre_pv_zero_x() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00791_legendre_pv_zero_x");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float v = (ef::pi() / 4) * (k + 1);
          data[k] = ef::legendre_p(v * v, ef::zero());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("0.41161872270589653880239920107063695303696137243322006384904837827905334729632444839830275073220113246269857640502802097295360566107104961230662895255186183260076415182825914441435794683934154339778116866300361440654310281305838446873492345228644217806675671928046434822840014552395838908107824135135538641008708684724918303815828579264669455952460138535873617173883467331020628543542373345682507822639"),
           e_float("-0.34156547762426434160345671955855520828434992882322446674816741377944598641803676225622921387488122433063918111271534561728051972889840185595881494980465253175211349553343530200643738619897347920712335281777518698820208067874454081727967742215956176716391026816856613415475001984289268653666435093577502795835759772265111527434022519370656975422301051546525935155274902037516883079795836291108241049674"),
           e_float("-0.24676281318901814136138176658540450236178153785501263319486729021284537189391385783287925957248882122384800685288699968691723820724968488957929547611010816706628847670479366613400760563065430428823243716570818414699191307822038456121251088053254937893818749062824498333710405759982278485812076755390018198561009020795401059225252301467288902961599254026202598876612844072267964730079697447121211331558"),
           e_float("-0.24245632860107004503865137450431603943689858348139310119305406482788853813611246183340081027244568708598240567619087495346466327125356558018002275180899589453093499904602114606696762313521319261141406774544208797398377633899193236803540013715088089571563462077125792171415829504813286728337544909331707755909609256933706562458679313736186173181305789892999046270154365736241894084345916142385404740017"),
           e_float("0.12284071228997810716274916823507434100881124294284320973676600041914917016425915009927008351018559186325521916162818055135117173542620494624053210188733526304832648678685142511314947310209351704398161598826411974301244016824230561696871149653029354118580349818838062320782721716838242883597431337966601491125496294992510347662735922300991569535447033116226662731235723629725503835423524097744397406517"),
           e_float("-0.15868160683920332361091233600156668520684094688060359315109839586025111529289564467861452279925086317337033622667202913889236540567561003216274707432956801969583052503942365601992732808022235109929717942088082436205092776805516694076045693066777617474143667894676255164096002579584350490307709287973926227832448851358241938356397229694714915461166669260241529295268451493943621943172391746521099994698"),
           e_float("-0.13498479918034018718703487943368201485204858296357270142226482357259162994299750958440076560324168219606420711280986190951787595199243127886849145424740744535887934831470305444767394672192670771143634931734264171154663252644205060597227361317693697324713620216683737261990561273892565962566544283113676281866116916292841715191035593511357344630775272322158119025487607049022704207933869344938817074983"),
           e_float("0.086151176759071482718596566758867719468151790929423568169916079202006476127030254407217382345426324109655736526508168014437724869010887560860963642574240654436899844949381488612831521458725778832983729685854432656091715479794979412246575636112094409606746750595873651873185830435923969107268584854119989549235671684054534672611669551750044812414693210327244423946159994578116009799060429709001532209107"),
           e_float("-0.11214330212907850402976537130086250071767339637771526968986486833341354778041575337618406967851143552301950088547009419429834715204424134040634344908927378528323528468561263728623723884603405555501281054459210294167804264233904948128567611204897591819875341636472776718158284640231277834595062730868072389708345243120870729567932566022708147255304828313612424273403793943375592568859325049428186139363"),
           e_float("-0.089045948061116218934460350640636235713603118591731919100078791756936120749983551244261775837703010436365856075580562658890766180677024233091946716215035274311570914113091567758807374058526620355645006440696902502541903886158075044768721148073028032895428146730396890093781759184300913584263512183623067252093588217573838743887492676247508209198651774477800055468064719057385067587096138839388577570352"),
           e_float("-0.04945673167160058936447094913155514266908096977069688372420899682138731874233933732648739824091287316693332617224071767342132667387307274044570775435562482890244595777452516862813776825276035753973108051814919813831720162979274644713692321334052431672079421930594333572984404598361544462329953841621835158637353629521672056711902872362772343750296961530353604043380872101099428649821495029599657994995"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00791_legendre_pv_zero_x(const bool b_write_output)
    {
      return TestCase_case_00791_legendre_pv_zero_x().execute(b_write_output);
    }
  }
}
