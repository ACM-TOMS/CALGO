
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00834_laguerre_vary4_mpx : public TestCaseReal
    {
    public:
      TestCase_case_00834_laguerre_vary4_mpx() { }
      virtual ~TestCase_case_00834_laguerre_vary4_mpx() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00834_laguerre_vary4_mpx");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float ak = +ef::third()   + static_cast<INT32>(100 - (10 * k));
          const e_float bk = -ef::quarter() - static_cast<INT32>(0   + (10 * k));
          data[k] = ef::laguerre(ak, bk, ef::euler_gamma() + (100 * k));
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-0.093147721202059672792802188844227795624404618751153697358113066030944651530878340894575864936466541589553812233712128482057992209097474835499561682741136930561023577008867797460355957510763193880685560525275108440408335345613204636438708647754239120870092589071598590807080174212385850098626589474202855536295365439933539363044052197930043265351637237244640274841633414820479148675434785773222997186471"),
           e_float("-1.0041366946175518827219489809585737185587134607819691998521298587360315793828453969334389636053223282618286927711160424679030922039365545878153511844921559042123445265310414208525001214667707800249838694208586470429694105595719174932393217733997491336295580096302701198872268280574362490724417638020543803007394202728833837964060075061736301544529615647393149916406804193323614112863673552820226864383e21"),
           e_float("1.1315870593181300911947582785956296188518709813173943822939727857824089609611152818422831217313228841855290492782818736988515327994938654268972822608794117126662611113818305744555308351335926847750306106953199576190852231272051255746696222699610369317528702476603469253106708193603635844540770745915825594351892040995705370249641140091517860580801336735161610226632210747174678957160317594913980751368e46"),
           e_float("-4.9355768064348702804954031285615500139901825106103378076640285975157810873909895729848801043995603424909913294632079128641503949561301652470216143521680596025344465101528981761097298889076060821986115610590553785511025901089753511625484414926303629652691329292665644377600752678827542163608180628249795181928252045236746055920087278362564993037596560226174490763563223461133039289347779012081203399352e81"),
           e_float("-4.0735332499302670360064474756703382017620468340995767703336930364325794586514076393546589766477348236255715112309991721371108975947638718614344710984431920478367306186602653700782370396371276413782419128964879352211994664366523727501880504786638288702266729094422216797384413039237665093687667388232367717905973268773553985228953642394323267200768431636222362482205064935132458430545175927565302060594e138"),
           e_float("-8.8389616227333126209890166781919826660330440223964296429593006165071579596776337599191507196629894881194142172463560602752171261102257628426571268461633740383661319797532659815693382701286598484048939567773207417339982769960966823253922670421481526156128615683845161983898078615135456869096817828252768890551000105574202923835109532671717340371705856721530936691912190990798747001810205660812901445572e213"),
           e_float("2.2867047758791459865029158143670404953575551753256119400945278341444151963564258846721193466851219709649684480116919676270615731136311228366558315668763098538300901412983363304915862524836531802152450743142896293668104407517351174164186616904787712655936797109685139567527090219374566386101926077898618079426931751541616026821079543616540352401806625872397090467362525869371800683274792637358806784722e296"),
           e_float("3.8786297345545954029642509760465709058134625539924383901065332056575921926618058675483632110570464818268165847415877124516715822365663590182086026527461164661227953642209092568371192189628516532400484591519867326765373744427997908195941760584848722557384574149366336831673335844932466624659978396268832773658029901831682164894199078320623376043296540077749110955934045087073147078802451829500617763759e368"),
           e_float("4.0660318791675142330875639110648597276121328917518671215163872777750414677249927691916237257770054500196200184095118901137899632964108992789178515944092582276047115016336696610475997824443325862554204967661243550670665325467357120674522798323330525118007121995399181387390831608922763304189274464314870508801885129299977584843433477807008340970789263250548477164825887290151406227379256225524958223991e438"),
           e_float("3.9078413522606429951298718114548247835899516893752476231013815882827447302916369189821563103070536605457225477799823712893824199688439583721340941188578689949841764266649320662425472669544639011887239938746737114452280741342364309132091425071108432743875136742513011117524285464494516117087143091896262084361581539343661266415854151148825091602626636529267019802142476341275500599217178077041449985452e507"),
           e_float("9.6896685515449074356464247242434455250407783388760628005416002435859038151057176413745576165152586930962757276720216623505813036730452665515816714589756833871831067855659269025456206443509684056466204450552333815620680398204040058617324153859557074309760879313138313854741595158648984032303771310924651743784753563185224718797678656379849591240488384585594080604829312277624382101042790084810541479329e575"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00834_laguerre_vary4_mpx(const bool b_write_output)
    {
      return TestCase_case_00834_laguerre_vary4_mpx().execute(b_write_output);
    }
  }
}
