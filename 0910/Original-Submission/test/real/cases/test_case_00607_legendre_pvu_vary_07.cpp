
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00607_legendre_pvu_vary_07 : public TestCaseReal
    {
    public:
      TestCase_case_00607_legendre_pvu_vary_07() { }
      virtual ~TestCase_case_00607_legendre_pvu_vary_07() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00607_legendre_pvu_vary_07");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +127 + sqrt_1_3;
          const e_float u  = -127 - sqrt_1_5;
          data[k] = ef::legendre_p(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-5.3428024261756738807585248066668370680633889648492209814003885717094185678267597800207919071690685070808603859711705983291609290491099839694576259559843549028183782977659918237265488453615308166089861325919185027272646617289294374907667442374917942048514249106628171674869009137097698363888518123818536847494378415107074858644912591603184389820950710711360128975923910452228119298771459673262860059819e-132"),
           e_float("-7.2744901917642685898772516766514338678735528606741344550567384775927216907284159223869998193610458362676344249448033016727833241151319360228056001578433522594775038487091612571497431355338136463798884032315802908854783997211582052202553794556952079376794814847105724750078876960009729251656998653895850241599334119893211708987394472421038315095104460851426770174716761057435048642394437971556337991826e-228"),
           e_float("-3.0603928354765030896926300697735059915516272487815684929532377337657951314498164688090154036188402997616765133182575079255334767147104886183837485199665821740687828328646760528966068571609566935851589229153718172477274175952816932694996965340558024152945445422682561472942412804178903713335084260509365415155963579228780990811498309753506344019481158449974054451644818277639555460763467783885556984535e-243"),
           e_float("-2.0673543535088716215438001796610980347942514750734319134803957466871312629155532686806175488461528902575490094490574017908448694267086528319548237893933010982828098038559597727039063439074154476345050341464508690250403067532743991825632052953130847105729329689652115373098467090285092917044950755413446722805803243360931854814590933032885376820287862808526494728254304855721049593720442549467512659049e-250"),
           e_float("-1.2085771083257423134465752628568778796317287637377101450928466650090459851870385093316490781049759981429483728280858851716075593366205341611049397399436335432032551603543631996982061931799605641626749999933837016526233747617063416729432955819864933177959484380677378669879818130910341046239043320475909530306205311383356878299941752585215485482505139283612743695083145456672457417990829491296627279544e-253"),
           e_float("1.0523443381242750769982160720537827914983371122224289954716655375344254667059643689132827395081188179913510350345644767391182347261285536169686832987458933104451797014084700811725249113541765937783542467243618112856670913195876889465632221777289727151386007169867719356051657746405009072437854710361485419553870316005397999161406740393075898194904786129670970998821959052626351888366928045011905170336e-253"),
           e_float("1.1455331873267349574210036527033212963781547759478913487949895536181277023687606978992164743476121459794124230988869873357104729007676458140732173210773759885098841734611180635614898711093875362427962288633169034427565431256272445021134607988462051947932126829025432084081068340011464479503424340620333640765529759034470908666036171367819767421510521186741102719622492304553846154984833984067563960281e-254"),
           e_float("3.0689598061997995506115057711256381645212734850908264995567287621020670581527428622527865005197674357584249643273692464187354265774065976702748793209513583827487465578036403739340253365131957261923760960693447962958460424465123086736528259612237703150402029630971339984205932197600715578224897762646426025801651814468863576869560514148129585877253891616929452258485764131029278079900907095766928407197e-258"),
           e_float("1.3489378448323676376216376415724686717854543102273993485749946619809003997737692490436066894885218281290561919647938230327814557482243891673278980434211094391928135638090009345892081556399365630764038718237743469539950080503420763572082213521017881126280344652660618428855505260658664890079350016703549778726007113348781730915556417613453008678473316071428175918279145752969691303303742861275976277177e-265"),
           e_float("4.2190177489660097442402762169706802349147373052715040012263320151180800520149245760304891517146025212333311074267563911700813002979277086187540201570403480429199159227220614753857664142982772844966028021191847649998885964376927876929037495680109426162889205078996691068872184945533317600951293256045366259002990343757306504651002559411705244069814385134596613839227708813152722769963228118626738965912e-281"),
           e_float("4.5756834923060847547672628116103589402481611729524822298110898380105770712583015601042508611385466610245737631837443603935287985817372551567206330055279870204731477069413263019966005127860954841003929565369288284093846292872306944053213321924518689207138307016196183954663704762039203276532936640957997436001374729416556757457276742575173691808976166282497672891523962852667278629051222089523144713555e-377"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00607_legendre_pvu_vary_07(const bool b_write_output)
    {
      return TestCase_case_00607_legendre_pvu_vary_07().execute(b_write_output);
    }
  }
}
