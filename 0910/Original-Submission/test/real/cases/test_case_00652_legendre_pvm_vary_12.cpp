
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00652_legendre_pvm_vary_12 : public TestCaseReal
    {
    public:
      TestCase_case_00652_legendre_pvm_vary_12() { }
      virtual ~TestCase_case_00652_legendre_pvm_vary_12() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00652_legendre_pvm_vary_12");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -127 - sqrt_1_3;
          const INT32   m  = +17;
          data[k] = ef::legendre_p(v, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-6.9919630277045388070802345731340396247459281251605909034911048867225280322429419518828053575215315843138749654348553346789181624637336935535716203068121872006263899756800451921556278136283128029261008190496267230036664099970930336215336455689586270884162977294259187474831937801986280613512912756405477345642424149749911634037181700865599158081134874595951798632635371119605515998295243181376223888356e35"),
           e_float("1.0406805756627037977801984668994345059269854800320404784934695719120146397626304454172605008152258534174665063135047752713378468923490477275229951955109892175465627185326548825447658567950557692567878510081563134728730600552738059641066874081888516646536454370817728808458906128263017824950649400320949817393627632142909933615168600142883705468861310047629785901072376662586990305452223093214595011872e34"),
           e_float("-3.0527514036062195851924517705489506678273722860507123230194222104529476136293803649764353409321468474524056591405767809200459906838696330788908152324043274944983013731731372027733918683229133651768604621242810364635858138592652005017467715366152007394877063101299071962166348341180547346308603989006729627678003356217354263991024637079394608560224848103631616297312921795634488610045902773746716583507e34"),
           e_float("4.1337510321068585596169005974701089485386182240208331539000704738795719386350538413659939551690956658930691175888968438853681826192340940476230371473333422149674321811965320944623644733028116806150020012895963187438343661229710758677490358027701609062126096904469660081639588706616274393174432203349416539061495103960154656780778461949857658449821880583973770742288140457607190929289807457555266743259e34"),
           e_float("1.5172771637552832329081637939755311059016964995264003398044569700499323194800642661299456962002418184031003563366423872731867639471676188291612030654478922554504515430354047158959071891736315412581488423116923864622599932444625247969459953554814582297694521315656117808635431119748775158645522034844673754093448263751558286571375487528757159813803307602512248911190086247843406652634789927373008199208e34"),
           e_float("7.108291847750937751298123876396711182861804678580921415790330192320010207390676236343214554407621773710713529408666547827157618528163354232538637542362550591343465193547842938776274235955699000429464034078317948473923456750092883524082688394856046364535958450152324647907573548671029916401632319789691722197192055254200439866864762650407520035351984630825768646887985197471046452231534154981039303071e33"),
           e_float("3.9680001109839668394653456328526185635424019511461668827304573262498122635148881322211881492146469854017030617564454285047011802019426721053716127281975330132791809819306030684528005240649683330391464910843638590833831601999714790181718301551190533632691336043494615659995378803199936940359266561432915290485997262487712005800566596428701326825850380366987670533236897299754322348198071465120403112592e34"),
           e_float("6.8840026983449199000419510672805453667787367059510144624548862208686593536323619720811131589165296702283928035611201701314479784821290591993172095860227904219170556705481253771080464856472836266103267899485046347539460812667647015174751187965054457059189593241348100356600402369288234272884468643818831180359132359161103681408810738604079310496520161305260585697909086734210964826320190809385551467959e33"),
           e_float("2.3933189833628425616879119562614110014214001490716132800417832068591597171547805263880601473328518998075158796516734073189734596909700850676158269560954420752707401291436396174219418081183813597890957219574159435927199517185536081869923453033658234227847377885267266166755269628361371119467575037333091709957634479372341562016408006128302686353601755090607700231134756262623301980603518582279532548522e34"),
           e_float("-4.6300106882925435979000973752623046731567235023080445751223398499675143743194268447426651557694222950066307857456641671806316178410907516211965697189808323161325207598968263072287176572040101592968912965346110278173411521833497186359874335247184828776828541476883556111702900202083007826490207094079476746528565145321671856264126595178552127347226998326030905439073938905143548527688845104841909742762e34"),
           e_float("-1.4049624189071718986977951122157528379379244767911646963343407801634836267702985477786121072344979270650026829777787105424819600874822797826096122914921976321188797844919110950666161174929560127398722307406984949121462076956390970049075780856688479410551696704274564480933292625811337300980552757491075280027511828885133871619807754643323920513618118735357915565530404214163019186128943680205805212529e34"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00652_legendre_pvm_vary_12(const bool b_write_output)
    {
      return TestCase_case_00652_legendre_pvm_vary_12().execute(b_write_output);
    }
  }
}
