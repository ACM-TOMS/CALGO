
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00729_legendre_qnm_vary_09 : public TestCaseReal
    {
    public:
      TestCase_case_00729_legendre_qnm_vary_09() { }
      virtual ~TestCase_case_00729_legendre_qnm_vary_09() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00729_legendre_qnm_vary_09");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float x  = +(k + ef::euler_gamma()) / 11;
          const INT32   n  = +61;
          const INT32   m  = +13;
          data[k] = ef::legendre_q(n, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("3.7353706801521579849681563670297597141196383402852928311133457363357991828623868498986762913334314124176647551887330484559562496481981611590091422187910237276375725590431230549802965835591554482144313470230358834998190499408556340120311733921166427052272037294353055514172921860418843483424614722161813830499307722151226733521374043729632957980089986092894867149487888388580152802074109383462424943944e20"),
           e_float("-1.8606750051656009054689807627507412807546794225918196933457123616070274502115762870961821291148537478874585713006655251922728801045703567041449994184162767450866558269806795404930752105492291177620424224402867575680821452650409371926007689097045908227645973163443183481303925830508470321178268863390441098450557117107078945055936235484923946898762591213228189510231141298204261501652467097431353982908e22"),
           e_float("-2.6710257755805677563101680308401525795638282186702368219076562400260417705902916432311530872004651619442708357734614484721732669715639506895632584855252425479777246535403173653717573145407945413578111998555684279477428122789106968727962804204748845076335994191186203531063024345032959288204335609270467353209830059763235568678477008343840230383825210280904906488393496120301209287833289602884032012564e22"),
           e_float("-2.3481056417751604326720574041015037501745760998791339487477803608016687058803167071454945399730158658279762483967791810992953683161842929017399206369956145717703337129941738864018824927919337169326054176845188199355399004350660378200023730045721666337525559809623432158157592656229415632764467588684456798890660947885494899182274736833842127225098067307945864274453848331343997610472403867057849692429e22"),
           e_float("-1.6240593731092526916747953183600096134535230596277305640758696728691241656515823676255172386215212087841610492353399630991608514628111281185289595722428482911001486950890077767211266753852944990242735066014997390626058862116410148545979081136927526781350477025462202584689088293325269979665297860679603583134286925466340018441776412487257461132135648469096404260644863888692270685742254443204493311683e22"),
           e_float("-1.2871008449415172709816832707709808908200617776092750997455232298820349758281975042865734511890145788660360394641144949272102912179127585161914819217150570358588685153096241233433495742119155853669421908163329403674659721742316973275753121709884709066678189953423938339642964853237424928596041059592534114819444224495664654026606209067759714325622717051458194931093088636233712355091464005726895696036e22"),
           e_float("-1.86555908821217282290229065819437467634032920295219674454332031963520524960027984586525503678430534681339599755116404455139911345954487216158943066762505739158281495410994121277647016059721994463533482046081684443808058887766642578730518292686137380926817677362157976201534679265149513743225062108198455114730695362442754043566089262269063576601623328232139436677072124043121289240750114675713877777e22"),
           e_float("-3.1007801396341905707189485678279840850208503407610162863072009254737221973347816068418894383531176392650567881692517346120604253743747292124253581212788271366869297384271226291070807603371624604225555886482959467213529579654864953496940147263232874765223769787916854307061180219200197813291877013886106406619738762748821400760356071128427899147903102924756432275259528439554294041449060593675588797792e22"),
           e_float("-5.0107478067141382573507275303070305632325477856186508247448262606043939619900536036484720743819775896767594457476103531864518019546663550118293004084713749068386660120412604500208386311742004636639737862679997819764565202061457752163866277213026423162867150651947366013898850328833515056633026013839244928744196244778262107723512617607518148664878505069747421785024162504820264417369579985115992750334e21"),
           e_float("1.3062816696134873493611246274994857114391558196815581810530236093473900578120642856723092570489471257931339206141623913503973905369525977410073846091723694585423814983560881686969953462466354271789016924283014133367183657531816004046303596277446571884456079606081348502640451710177852122135894758069240000962114054574457490615239499538309739988193913072463207943813191676966785104582200955378788144657e22"),
           e_float("5.2578287998580621261219421522197966409941562987051721867505577548854948314231653807033506429563733279688524636007633864975649980182543061452945849912054258053994363134154094567895017985549256455177756146559176459584025468832851395144717850839407331860202350570003476094363473350002891283121736161766278585361537387276360039901740649551391222122150977754540427533974508536290484275082567785119086087342e22"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00729_legendre_qnm_vary_09(const bool b_write_output)
    {
      return TestCase_case_00729_legendre_qnm_vary_09().execute(b_write_output);
    }
  }
}
