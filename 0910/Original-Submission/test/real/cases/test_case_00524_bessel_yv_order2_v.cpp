
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00524_bessel_yv_order2_v : public TestCaseReal
    {
    public:
      TestCase_case_00524_bessel_yv_order2_v() { }
      virtual ~TestCase_case_00524_bessel_yv_order2_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00524_bessel_yv_order2_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_y(ef::euler_gamma() + 100, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-8.1719706414368909995212253246737474056660969582906647281728129209644389662290854435541173124203517975645246734266982092475900571207660961276293771699986950268507238551198021553190552735939848159759804392630839822899233503118298887842074057932851768685815977156022378579107378783029600364919922795937447013896731705390775282429710741363466151579890705753714132355201661661140465365066468504160353076944e136"),
           e_float("-7.0671424587290395211245087426319180159681428084028689306179171587224651073537824134063147850212266789607285936883352918510193367565949692451963192515057074122407589187578177883436603493297151822104789072482174928498455549143204370645637096562334450649944848250093458300831281713888494660439682615618948945628592836710025425413505545735572767835552775540645258263351667021366686052067923207698684015731e124"),
           e_float("0.057559059088734325041586052116653270668161165330214409811020557230438603000133643079492896555147466169543999414759183944342311674939027057378887468215534445493446014241625765365749521436844928295329963179067757921038715186445064502347718401549574382420915602701595625262479633534227450344149899350529297585424173475547369916226592185651914426690558561241920110810803780681426101906911349998881208404029"),
           e_float("-0.014956609515063526837803582952147132088098922737409374195776837263537805318797621912618466094711692688540841858807239168063645262433067150774093360172469719874348455942151287426655359879153949605936548825354823038484081430900145626866932874737479832619805812743813672279738920537132960370046895878966462614204874967021151923977356413415196680916548867117880613342882145542829692645722499102902924526768"),
           e_float("-0.0044237744762391917720787023520127850894064771631672012665916684830778413423280034271482294110609549453550035169052797089915993811506392331679866071894783449289830126958245806989405632796990501540804915392535772014413197565549994135418605955027468499787588036991391295556616639623299106158456547927743497892048617264703388559005711816403697689875563826938967524717397018449391117892566108615552020245098"),
           e_float("0.0028070527498305277824131250630806673727042291194919560369914064825514036552523442410704850859677643277651379574132870769279158904755643647145677811205955846265561961867554806225638560346937008327319781225166152623673818846413259517036114044448461907069095176860533881579856826946562180513902939767793228518320433727762600038310936465992508648362759696425839779696482281951562570767587100965337184657697"),
           e_float("0.00062729359111919836573717563707163646169885749797548683709467960477567622678477562029109214385368977682789308436777806876835422685358150360238168737629507233683961587879179967138272743400036310725136374223962724719976550253390829584621312366971588925797081825942017464360854019443595109268220297276931593379378427072110632276632571253391270650715133141465403211190992554188266443324789530820889996031142"),
           e_float("0.00077303687180490164772924038196666083335060692689683012738652360342725235375673231622358805365213896977228681350377634365640983687041721379381744044289458549987884573416896758423934685638966307647685320373807163963813538864202865551668091207939782196720850265822502225888567233222704010332634354674992029204782339234668154891095012236845103813857960730127368392258599310650334811069748225451464159117063"),
           e_float("0.00046833191688183846198076221001899971319270239989293017126433402159398822113691707627578531408936171185971800268685491314919467365279895243331562769063884843400757903840639432044176015297110650138405240941091157161243056669293481133091213742206238214509286208366570908950719342040173837015016925894985834662865648488026770710441554507509232984782011595703340004619615544986564875757653179968996119783964"),
           e_float("0.00023278180712391893775411172873857968818338466657103052893339298886500789403316051926918973562249143654892380928274819052757508355055281582117365188732903174415964782819375662712749237591205780932798341366910185119027759880670252566987933069642317830498069349724411360171249731339243073787251972875440806313985232076415354306140406425702509487373267801139233749341178640348068138691946932852539337837361"),
           e_float("-0.00021446326785384218697028912740900878740770224494127031260430064865717502924888028932183527407446754322700740986510126840777114576451324540571995477105547110043213921193251342150065518421503649772231863068255510247658211806143101957125553383266591637749469750580902966106645667239190091293914619331193311523531780833951582030937335380275857458890535531641938507112697612884230073999989768178130445075504"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00524_bessel_yv_order2_v(const bool b_write_output)
    {
      return TestCase_case_00524_bessel_yv_order2_v().execute(b_write_output);
    }
  }
}
