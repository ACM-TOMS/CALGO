
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00772_legendre_pvm_zero_x : public TestCaseReal
    {
    public:
      TestCase_case_00772_legendre_pvm_zero_x() { }
      virtual ~TestCase_case_00772_legendre_pvm_zero_x() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00772_legendre_pvm_zero_x");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float v = (ef::pi() / 4) * (k + 1);
          const INT32   m = k + 1;
          data[k] = ef::legendre_p(v * v, m * m, ef::zero());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-0.72178939905464467547175942530757722856475261909889823257225344879285198050507936753012839604785755093299694457330603310213885059956514241795116665572867802749387991842498348445905628550583339093414352348509410745021022088926714675337892035789376218539810879473979522279022375018592000281901886375019158142082902486691198172120500238785383528350279427358544061219676000655185232977891393485083990736339"),
           e_float("-7.4677276820349730329548628930780741619241084554247515896826220900868810138633017313754498722674902859925277562432959268025083598425416388939823887669453821616109467199807149543107339855022545414051157072093097243294628948860132901570667039117649591291806641744182372575973554519461754265888042735440031422241829467456869438767571067701849393222079851790735177885659380384726248252017672319198737753253"),
           e_float("133386.87524593057435820608336607905947003236458112029875554836790576760168761116425087320033867790850069251525050488485381270608553478985528208592845625594639906479367277489557521687764574844343171601926501733893117359685262767539304129219034504780743213587653526109508601305438492753010800874805969089053767733212588068040042678883657604234170799023104883882060173045385674055699674663318278965675802"),
           e_float("7.2113059521164097978986694492988843306729817577709737823149772584322881438041135466200030976419348520027977988609939228177843360695618689099488338732920838462001533941117854767617797873745902700180441757774944475589823065140017660426272737938889641114904985177753919713081444956797890715457725160057680487793716545396520155350320544058338083164621967557554747462183786129483007196399633006294239445676e12"),
           e_float("5.2190684341480466471123101249972805425821084783043761639041957805198722064043850592121162428287926664140753965629031069007915709168917025565806655529002324075155824287755509035130365273554600876452547557174561217696599797894146265834939988184372660746108171078052917991205955592737263027339352740930424486408963138699907654769706885216910764919092919716679343498360177773514009397194201141195066300279e25"),
           e_float("-5.1283966038638766200777448177900609728125295849518431195269165064537424422901484175729329730927881030943735449230553737692419106298863908563093721327228954606750249880919370384897698767300424739567656939246085604632541485092277052366139381101205674736059910759095522565998126830891822719349748429055225185758810687961325947296453183482800960849963259773006215980542598443414743912045897739703165636477e42"),
           e_float("-9.4699423516838471454948559216378729749708737332963875458522035759719271366230929056277568106614557201453422217562970931537813916778202274541576255544599212537819092599892465621905985041698022855875015853436371737355900507403555207767739197766823024951681503489346342183551721238610846576293420446673491576301713704863968029504329881784488837510112280544988291445969594023845227928853478638498842075776e64"),
           e_float("4.9844661503783138070871930203281356959959622937221484386083608357281083315121829067073767078518207804122970182660369686518939334182702968956368788596681837298334693762926567772188893526165315409439576468111639935818287610493861323811004345308344303585457494417475688185295868560110788845296788509410270668493299763540390058677075852299638282297032105275949054352159245257493194312191921897624900182277e92"),
           e_float("6.4346050407353578092064767241633910604102799431298703047173614162184507856902236033276377015928871756369072551448655583139085512373331097108400490807050082411409762820243057978539696002655232984069604044923722079364137120832845334718141015226204269369670614370672107354777870898025367452701518746856110609874977658366178660496566207086838593889435981812985529688736061506879211182009890343099478922644e124"),
           e_float("3.1069478900802194130763197575449022451750381735783948913004157979926180681194154024601510963214153816944169631569521816192054539194944532052562220665570888636343440456770492967838204298951833553635573540128492367231019603773279593000788271744814658517459870603715116921972904632348853985918058708318164877889218892638119291673143818862244926254316167447391902578721740456934391976508623404813424084267e164"),
           e_float("-1.774718600632285755067768983808932360742834818388851677434210756471872348192502427287489960909071198014700385148574131496062741633118865379296250456231397827607320605670510755292046726783783916583638709589895502737221586951000479201881141025871362971015952303135034974380475607138666947388335674452799055282302759950006378331915022278449516494580607288482471484592187343514426134474078797564247857383e209"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00772_legendre_pvm_zero_x(const bool b_write_output)
    {
      return TestCase_case_00772_legendre_pvm_zero_x().execute(b_write_output);
    }
  }
}
