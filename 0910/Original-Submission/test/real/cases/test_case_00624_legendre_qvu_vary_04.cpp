
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00624_legendre_qvu_vary_04 : public TestCaseReal
    {
    public:
      TestCase_case_00624_legendre_qvu_vary_04() { }
      virtual ~TestCase_case_00624_legendre_qvu_vary_04() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00624_legendre_qvu_vary_04");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -((10 - k) * 13) - sqrt_1_3;
          const e_float u  = +((10 - k) * 11) + sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("3.3733922145974682242997699825749665686666246557546114596338994335885267022745793180893685435124583164938190889852358761791919573914616088500073203179753213403142521812244652408985149308916280647615352725759636178375918892353172063647404568627037804027902343166801818572070499457727833919766332866271403129453661237950246432459752631224352680852725350230226177259986509511581580737571838948638980669489e316"),
           e_float("-2.8430879483107725208080316114071846007827703648414617439708917291740434724330131845779234935527777587404841285205415144799902263555721709610320405537880920857549139201460520002947617226731372832978451840292366728261666406343701299449995905140772552525503862966291135149161125149313634977324966471546037480094377702089116818541480020885323133735234127346735474000544616819124397502110945069782571045131e207"),
           e_float("5.6187068990001546825138149417937914489188463449545302477009079375811265437532280898273615916311015628760025543487374555735277064724673969378975011502843681969833049263493613734649265469555831620703063643478293563641129726317562625885883225905037142073295851013818667355198061416641735159943472886440649860478981939760213753868634114840667902946264425279038659301112201654063880727244139040100035635779e171"),
           e_float("-2.0657826190842587610359960039350747395204170710109857009275487753941502807781052251140423924353716227437361874762059513448017232919991401944594145024517021900066785139766934914758956809061829291140615655185301367275017255746426496027633211409058468539692929950080235237788545338169118953490536399785196467453331938568785248783593167917288057878807925547453984818434240319224694276332371440345872683527e144"),
           e_float("3.918984058932738118568116596931740698426034536744416764549331177976170370239861075917239209582918564474925854854399324730529408525277037892788294055512794791820265540725797467945700704634446457530265390338493453437234267139159077373551750205681917923060483996342277366663786313006917278140439803030841868852349449392333407753666886795326579601444934535865602342208055584985226226996413266976784645867e119"),
           e_float("1.4075054588525812067923728307901657728384324131316921085327634103037429577026487623216846056241490655246557830970075119581276116023234630935332479107862861468352475697568368305002020423473332627686861471928354544297296935373946086946575187262742930771268660748205125904248535297156977459478860258529591872988417735104713509409156221597328184513213571431243441734122267048519539700105395847053888579227e95"),
           e_float("8.5390437174390627434435720446020886017701471181985530388452435167346083816192689289652046170509245800893491567455051360747802403041189232643900763381141589752413116178863253575916039416007420983496044899157632410173423642705951286726195489222051014372705209780155003968979036888150587359058735816072263100101418749978034874707839732014993024308448499322500040553728997303105431536566232222505191191966e71"),
           e_float("-2.4379516967199988683483729963359475573174198363544102816322618902818276853482207681817822403107467716787891992869527169287031461036048389333387824048286703907173387873647842759026544541026820732242018267898301891468360496272878600638001081078825937582256243396754704387886025469853116246444133835994553227695833644137566044602613302508415251535761848314787151434301613217538903660712999496286743955724e49"),
           e_float("2.4769112032663452235325536082821742481163967101270799660284314201707145201343536729417042224673588071642676136536566000067638731850921527063820563711096316394095830106688131430849811758796712001802644963841413076752241317603207590554282508564912338089525518571212590074878690983607402194148513406368484940392709031381090829756563578564110937624554720506946192443820501262437732029076105701247906638191e29"),
           e_float("-1.3215477514994719037881301542132924825585966102008656733497806585355507244681771915600492686023964829480382227275961498593597470202130728321368219640046191852768310671384788504543127062245175937240641424133101857344748961242579065961144198101644383112397693124031219472254711892119328952392704956494837750544057136626227150546102101978359846679671018424883037277764967707738994429496942960805298772524e12"),
           e_float("0.61765633435652548726621829544036045275626181659393694613682939655985697074791351709280150935950011471268592902319567296355526308803934884867626571442955299500807986813992627757541908894953915941001048592718223371453230537363002146090302102890803680532224731359029151228068913686668928862948091464179566600290048063726787173985881359611217231116235531523276485136231820787888173717514302544361750497384"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00624_legendre_qvu_vary_04(const bool b_write_output)
    {
      return TestCase_case_00624_legendre_qvu_vary_04().execute(b_write_output);
    }
  }
}
