
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00694_legendre_qnu_vary_04 : public TestCaseReal
    {
    public:
      TestCase_case_00694_legendre_qnu_vary_04() { }
      virtual ~TestCase_case_00694_legendre_qnu_vary_04() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00694_legendre_qnu_vary_04");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const INT32   n  = -((10 - k) * 13);
          const e_float u  = +((10 - k) * 11) + sqrt_1_5;
          data[k] = ef::legendre_q(n, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-1.3964148742323077037969861368761490617772951624356700096173112927109158274426447968958217973523054472095404812381527705724030426242527551841666234342351198230637201108690328312335347169412372946827769172229345854894007532202932263585997960643364431898334553121731587598003287234110334271387654226330516009686595081274822304676799959102349944574835125596257195527523825535884499474102238800763140312309e317"),
           e_float("9.9901228810674500761870183660399616072285451731134436395015619557553813023820666713566360230211760564517939264016159862426342300523873818121161569963687995016252862218270567559565835818395335577107112703434808964245514663920893273633803046008768130986882801150100360182227612485220646613509623964538714849361909243203807488811464301402119189909606907435129284006362797279810578184426678351151481259013e207"),
           e_float("-1.4810135483857385808560677010741841913337776111475885573593016819973247854848604776949129997470579050260753617989590406864267244720842034631720638519803599097775324585283372523017415312704779919985965610224822732925197278379250438748415427692703219492743505180331086720495679811151021940007714566839390150612276185885406067762301463742079190492989022999068350848147033846701272054179817807101827686128e172"),
           e_float("-1.8374389126377861290751201608432946590161358668597939204741317439506447546605726539889792371356691636992215618372308592331550200807135447895060649688703018488851158744201821373180223932535637724548370019011355840022491062007442635270874451375339503249467245713278043860867317447677323257401863328105979541953330952898570071173910031619183992067351263275576313849667396858121030702385471163664227071047e145"),
           e_float("8.2351094312380716982590607854923285312736902611434531591624389802825260879677157129182586415483096468547031256500055365693663298083070097981997689804895195929470425721780397061259432659501250569687799024486827441988936794540831245427936561255808201821915263838248378491922807310427160230424823146560971547027538602555941541871451345106914899950474386342895809705508893363552572115645409518721804016776e119"),
           e_float("-2.904449621604429496761850136306462796182361567813568929667596060594601588239002287318123033893060374759473550176654201204002780915026735462574153289868103673611317042511007226407185955010235071818963239301882063962507669694855105642485293826041120153542563604248412591163420667323837042402800278125150343272988562134528639340482930188690093576885532124782283144906115672900304695841035734656198395641e95"),
           e_float("1.1280842674032355474185507992379020905850289030657724476222888825214903531113502100050319728659219492942704196347777359987710276914975841453682128694527888874674356972010716514440731353024358799791772280656176186343907223397846995322187989569868372565783790140470654996929408160892610509884914637550368796912400470556062046482834992994570465126118479142656471591205466307597507969919787730148314879631e72"),
           e_float("-1.1562307581311584077713949986553366683108631448574400369717122934656901134298043043357319662546013391630739837400758095588984129721840115848881969702633176166829443022624184629395469933404872033758395115240589294691841857197614527043327936767657998313295451750708386698295241862871424616275501701058519637467938323972409977833715408495860129292045014553058555971992912229844893177597150322614514545553e50"),
           e_float("1.8082183483599351745734649463877568666604889570922772793899974453525116848233787085147408616613684216296762873024909098516372171505116464961254775437058749596729765694116111267068608484483569003379604117525939787239678023026176103791439526599001072775632165216645205731723841509270415694815334679578605417981636660961860058307656150485828380882240268204515137795864067049458569051957513025043990873985e29"),
           e_float("-1.1048890564967504130700631661406962834451176523419200533960715469937034353083816070321222123934843780743249707363186438301941532220175548798210137530925562354043119041459948926958999181970335566080206138381466468329116324761286434123201980785906390833354132418174962909793662957801277695228932160252010479627373502331070997579068861973693312919670055001993073337791679726217583361214892680259517126964e12"),
           e_float("0.33599459429074214646840944102652195131442774129242752572764249744218387003669004814317475549314906258070242815957821142214738064530188456932800849951089249926034825694353881168174005658733072245743037358035656050908870586691688086446186775360831270682322442993877212891780892561974336182179980419833180004522980619295634882703566356992088815429686766164327170564968265757476021075874847904405817511646"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00694_legendre_qnu_vary_04(const bool b_write_output)
    {
      return TestCase_case_00694_legendre_qnu_vary_04().execute(b_write_output);
    }
  }
}
