
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00811_conf_hyperg_vary1_mnx : public TestCaseReal
    {
    public:
      TestCase_case_00811_conf_hyperg_vary1_mnx() { }
      virtual ~TestCase_case_00811_conf_hyperg_vary1_mnx() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00811_conf_hyperg_vary1_mnx");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float ak = ef::third()   + static_cast<INT32>(100 - (10 * k));
          const e_float bk = ef::quarter() + static_cast<INT32>(0   + (10 * k));
          data[k] = ef::conf_hyperg(ak, bk, ef::euler_gamma() + (100 * k));
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("9.0816611521371761857050782059307482712647108801689142851796409308556664168082144575074337599080224808336667561277663918889171733682301315679331412484121185596173918893621266626845625284357999683000830254585848697063105733519430323069712636084188648111388374277060329916793454515953966610158842486044093280639200307048060377249930190485183981136065855140718620520179788016939352999448269195564804106304e6"),
           e_float("9.6976347130801939622264225371345186161417623531779066756229286151651180789424564079143328186383323060276493007825140345477175813973376661594705739503083413028399482262229957590625940386132683554789015140163952506627985865880274318017044187437990678524219848134701066282947156864771629030440385722417629778408151329074547869759183915265702947373668273386079762692825463085412873061276282505226451577919e91"),
           e_float("1.7234375005535105679024456146642153257075537461096921518592632585331294805795645063108638672112552534246545461298588875300145633006823653763674199552317746950317223906182423883662243379823341887709629202461951313740396587409137844199650565484578154472976854951752824162595723742857747227596266931872654131257920192416335281038484231750433367354214752760658636697647959316616051147524694999771746879271e133"),
           e_float("6.0185667127176256195381062726756688704633712202874416566684566553670880685026201484280710987252445418311786731569531138242152918589147128754171276191227096055492768015815805795746610893058537649136116734025354115911386638639800626319359132224668085824450401647149426733016445391541714481918672248469778103514722508480813737413154566765298335150255129210979001096777392462449966252979410438144702510263e165"),
           e_float("2.4894995326503631624876897869511308958896119341397185235746463109663349691842464002524523018186591698074161134610479899596366625149647113415182473630205971406086706169494342697548612894245458204340705567663772876607105143277910176225076333505541174375173567345640311508054314136558426408516397296988332988533170313726033913474935404985856014932682778861566209670422496514760471392855848631781358563536e193"),
           e_float("3.0538843507254082908254690607914577836449014373895222675395278777312980760633603910336528181401873994099581166448890958326535687294015589051421736400602202944430590985378931921990010364106238272526267844729586219438511261118164377861809241756889956834346667193146406736499743761607111507294209470441464466219746412445347939135162152984625490706002552546300398725703834630484769115333669976771003184462e217"),
           e_float("4.714540296388289568016516752806327938423720046002070226856610635487845368296479453064595664597696241738301415714537864620923479701632253675022894170704359936256066227919108531166121727665147684872291395685502269028195110254895505966206882453049872862686226142458544987251512597593819245589981338329556778415638564566851951890531484913162358996847092165566154594884807861867408466636381929742975989381e238"),
           e_float("1.5888324136649886097240868999786628207806458353137053578729008636191578117511335772010915640858275963989585910377743637369600635626274655280224024699774044292689495753081149742176866677403803425029241384076069905032346875999842424598776531371361944034498099812159485135908304109368155565796022934173850485067831207946664279837348222733364089320695918826323586271724707006294735276007319827187626351987e257"),
           e_float("9.765100808402105073689667896703168695341173295987887759561225471699099750685908465104089077317069462945315915773442702005385607850514726733049840864204008153751674249511495419573428509167791835911552305349852489369557478596264399814498435722207284528656442357805306161573640487023495119946945312769614647056496403405668129838797511726679858013919146355967443792129901105924964216006799785285279840077e272"),
           e_float("2.774121699547925944234449319657651218723433156142428123326267185985514646942065848124309312874033654828384547819894194067203863640763718669364064590020517446974748008435708740465936403071510935177258261367190720710971144503798028139252687916900172374604296684698963626374999344282155395812885848347519318413711043759971464498059289693718513316887357738708719337040976874191141054195223020926664364387e285"),
           e_float("6.9541857633706986814802007269616407028977072676242833007954730897549174317696982556510043431320086265884979630737145859101040360927626479196531929416787509281383191837761626091311207712782588702058629709215929477810873702816501417433250381219711701960747807305967788431390241237501544982163917454858294384820046289428466580299417609204152696234774406444592865669910611676835664125362004860931416964282e290"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00811_conf_hyperg_vary1_mnx(const bool b_write_output)
    {
      return TestCase_case_00811_conf_hyperg_vary1_mnx().execute(b_write_output);
    }
  }
}
