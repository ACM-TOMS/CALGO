
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00681_legendre_pnu_vary_01 : public TestCaseReal
    {
    public:
      TestCase_case_00681_legendre_pnu_vary_01() { }
      virtual ~TestCase_case_00681_legendre_pnu_vary_01() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00681_legendre_pnu_vary_01");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const INT32   n  = +((10 - k) * 13);
          const e_float u  = +((10 - k) * 11) + sqrt_1_5;
          data[k] = ef::legendre_p(n, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("2.4218133892216751671778184855655041432963983847478018728142710736324380470803929704254155044816571712579500152159630079373149478480567547915043743468034690831443538564637597292384231421055886316619157727011865442655199287262972996280315418308300956635381499094621227900253190973754206480260017804899217323878267499453342482218945769545119382617285140063533782912237998543805901251459616514261606504367e132"),
           e_float("-3.4366798012355269288158128294764394281308615296298614568602498523347295572631916917908003462747749587846930970363932099518799893360852420245019566306289995336449003352119001477773233398556670729248007740654628998605117325804924229633626999592993729904993337276732329555355972026515740068110598562790442151601416202463992795856477291816418359651067169973381887704130596457833219687698984080753382714814e187"),
           e_float("3.4872361822899751974995535244721531365651404714885099724795643892838767764470624960629575778047565607995140170425745679949201244659001213385577622982531814483825675166534038134416706778576459766497335887256153642966050486713696172740312462038620775051019962469389524568210311625583208785611451011493736481484483796949340093605125677192017598942897249834857344972769922115370691275103643005436234261632e170"),
           e_float("4.2694520981700326679186081867329640443114363537033378673266528852690375823156272367843937984049971910077507780776369580129499871528545387349292791841130440488077018256579054174237945149055769014626716809602869846617172328756497264819621672635733158375834457965862586507102833565343991186832923039021686955640306845070182778558717211603862652374587275879387142640033850190458151988374295410376203266701e145"),
           e_float("-1.7981862135864298113677723866602211143854539687071776754704655555854050662339305015334321631984703920083465899905669169761191574994668537567148105844365622848283594798525707208379508007939685098473611033578600006035766176425977464566527022784040702235624118896126354024506672424414595913363600385783329580006631106186536928391415364985193925502894311962658061934329301747285656318855658838022334227238e120"),
           e_float("7.9109888918395953440232450259658124773771057788742329795354814062399042600621815055799019398354125557208134546737498101500023422492677162995518632438384927719364620187525515479302839555707256202145787705887804536965180742398265496052975390027313626978690239918002649886678315446074877069069459736737966347038503455634402304836580324683752792661566998197628385048513811230949453019684284167007133399184e95"),
           e_float("-1.3072473525252939622608934715356282099163335889823501025662462162337456056782003828226858744867790937782806563868968310752104291904663498480088015501486902222228242810515666887236381581862985389016544932843769796026003499651023985170964835787986412755841385065835427453540121988749273777538056638920823590751783781402940069868036569655923359055906698536271774407106646079352616877951807011471136156075e71"),
           e_float("1.5393346053921728946887260459778425441058883551979289093787028030686462130991626454863120576554902409724786192439752253640231201162407383481086372934368756675307482533055099144580566178505703909444490604097832714133421052609763612829754838224587420441697076320175473645377486216786517044928087791983296528034057382478049057011590057037694255092312577019114287711694833007786655644292060105198515353221e50"),
           e_float("1.2002164275038541937617492808437803448629905779428646168378295614133470177030094263138055719469992828469366033131267416560154867475360957041810466430468552253789531296652145500918413730261270743285019658295726985532852567775354501564077228454309824773156792276738449084007601229114654231213744577053011718277611901187685659273390660866661130741821705137736793488780070092487279676711889813531408326027e30"),
           e_float("-5.7802707199426664774754772097270424008840885398507512560620818113203825919865405444595730894476563855609205845439733933304475778875953318499831232531183573951412693215573196479774653560638264796259666244096982447948031640181688456995571138365897796879509066610350730791085846628572485616186239357608407279619287196370387156450155838920906988224991364092649744848712768109941378834922655192647149149727e12"),
           e_float("2.2973681674734067133296758483236788239320844690648584895535100872602558173334437151583129850047450797043585098510351578348697387445387824608532162528520463778974876648282369848822674041498381614206360216313807927271437682381601781179496302100777390037549724006991387813238363544676295487934167556684687233606251971397170962125360175277253479118449442121388762988365066699883717587963692592648141001042"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00681_legendre_pnu_vary_01(const bool b_write_output)
    {
      return TestCase_case_00681_legendre_pnu_vary_01().execute(b_write_output);
    }
  }
}
