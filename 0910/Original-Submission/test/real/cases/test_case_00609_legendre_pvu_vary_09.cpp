
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00609_legendre_pvu_vary_09 : public TestCaseReal
    {
    public:
      TestCase_case_00609_legendre_pvu_vary_09() { }
      virtual ~TestCase_case_00609_legendre_pvu_vary_09() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00609_legendre_pvu_vary_09");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +127 + sqrt_1_3;
          const e_float u  = +17  + sqrt_1_5;
          data[k] = ef::legendre_p(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("8.4826062291824302538740924244556375301968685893781255160154900207005366794319051992710751094411938988988238766164054619243283399549488299007856020445870220246560343796713110958948606559262020188604809933434166538229324939167461707846799810943783401814935330248238766886367058441121299780733305669259305682835437134572178610668159054482822004120859441505238595036621652768995592323098195000964368841527e36"),
           e_float("-1.1267692755945915406497203231119508751821714559906107114545222661779964623021747211578134052260248400284533094148508257401138699270782399913629814736717176253429100709250313862695357431854734158113383116063012520049770961322657020308922654075616543193834487975696831565806154912746181042704502184025492016889496798415397088019682604245163149063053170377010926043640673146298761075102054767408829644212e35"),
           e_float("3.7791622284549293382565239080632803263493831577956507669442471424525487916084187639223852719603014670191230399280032699495697939738168701522351135912197358070275362483682087484452324443364828313648444435030032263288374555300238842163142841080413622651155435169314227886412192172485227173864098890560614546339857532980042653885915089683581938237474846349796327341240514367198136596951699460331564593716e35"),
           e_float("-3.7802735984364957741935489815968728695338766655546322182065601200616212863831358671591819663632307826050151985822937150354019873963404604023707987289266223850162922844501370995253804392434228951775960271411880676494249293689511100408622910323808777599212287499467967765291645711738704730919849669097228646534549829962237490207052202622040527692620720277540130913387339799932163908275520561655120803761e35"),
           e_float("1.1588992941760743183445166251995502361499222774916818116099345839366333875457315647950726466999152704498566384542260879738065538956263486955323904423037095018942362853382627084222488096086957736247195945011216085746359959408848566741473629972937498035729041030895324371472113192329439925123634391528357947130211694406299479274525027589954666954987833019048191267940957098350569267097251916641541699428e35"),
           e_float("2.523692390403649949272303459358400881787664838791486371250020565438193417269785750916949906034599137536313723078753942829905784501275981480084358243524809299224448778696509707075723292447892474401820959351149613109330009725996548797174365505387802639947498697426869314281805040657406411657964812854621861839138827574011971914059630383351406461832282532811771945438279219838138900799776042919924768415e35"),
           e_float("-1.449414713655295747514059990479400017692450373014921798950326646826341091025093203946900887674805610269651892613637444307027148114600571706539696280605001049119684176090735715240607583050417771774847295555558765610881725871965754863290110980535026406772658536294898569781637697847538357914198390149784173012773043693109100144666248246942425657862187394116719987506990095689590229100135894248479466408e35"),
           e_float("3.6426708202628845071784388545192789566827755227917327690053493437947833293144115532941368045372194631060212820362815609469936992475522425699469049414275504591586785294756317219626188171620120805145611721274933126287233089678975329477206497304993681595972014021971347597903428293552295847570074048513314320164156846728678303771009373823291069016024273003270880825717702697003122875400298882681976691646e35"),
           e_float("-3.9434234896161966222509868004486995743682636851238031988372033414129441559812494832195364948239668665809472055980099389151702436981091030813500344235279269236191960989933774714763516747569492165219877524852047913651676628734242495197762098755859315655929881739181085286988078500754801928978588537345251212641098535546937773022910733095905630420080788371826967076200915354394403486598149938590350774133e35"),
           e_float("1.507231043422202518043281875263643854923673879671912554275525731146080198938522919335155159084066258538633518637083345397311870119428666614467010124931260733519260571514091845520588673516047790213016678240321575097188256921107270793907168411151277589024888917458974891592359167613973963058537678995899591149333823171866958321576319771262326997963620507634148904576216454940375089273847190075992197436e35"),
           e_float("-8.6108889288181896502789144294187883622827638326983676419401038942107084082809439792510765631569340025886973825444393909618597807027114011096371600626905784586237142430059166425909483081230969001867247912339438692001863694753064954214012515962804215709076012520125306845439469435714406962278204819502403313419783699649712922488313346151384436810968609714781606073854405964030656330641704234635204478024e36"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00609_legendre_pvu_vary_09(const bool b_write_output)
    {
      return TestCase_case_00609_legendre_pvu_vary_09().execute(b_write_output);
    }
  }
}
