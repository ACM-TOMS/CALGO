
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00695_legendre_qnu_vary_05 : public TestCaseReal
    {
    public:
      TestCase_case_00695_legendre_qnu_vary_05() { }
      virtual ~TestCase_case_00695_legendre_qnu_vary_05() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00695_legendre_qnu_vary_05");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const INT32   n  = +127;
          const e_float u  = +127 + sqrt_1_5;
          data[k] = ef::legendre_q(n, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("8.5951993922322682945273014316691302410289961362888058537269395267862150956269281369109044512032630367568551737245499475859047015754936625305357068390639726914824273662786325402420500837397399187369015834893957290697598087990770529558378425647400704795742064969092428622858069492112886094962778335330082405656938989962687393435955594562004493941798305173046256134653264000984542333269909501832317479812e373"),
           e_float("1.026138019615216755201071626255251226777963384356646833272920382907571649653364718611316063977200852289250696331922581174404593362901066684154170667878833201388866241760354934893257241977020284163681220715646842905317245940819403289221097435613179321087183582646773937535493725815703041210688801046029677039400877953693848792949434247097560127224991915892090424284241408735135594509949297539423581e278"),
           e_float("3.6368987817024748761291078823751358446209898964807920458041614714587596686775201941606133447806357779683979475330638056588285763535821332281448593274075618099480239905151012807738320559517803199870192431012599339452405330494537401403484914517960118919362189303747282144860404139583615688149920738457821451669337977758778377616708905460639229453278423999857553481538076236696699630567012444202418201446e262"),
           e_float("1.9152012450835812501119823763279163289823636773689071680699550831385009734971072031522656929130570732304516330771432420858375122838721880434279391768926362627884997780291104454431849796123282869351382128840779131129155454941982187739298600629049134207231180765508427854741060625459183909595649506305429550047824955410889312641222040324578142313339867293120342054739410006191682657097666053078656143654e255"),
           e_float("7.3016682009207194082827994646648989073425933949324721873671587800654996986674750061551599595777449380538785591249111216626367185214545966479789399420931347625143535752763921701578889553024173666209545028909193157771367187415190972636497964133926951763670337134467953736748840122424043472339880326225456126496757330120389929428727399816261039582656201141913475502476922086080651582086750493631235812159e251"),
           e_float("8.2976110842292453969296720155833704362027963545341923375800467651124320236667797203779471159913818766277352010598726431582211895948318384169217942420793438636183923736189689616626448793794918844562251884761064189836438940995207643861970486654623444801533908685505795702258283228798938101946650800639924746426325901507785124008991666166045730051067315211769208499148366260687202446901507777721250945038e250"),
           e_float("-1.1622524141169858544161777038893356086688540524812190140457180232647045183341310938028210637515614924078104686076536348688698258425824375187482395931910549396305143909705276278078748203343701177203671579271725501292073523634601542707000903774714943410431891677112835692485351664484977204930501332952685809822475119727678633261737437890354269911288026771740690389866121447363717315004829752573059666297e251"),
           e_float("-3.1615057260167032783211001571536018269840444964175883954207279401010264622037412793337000052155061126499756461733563200305282127458468662837931827265320326280107296319164856380920392067325732492812572997436274659133306682720575007202351285254640987009606851823731575298931448193130558312710114336190536437045717292195291474415200088279378999698358087904036402301472318641648957259225684351196961704768e254"),
           e_float("-6.00358650632476449278426400243398833004969944317725231503557757741071805925694319384709314348133695602262868598643228760801297154334051768198352743795185306615961200540217349884602649150336702673958467368315637457612910044538892502439879402886961238963689453523059751040875725633192750878981697181796241763153357850402851170476905213205824261808775107893637281087395598992597839077199436569983941171e261"),
           e_float("-1.6938905199074376670448845897983118650778795251686135093490307052827555650927689259556194348839519928184318214114317370170595342609506792313840797650957112531127748300991465089770509361452015753011018453146856762381627727615793635097613541086885384590441006189225902065303001594997582312074840164358804285469319564074849853022200939990203170651829361346748797828890325774673843872148496154803190578835e277"),
           e_float("-1.4188468304366983758303812024595594238470801283508826883110328314130279804148456900441623153815178088697917762167099661162686130153050480693740442008388514173773102059669000174928325219922788782962895137329699262573501883432032856297992106071104342025081951426304221078434182188882220494288551968901351696991985489355278709588064089041765010280315959357846769960854215826940553352650621783129143783852e373"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00695_legendre_qnu_vary_05(const bool b_write_output)
    {
      return TestCase_case_00695_legendre_qnu_vary_05().execute(b_write_output);
    }
  }
}
