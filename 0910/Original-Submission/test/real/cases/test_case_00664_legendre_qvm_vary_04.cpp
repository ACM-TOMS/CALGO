
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00664_legendre_qvm_vary_04 : public TestCaseReal
    {
    public:
      TestCase_case_00664_legendre_qvm_vary_04() { }
      virtual ~TestCase_case_00664_legendre_qvm_vary_04() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00664_legendre_qvm_vary_04");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -((10 - k) * 13) - sqrt_1_3;
          const INT32   m  = +((10 - k) * 11);
          data[k] = ef::legendre_q(v, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.1189343838211184230110546087430491809696372203427613363644346091687518856802758870970328863390574187171501661533171121234957647212761650658984900723585507817638837956831926000277441046935758796377506806593838187589677602527209180181015816495862187954658481950290393763209166021408219733912859037700835417449778953665941164009221314313348097722741310651848668224399019194547406325173278228775413527368e315"),
           e_float("-2.4464523258816199795947462091958590952351333568916385763914357307097216589850974905036695496247253379656684378952781866685221055019064626358296568878423945562031773171360473332937962509265781171912511395436838318283825150134891686617953252775262373619199117611036763237520485305400029931757074793503180468056590093410838638074904390774717204640726036567006533092845876669571027022146105127158585957995e206"),
           e_float("8.0992479768064076925610252109940617854325726186493266970100322923588178843722210277344518517441410645025546091085664410118740254369553936522514137717409003210886668107305981396608223231085898078003314132294013237094866691515527794911653648339704818950817821072428286429320206555795557044359535510741520382414622057957863052652250249359380372836431278883402605459955670545456861711520649823136177498442e170"),
           e_float("7.56358938521944479593187645362100722597629285815466917097050950336803188087217852244976516538116729094149001722690407558118695599902104949856049981363716425573989851406138384309487321461721837881976736841347176447151475661766751006580832447970083481196464760976641661575474956637038972405364259586403820264643953145655079405116799946507760541009661471709339707464969701132797944886806114995666710248e144"),
           e_float("-2.6240648016939930712959597755332090399633632585610030499368493227798674268090754049679637252162725849675680278623888468980169413103874282461810161401346641711519032500208177646038125795906083399445871316829782470492963142600982294967220061317051562907475944695265964579680958451125152939328874225955690106553227728649112780457374783638372354632491821334562389312585042541613528267684032320907359614939e119"),
           e_float("1.8573764774457834102095711671537264867647930504800777953854075780540652018704457712198879437379009016708246850558518008597268651737400508464334370616902473967155477620700866191177073720217746233001038905909358781936867423143972585909167306337072886766676040043433930956966499096428216187225648039919253003268912459753113477520933642372290983266362902036718097332075233391098564150650030418092114949488e95"),
           e_float("1.6360569035980149887537379408543017038220101751501029656649251221174393259111891602875680316766635002505046844590074717668197502656545288833806153264683174291468872920205506625482805171104649493953321530583273352040275798663400273491854475881225642822561992916265122167007155201760554193833371450923179342004595136031945215315346368760166544986921575424939563325327424007682852134913651692900531317624e71"),
           e_float("2.8110758667059451051322415699046691748959755581344037076994509074208840103559927286538942505136081801465516694806851181559579329447067986994539526292485200130539650857242953235630589177636060750467633016871803781820585936523742966181575398356604010789014411540666891265194851897069372638306318256258810805697717880212025148187102725565941816208116023925962514378063790211399798950438275630774224301981e49"),
           e_float("3.5598495820780673731306619056027164866943260104583567129709625924645068510774980277618389183825389564986856930041685000997416784619248606704979564399162843273602964572385772951465721242084867016619623212663598712597426685644437933170340040045788673153667095732538893155907556165084463289027921827513746573255897704340259468222271777532100033635575422156658719133003521106874202911631208284396366484241e29"),
           e_float("-1.9053887742834635685970965489581713360496122880270263728472623481775135124197718717697120081015324596436764761618358276721056932102733050274325522158676772670174674609613354720633218722335036078985236558785318347060243755485152719604929736225900894083381566097773735508415661073274287225448628351684754214556941021362110961146415808449725998199387134085267071942840133669830912707242179168820570217351e12"),
           e_float("4.7537600722871229706417355380759147687043969895436784293354171540929477518750349826283984615712697728477308621140381216271048827692623805450495740005279872788866402377977971212016388650670461543380532966027566959875675892694091104633192546606845191224925652698000225711499023835090084199943039937411958882093668259880154373033256794455125285162363514050672636940561305999823202527283549502484461485745"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00664_legendre_qvm_vary_04(const bool b_write_output)
    {
      return TestCase_case_00664_legendre_qvm_vary_04().execute(b_write_output);
    }
  }
}
