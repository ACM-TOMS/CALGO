
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00443_bessel_jv_small_v_zeros : public TestCaseReal
    {
    public:
      TestCase_case_00443_bessel_jv_small_v_zeros() { }
      virtual ~TestCase_case_00443_bessel_jv_small_v_zeros() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00443_bessel_jv_small_v_zeros");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        const std::deque<e_float> zeros = ef::cyl_bessel_j_zero(ef::tenth(), 10u);
        data.assign(zeros.begin(), zeros.end());
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 10u> a =
        {{
           e_float("2.5574510185965304905903315638721353345562818990684132556306198770492072047456151043105775304835613827866944100848434577239108550325171790849316834829620434952263106566397326870412926649048987250862650575709024862085337592353258101821806925833021403231292288627506881413169838210066913817259821026917072628828391501172161642427376949218271814328135737438363905326231627362162849710726702462576421145286"),
           e_float("5.6756963202731099020336037475172203722555749045325732820690037919655222790267345697068461694284362733381801319311830600361025079167177286201128261322724460156118498556005212546799757336799222703175921614939528511391248655922988980649470292839743190543994890936551213644324537580774390138026432410614867615311540058281844484173744725326735130691576641107885589495926875750535717565703280088862977250306"),
           e_float("8.8099925220020443572462957670605946054738411139407751696977096896791477422975350105643359405049775463707246335935776838089985451569207631278817616125000324356914301891029346819531157842888896920266910161303893590491704479407039243902285376329093373555994485892367767068013851883486007916123298306595237126796155950554441744031348490932751511623708949083140271628185120083004500639840337327089086829773"),
           e_float("11.948059752924419967228033420138143006090687505955351675978395847631538728311884211039673349720477698802108731227201095062120643695994545917864200849687664690954893160096367615563308728003447988378117404964725437649104166988062303632395995143244557658493174969279503636658040492195749991192366027226523682156407459673092086149497295572645127696062467707848941930667401335830251361406138095108201208547"),
           e_float("15.087580378017574933137318697146093880024587547190421814226525347838529489459200232460077204385515177654007013714588801582309529850117364889967705271673201227806727320718688148014651111332013502856343187651544768075276109944263647251658640318945340328756154461948095695682496396189595486919361527723289277204578164210224361700867794615811689700878070253119449939013600679095915076373275551784608438947"),
           e_float("18.227810531625790572673389370362956948545046461988832853362631458193367825855923521101547795905221261983589317746497684463918979440481571713219768781061207097803007389590074457780201771932846701686075540714657036080249308678603184282233292421938854336431369981234498172881681911153871635448183431787059546801458167955490316295273885443519516800224560303999739421414998718747450468470320826517160792266"),
           e_float("21.36843945196548373026445450871901936651151056709497897206040734632991964163073452981239953721593071041490763282331965417839449796733555922742117796855526067183840802116212226080185804213935089007699870554065490002590132654454888367203736578072750087169382172487834045786907741734861345661274409191069971970476665150888772018262093327923473428525512220045452425442770374938281812955108018993183800488"),
           e_float("24.509314579821512119490495050349097903268220601604275964529285607519334984702545977455053946232315746237271494845121710973235501227595959062849077178833877145451235096604529612841233668119615153845990425921331246076121183521040761112892884264253434063562501771525385352804581183142320567622501255241528926699318715521864569162637698972961653192181316281407564168163779418459787357205816822975010003344"),
           e_float("27.650352320624410424263337727376915721319440810275023332797573878459516912184450112137418577206109427178794189972652118129985800460145154244888813813267839248247601315728290175909854383660261120546745423890594746169354522300707642972203278743624722540827052343785036751878594568761108447319424259897698920293673611484768343078098505301916157201534970881258443262108715989706821155587643164345002536639"),
           e_float("30.791503053958689673911924997078612427933441099722930052752305990579913721027160160385702576492828755058967506550852622789905395402495085264939286233070613984524911771364892050379647360976469862755930202993838455287223242638486341325374123826145647758521435643345272365710601658586854352102132127533222964912396925644261739863733291254876724306665251524987657058956022989598350151651250349668254010723"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00443_bessel_jv_small_v_zeros(const bool b_write_output)
    {
      return TestCase_case_00443_bessel_jv_small_v_zeros().execute(b_write_output);
    }
  }
}
