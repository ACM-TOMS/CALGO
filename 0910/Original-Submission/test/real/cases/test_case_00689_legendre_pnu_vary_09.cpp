
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00689_legendre_pnu_vary_09 : public TestCaseReal
    {
    public:
      TestCase_case_00689_legendre_pnu_vary_09() { }
      virtual ~TestCase_case_00689_legendre_pnu_vary_09() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00689_legendre_pnu_vary_09");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const INT32   n  = +127;
          const e_float u  = +17  + sqrt_1_5;
          data[k] = ef::legendre_p(n, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-9.4805654712195810865049937584422827158737103838506079176957006307148519524166016110996075704755265308824065964493284952919651660297447292576257081420011212613691758973591831311935101492806773889364447550940889463196968287148837844967201673623592398445118389223265875603063564061559061502817976081577160247388620510044155933692562136757883281750967579354330057632046051629106183838451088664504875666336e34"),
           e_float("-4.7048484277043152789374920014898911923545553440704447208984751523646002024775485024361629263547560087549308471489181809648063137934202245701628244963480666847343052712783129827553947875893990120413267099451169601774125981898017785821082565874496484465280839745647372021500958278259569991494438377306078744728445460169703536464669640598777914578065922496802390200561135716192423870971423086476506437942e35"),
           e_float("3.0272595529647165848401144075656177013417026911105254395996040997971754058703779939268104209278116781623260169705293405387660098695475307291716248953256581566082891463176428718920708206813793097835578007563775235607684325853868432519199836760462331011452464853013241504480182784560720295902789832405958256980367466399984270922728821674461314007048281836560343495185628802584496108038326510971217454793e35"),
           e_float("-7.0581736270612313703124345616061522846464559116935051103563616449970804443897700510756449807711918307983430841699761183712965077882765642795729326508513953445869039029814985943457044710996229399958392997650833487625470677250178708043233164615268742739302607868673292094444350465991959840707161678143755657061596128536099989161050405214422773466113542210117197626049047459968002558552221723596621756663e33"),
           e_float("3.570675561799899743080880503543811831608856189155541977122259274092545887120303072534876832001819356402065172169216282124249753080990014732252951573775226107255315012800788660266636840053469097037606483913745627619828609813602733465381737735568300597462902214906192196200081605387743670191984977559714515693564584474333476329285200829868784504756317526949041532629930768692884008208974809534917830197e35"),
           e_float("3.652666036363367385085046774216327785138345360005526549975233248534357494710353023614678852892990139763141322779727791888303670482288918906605767278706053061742355592719606072028471309244246257438972442072305523843950175176713727220627823828145411992370725716652463069095928622597300918741684739784182654813646781202210702980334352322660523544164897405260060474108735765250770628203937494378764407571e35"),
           e_float("1.5070976714361025726951347961448216884084645680780801615350773086343531357478954021904958830488186468708602324187705977662464735828480178832436033549414001111230959820749609072075427050711988996489713576504733153028435467663051802559684167406640909871101238468817415817306031566537716221698699797778829789702363014979524028377152536679274133259552103526294694859443524051165200148842872872785880105023e35"),
           e_float("3.7502430915361860855092309949734166234692245704956984654576223430905375355794271723520987913391281568410917486571902467022243247257478258619725322481913978631874104048595390552509008340693017234959790206450918078824018810820144583768330752577476434065503258074986329819024279683579441044331698629331678063393999165893743248666251670347599988942468311981030108277466889406134148377863463677954836622436e35"),
           e_float("-2.2053738207793487485594405553456074969593190953382360981338704499624873033981950140760772153037168053535803990457110880180389112432754136613785041594185276114619656715003916638917748772812514676480510561516907544158658709257983369953424818415991659699286123025729023737479025007957123486656722613952283612532761509469672513359907125200815294539306877042096029268943893496902718207939046284193310782582e35"),
           e_float("-3.3113741258629380601685742185604194770046491560856496391410032886528395063071101971494361613065128830889528196258891992371064116750032840878384475137478562220099680494737249107758353740148334169854249547121528584769799028715709353767999754421821265340094180758640475510540550068163480822809142765440689842271761061420611033558375733791846178912692552978847190149339938858980580142964048026059806316814e34"),
           e_float("-8.3092163761054190089547684434955947394731167875730604593789269567028120169297057086766281755306582709138052823881110595784701093483189112417578055079090772612983385247883348307540775114834133347988177317755345196406158966306795645097753093645285083010327883405860275029716765862337421417945446850227548954559148429553258226822299021188031667872255938517640420884690846346799751257088201264212151896289e36"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00689_legendre_pnu_vary_09(const bool b_write_output)
    {
      return TestCase_case_00689_legendre_pnu_vary_09().execute(b_write_output);
    }
  }
}
