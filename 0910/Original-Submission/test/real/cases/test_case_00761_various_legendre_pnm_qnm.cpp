
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00761_various_legendre_pnm_qnm : public TestCaseReal
    {
    public:
      TestCase_case_00761_various_legendre_pnm_qnm() { }
      virtual ~TestCase_case_00761_various_legendre_pnm_qnm() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00761_various_legendre_pnm_qnm");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.clear();
        data.push_back(ef::legendre_p(0, 0, ef::euler_gamma()));
        data.push_back(ef::legendre_p(0, 1, ef::euler_gamma()));
        data.push_back(ef::legendre_p(1, 0, ef::euler_gamma()));
        data.push_back(ef::legendre_p(1, 1, ef::euler_gamma()));
        data.push_back(ef::legendre_q(0, 0, ef::euler_gamma()));
        data.push_back(ef::legendre_q(0, 1, ef::euler_gamma()));
        data.push_back(ef::legendre_q(1, 0, ef::euler_gamma()));
        data.push_back(ef::legendre_q(1, 1, ef::euler_gamma()));
        data.push_back(ef::legendre_p( 10, ef::zero()));
        data.push_back(ef::legendre_p( 11, ef::zero()));
        data.push_back(ef::legendre_p(500, ef::zero()));
        data.push_back(ef::legendre_p(501, ef::zero()));
        data.push_back(ef::legendre_q( 11, ef::zero()));
        data.push_back(ef::legendre_q( 12, ef::zero()));
        data.push_back(ef::legendre_q(501, ef::zero()));
        data.push_back(ef::legendre_q(502, ef::zero()));
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 16u> a =
        {{
           e_float("1."),
           e_float("0"),
           e_float("0.57721566490153286060651209008240243104215933593992359880576723488486772677766467093694706329174674951463144724980708248096050401448654283622417399764492353625350033374293733773767394279259525824709491600873520394816567085323315177661152862119950150798479374508570574002992135478614669402960432542151905877553526733139925401296742051375413954911168510280798423487758720503843109399736137255306088933127"),
           e_float("-0.8165917438918185178651038569451009046565010993730083775765560898561151342153833371190244223225676693063261697986533252551461090436427328765239532468588623353554093409432453153522730840201618490470888241537709400712765488436604330898872122159202213953774479933089716760147827786991376692358004920129482028676204611128275785561254237570870946174103591802813835418417213059043222264579711131720833730375"),
           e_float("0.65827706556116375228485865114269685851405185688350627068574138390616456134217466935927981921053262868843020307514990652650542722516347626631103484514301444270483604306942802473878045329529894890352485530310358293426803357602574240369745854154920290175039280424410800647280378184021485628921889882739009012218015405277007321620955245905943659835149830849755109994095640197579249319867297204792403862939"),
           e_float("-1.2246021435804269837414636942982646754955477180345390792008200143934377671176786699119430600341614071101193119391504572298748002612359037124842205639807438516605092211266809263817673281469188332590741173586675439423701744861772730776832436463944665097256439818826425822643673458597937522336958278807689940345316570706426772648352290516111475417635557790436428221632991943668898081674950620125770450017"),
           e_float("-0.62003216591268292612514733512201163886960904494433310525815353627137466349172327443901546203002186564537343368796585299620483452154766833240777301859926491373728123759894239473621671003025209619609657112632625539941850455931963073139441540311954350798304789573002127222805738514194099555036295108991393404100589192037267140266788535329625258482710587695312900396438061857917335043322344598601915093355"),
           e_float("-1.2444031574771982309708349720897837596695421964490269859665832201236452086567004732287354433495236708540835629547285239945516521023653999349616725501506408164465843339387650614448783066844003253777690153437138282568768086579136676098748310964460677224834821244757883025474464062809422258000237482118578593513239372576841998988686172332254052316415375422951833656896725067946714045100619877727338684622"),
           e_float("-0.24609375"),
           e_float("0"),
           e_float("0.035664645553349050946732592497395758440487042640754315408258779225224512756655754581782207558397977459261914912277076213594571401771942311748179673667353155704936718133567792951956031440243095926648421893309622296099448913059244993491271916679308868215942476217934036727146686491560003162719934457596707994355675932154508869520061769012547162503303870579305012400495962901502799013809756865900237458677"),
           e_float("0"),
           e_float("0.36940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836940836941"),
           e_float("0"),
           e_float("-0.055966012084606378542509089183591929053205715096259100891739561887504243243280891640358120157235858347343525320131670180561191524120762357560288466255662965155544980831751469807468382423136925926377799820683494475325301559027214247614972677488921014432901370444149856696564393386085302578300115830262092221749692201639265167231826961297924908148942501745277454140116897055122574250662287627529021744952"),
           e_float("0"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00761_various_legendre_pnm_qnm(const bool b_write_output)
    {
      return TestCase_case_00761_various_legendre_pnm_qnm().execute(b_write_output);
    }
  }
}
