
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_01001_comp_ellint_1 : public TestCaseReal
    {
    public:
      TestCase_case_01001_comp_ellint_1() { }
      virtual ~TestCase_case_01001_comp_ellint_1() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_01001_comp_ellint_1");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(10u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::comp_ellint_1((ef::euler_gamma() + k) / 10);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 10u> a =
        {{
           e_float("1.5942303690688550622430397952797487167294847855655368983152994187390545182434370668217533648137850409438750201218788312952042931620202742536906766072629777086916090870020115943917536527373239456102720793424496713528449338894093922664172242831532769163203290087947689526913094494022715978363444234237533143485582862578858557621941118262533598577669202434223503092506518139729541846120268583892999101006"),
           e_float("1.6389136457472373328019114150286265801136119799094313520543934212682219217643913452068452580848393073757441208842612272704867051721935282986619846253166277079784743811001872342701479897614298097777975820843961913977640138619968471717684401189475593255823560874599563004302143378644157038799955320274939790631085466166384868521235359683100515515990992023145181333059964440237877853367748643137826404417"),
           e_float("1.6899574847520692014291580076687668926668106432453772624805453725490633321335905247216074906146225279011937590080403239472701659982782033849113835035568126274677799546407263078205639898764611409607235317162898105062255964232580824209224509444880539677538993203988346497590607829839573807453506020094757476602829709311655172139550941309159141675194023115646758270879443311656783331882609613428065774468"),
           e_float("1.7492851964452074103776747698716854408311345406227778009160935496020642917420891097439871976255211790601115280425259645343313108526919504897527573091254610351848505222815167622229053659629514619782285228309764972029567994335690311955185230010319657629662190000098576463087757714079923958826459671304187472317547861785856076484406669614415645779816268231221489613797629427177539328961730157709379398762"),
           e_float("1.8198226233020170133397531143540749829468676190878138753735278469789763189341499049212534996934729197165318812910257323391029010754040855732633122251391764564934807446492603220253760464390566473366145146860096737656325041536718429552204252563103703737840082982155354653789259867567740467578216952145726638708123018991912208945732862665224753891646488624154337303957453453755026285220405772763208614585"),
           e_float("1.9063338741534053881097194379635270341009253957520564607987880956317121140923534310633086307425045212714592842436952369847514801508496594969093829402463840856313946446194441031684677338668687404769997913171270851946878296703509086081668023888375479778542053640138261478715616558088811995024918390537921892831847937993698282969115045589569107691531104071923979509398866142979861740946924186241629729329"),
           e_float("2.0173550474478143683042440479103466956918465904655349600921181485258949395693239977990749344421721188442146937667508063083712583498324631929994305912832329027441393145645337514327413355500714370751355249460684452107249060242508593535769081057500561288372923110249545179462858000902917367441152777438187982140949448594327848274504892480168923249465943869321333239202368859104076274206150079681609971005"),
           e_float("2.170584251036027484746425540521108426279302945538487119076135470831900849651994072297216226226903420496887376604790353840397250797970810678257778949997433111928219308208406622156018129797696241323819899624011398367150522349575675261901590991721399297194480729788440815574291680193805684930982592396091369600592285041870197084763666723300696550464600452794583059645419834070594503209853752054160181798"),
           e_float("2.4134548919230558145511065968848017905428666788303177375701267659811838395808587085886571389931716725039710776638017897980702625589740512635433565789564705372213174966310951791875971594289710134735474905245306610826455539302758695213721636201873840827523804794995201792379624053475460439914099630108792345383293126323269374413255823064219749595908389080668291445744398691888421324114947042586025786794"),
           e_float("2.9893008064914523476181894354903797568983251272459096883322682699645051672053370428909183782726922221254864833934904053867899855993131067864449500104897142246528347785834057792432137414062067531825835640520272289858707252823666119800575750886586447362567078119860068007883320991919725952898100467854765669226384968169411768602635160433622599228179352346144446806154766652519878834925477709027175717109"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_01001_comp_ellint_1(const bool b_write_output)
    {
      return TestCase_case_01001_comp_ellint_1().execute(b_write_output);
    }
  }
}
