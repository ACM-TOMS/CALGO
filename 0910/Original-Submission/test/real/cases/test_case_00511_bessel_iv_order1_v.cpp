
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00511_bessel_iv_order1_v : public TestCaseReal
    {
    public:
      TestCase_case_00511_bessel_iv_order1_v() { }
      virtual ~TestCase_case_00511_bessel_iv_order1_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00511_bessel_iv_order1_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_i(ef::euler_gamma() + 10, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("0.000010235914390696787988454148896144562006845329309929544090374465167036781303493192340102897230950421317083813258299641388116835792983140270723859922116807029185012665383923243315544134201599365982822271551964384568146522521836814141427165242696912221716846417467739867227646609929160116742579633886831732466022803570531098585418140590044855187801944474032260666102395847522168508407079079498526576566829"),
           e_float("0.00022200500112178916359096984427526661559265384577815294855692227758187682460233446752081278237822592210437782905069653776515419527137026036537095956829533628238364032799048606235502966998703175482783120552395302040085847472046051437746714118375889939030026439377675180461462838299487403529601631930506804199193675247092656805996814536195530825918430349915078439991840197607476839767591060549487526374192"),
           e_float("2.0448736809396664362720156765547859591950472291683266606403048128777688919052978503674324974700801697380730766127549587374397587644825294993050443431867596043300490087569240259320704608738639551617742718290405222422820541220007855636124723762956892500780798896769255174523685528664620116027853726011066311454510655079634846183227881422493418874840792044385539410372431283643105923033161757027200135304e55"),
           e_float("1.2190236842697786392653163441008128852515636672436412522286962903984602558423352052267766100916825061309610740501432833021890693630939983312198681894759273877134925278602432581386669464887931439460482639228694727917264624745658346399026455080699380375507038535351457724018731465063849394325981041907208111409560245102368269765020804509411730198771418063525507751276291119858699265233826823856673360519e949"),
           e_float("2.1744383054146495816759728386005911030138450979874521550815129043951153171636573621314788947909070839224651153952791254623832615969487683420900435574638466413565284046217622429688113442020519623546015937472367496368246671507251356600998429093861465143362583900676988435844365548306144523325330044375109663385401593084961066789977170838612043362587096079479691344030633815633894611830631593723425480556e7114"),
           e_float("5.9562251736945426684624896916489046836243003601381788795360528661597146562796734330632598513670882838313156086117265521965642347975145177678197260004277856707961010212726992053044003249512416066120378255734465607591224976186117720444645860529214501218665918797901305793514942966985876247730291209512273153590613631304747863527801733077821742734879544683516927447431852037789749965482172839842769584442e33927"),
           e_float("7.9754296053552641483840449239274562927878655735905515942144739467747424557775507871469804910166663625991194478064026104730024931027749860848528669543920355131041345978191278247223779093428291504148064113234772468945492142273785684922426795562741692399818558209784628621791384194284992053620183056831339451527209565600176621430161769395306613488853717326468537938235019287067357017932668056437562820664e121572"),
           e_float("1.5414273756300454005198556576570000879738129976734163350255676376689219404631878141580696478402049575449751801339901903220966258014231418596019867171673674831981136050707240243267026615411641040363882454199773620486979642938238226573066419205498246454412819439688055225297472826493046763887246432540939336468033070086273869515028666334187108049183272473013555473907632247196904618685822138018562893781e357658"),
           e_float("2.217031940304451702831088838930652242724801317568468740928480648460318764060383015727319407731141755809548672066104125133597747602840230311592336345820839141839242488425291509720868721397191170502361386853286858183214194301433983826509805499242417379288899863296748664909955747097489356353939193042776172580598416112351652644239751050845887880261906309716621723830128827745344842510625254934509427548e910779"),
           e_float("4.6692458406790784447692499439025613648311087089256872323961775745979822843698783664061986583867477751280582931629468503051405550171828757431712782733600316011453558099738530209765854989681089227444658606364742521171641980754861687595829130038262947485111624450892525529404796171649424189698016734543845877042022687958078759542072630607662557370568187496293124645846059442486613367042032087164203795312e2077214"),
           e_float("1.9244934874271203140840180869533944555680213602619442260892505594329340734294760262173400360947723781507515441977759868691235983043293610814525407105342784771082466541763466394176211809705956347303875752061670133521140789308102486938675681605828060807518113644805339066880367011926274989254833399094151078018429018166205397776599921382293539789431255474962586801362108078956257952422823715038377221435e4342942"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00511_bessel_iv_order1_v(const bool b_write_output)
    {
      return TestCase_case_00511_bessel_iv_order1_v().execute(b_write_output);
    }
  }
}
