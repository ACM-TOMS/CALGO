
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00461_bessel_jv_asymp : public TestCaseReal
    {
    public:
      TestCase_case_00461_bessel_jv_asymp() { }
      virtual ~TestCase_case_00461_bessel_jv_asymp() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00461_bessel_jv_asymp");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(7u);
        static const e_float v = ef::ten_k() + ef::euler_gamma();
        INT32 n = static_cast<INT32>(7000);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_j(v, n + ef::pi());
          n += static_cast<INT32>(1000);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 7u> a =
        {{
           e_float("6.8281310469516317089090987504604538394275757253656971348975883620192230477712991947595035609649603345340241700213030637583150397179416223010970637841501364272906590266340982118602953385393113856518177230184848084688094315193824749171932165622678226259971418067071675871424366840960988363571465207606449155187364754638963207074636373003865132827993290838816295309994874411153480390254184843747816019035e-790"),
           e_float("1.0665228644157283809852586489266051611654129576567777735332570941783021367811282849066757193475540364442194573073989055381899225430101767033033914289786516930322392143239379482735171491971744710246674844923707871729732825111561355490308455562625876797220907002415765171425938417415035308774817563855264375722121442438287480894271798289308265780951510080563724158052282824123826399054234062674270378845e-406"),
           e_float("3.8380881516293023224585529972279922428271779639786242475111350012346759347095635133980252748426950677970252398798170469719516979865846101218657607888982484098874124568030973111890756958884214369217392030905647845421608931775919479056057959956612090003962608249866345121980212169544241501166952915293865534853868326712098625493823907752455444533371071307932762276354012871840716627134581809916192521663e-138"),
           e_float("0.023017878133151754918186256503013224150548689951624535655353680181391912613492788994460816064770888343521569837117650926208878953227151592118826603499671221294547982986725953805356310819716493053420874784435410139570189357596710420133427232008047746242182227138010838697136217604459237211844089194129516503113709330070574429074385463480530663472041629991787805229653593539170763169943335003394832992111"),
           e_float("-0.011773061169936288865272576895789237127140596562251321469951349080125462506936899535794921993118765006270099601293562379408531273388385066097588135142702655414905810448367182995494042519803885738669623858758009902055543119366949119503165320892979571353351404002660515841879774245442522167401656614435105219408065031869032538810404519342909435923822187325217657097075988055199421756051657029437057545344"),
           e_float("-0.0050071982414681868533053452419914224285723775322449335472000940483678830004242387312816769446290382071760839496946779945771024386145069122371338181166010202051922799646154441241420991119093010091396394934699255722855329525993754266090528396067379960002522440874843732028591986772187714801747687013901518473207961057039810484398807200786991094422887927533011060426245854090774396970621099766819260337341"),
           e_float("0.008624916128329355899461026371455658982475974147392039028206194280379599342015679532624007449029176953388730645518312385319042491385764235646903745679199695768402670061826724982518494479640769524939541613058570202808543443162240010748798455229682084370718864474286056119264490203389048592385436415152485579139093700259573563200794858537851257417060388357337066378021759455046744326643276866854278982283"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00461_bessel_jv_asymp(const bool b_write_output)
    {
      return TestCase_case_00461_bessel_jv_asymp().execute(b_write_output);
    }
  }
}
