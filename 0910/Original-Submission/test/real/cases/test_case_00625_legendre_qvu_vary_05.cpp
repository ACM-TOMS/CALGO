
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00625_legendre_qvu_vary_05 : public TestCaseReal
    {
    public:
      TestCase_case_00625_legendre_qvu_vary_05() { }
      virtual ~TestCase_case_00625_legendre_qvu_vary_05() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00625_legendre_qvu_vary_05");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +127 + sqrt_1_3;
          const e_float u  = +127 + sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-2.0751619309523320679285157194333379206557564482940313005840225678375730982151575824985432769772177476624924981770486181298412475621888349998094373053185148947636069270850483304127075190097080144184854095173399086338684306712392703495895521327038861014249915120988754546443876348455332786323479586329016035825344882088533743161003092206343130610561641143454508500993011116679840704576671689710447249671e373"),
           e_float("-2.8254357748805485647672705465454793881778375923125310482547221218117561590097377911583699625222554327324359325327589122196058263986772863014013670671464005692348381776259516939501179100855345650662316300271711649626477126813563944450108906081225182350110457987023239497257278796433947959161634722971741885137681661604543224671099879847342447188358655130199077893024358640280726869540339340723391195838e277"),
           e_float("-1.1886665834442902132684338827283499362653396624189594476816717060028948399424972138341590492039977516220790810855154249844319530644451911166282460126271755485629126765749389321562624199423196339877419404969939247620703072237164927063779276025716496255592529960815547881813231956611542852471176159398074921662590728443974913474307328998888057722502464042888149587835984301368880208644416376805604252005e262"),
           e_float("-8.0296718206924508094820102425055806292450287358702387677087751917161587812022179412672727274139628895440667038383935670033343827642126839719718488997397091863183632375007362967985614355185977408226087532305870727306230093136852883029756900455920276096192324200608486660606771611340390101724168868292791246993293351466905715332551936647811233968410008555779588366727856851388418764840822634376742382864e254"),
           e_float("-4.3889132674652797829943401058396473479783358659597400557488615216997270725326032148957650193217113270251089193354114468192211568905061642647853313348417970670342653376057842180819514321646418416419239098806470960894934911154582039215022417921262763563056301102456444260562377194552503725271547958483656376094282255913643607020976248379023115696100781825650873546072107205157606595394376428234398414073e251"),
           e_float("6.7997029953266770910356961470102534553623439352403532821810452597380973012121646333453821374997804227559680988136810262507356976809006227744944873149047360059720969365223485807113255049535903168175636025172130466282676389295796873061891897764333392457943765991333575456018609132184288506790248348952765095992442524383133751323339448536143135752135772261396572733734274857695569647144548801507431291445e251"),
           e_float("-2.7754558912655932760328968805715125999552821012757585922653065535002726717734441004023523591524103876009396990587838665397770276982624658937848138465811638293723123356999892697241295024420331121310314328697006729028092487293285878421512179960327946892552512461295441488740466315679386298197232933070517487215766121392221679741138296511556276699523924703315870768322669682276367103939080788278000151247e251"),
           e_float("-5.5086896769899114054960054992474757973217305597758997717936727318049005550366401221840682275450327041154679359970659250185124950854077563653594215394935312317241362828287441304274257972295754720892342104733427408882438506379876491523265351102091602520289848798888469588538124907524503384860572852158267230092403708566050711920166570995912987406569803697146230094764891348401335693309171016159115192737e254"),
           e_float("-8.1547484863958266735948589230430303850368265455803029148365756194357529007846022509419615297320030012248011691393587819422673218374827824835439901507575458726056005285306765208722535004842157643112421599636389315871591680815542470925973763940757682705801873376611318564998597455265057831105777158405288061721791570798064373246284889311539517978644603742148085550528962788742376264428915843707033713684e261"),
           e_float("-1.9383667741254066371719314167915335356830081291304543510955828744072463965759074400617966576628431735806051824616969717814781161719668598304791279050565451485169769306533564872260681776175663707606682305486686182759268008796130372860468736137129574753039543891794356133442086412442593313582463725268268813899478315083773246033650203804203391039765450322177880716247644728180208208687610199300030213462e277"),
           e_float("-1.4236476276152405163127802550469830828855279597394067270199335570253424671077098180872951410432290667112265926406439630504080221120872729731534940746779034379113575369138720664991193576469334383785373952773234928074514828065802613653240131773997495020139586872797674293142750258886577013770233655901440864609778011980515590059887532654644393589127341288840600768894191123204672040233560029078950200939e373"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00625_legendre_qvu_vary_05(const bool b_write_output)
    {
      return TestCase_case_00625_legendre_qvu_vary_05().execute(b_write_output);
    }
  }
}
