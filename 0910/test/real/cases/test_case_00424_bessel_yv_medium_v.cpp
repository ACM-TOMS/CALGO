
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00424_bessel_yv_medium_v : public TestCaseReal
    {
    public:
      TestCase_case_00424_bessel_yv_medium_v() { }
      virtual ~TestCase_case_00424_bessel_yv_medium_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00424_bessel_yv_medium_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_y(ef::euler_gamma() + (k * 2000),
                                                               ef::hundred() + (500 * (k * k)));
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-0.06342951590771823786944083271197781846913263961543679419868281746565767976883952145272976281243052136418850308494368536868717142167726524027602181236432482743978534185824602277376083732280598247177669027477988332021944099127600950127136482952978545036468519905361448161974738799110172068771221787223350150257955453316853855934990973916885533230262848761164983684780896691298535374727174246645502134115"),
           e_float("-5.3692047687420639352277545372554128592221720841820336207689907051268561101586026681009827145425526759559257887137240485482848526236254660112635143479975390980224367169777637201365481244449820800720774030069585939626589408043446033028495539924843030579473823706049330628269526544192638768721882848059269149474716816718997969115472308299198970965420818340576534563447331400548751234844614816150221224308e797"),
           e_float("-1.0476312808894943300271296982785374753471741979441836633405551783374584471428131437958560372715689264259106265940719585275118759006741220089429006023331251242690270006937167721018471210447564376280639769651262476154836586409119161703787118452831855330479431147238010771214664262749919849596627844847397988109321105389752251379023929688904812942950451135559571225315053185530128282343471588831171950659e709"),
           e_float("-8.9312166616138122261025108570345994243300447414999767976853301313644633593600367796277014563053829472525868430295515835321296479625236371434342745330927480767146344421550039843817422850408978910590761975559969802480295357981005154283775295591619106773741738163554499223927256740670715764483774436447702780259401784953735368957480203265295672863351960896657163772901375349837956616011800711019515246558e309"),
           e_float("-0.0038964075808182923180206336495847543542956823289023115709354463674676417880141165043708464108208004714464847391312442161924782747727673844550852529294621130899637501577910212152269117206289091658085887908680392089926834776404245164368775107331890156490188494221034626958753992122604428167732294837675863857925578807062438309384073024752796942215858655986814998325524825881512022065715871643995760111502"),
           e_float("-0.0039056414490069752153833394274089346759154894192834120714341667386865539275375407630143858373281409487309676915648049297598262376774448153672433848621130255062813795686144876792053440660997674715271779993376591476683618885410737431917918751816463495539271134223292548131130393380865737778412781445722260047178216732527676850115580580185331250475526541672181195861423138145343937798797549851303881068271"),
           e_float("-0.0055695714955347456187168997095767999806717629948863591457975019907871549210367102634284504486094449119982823549025663714251145354726088035094186126411443129351174263739985734258131375447804788664123839638266203303380966166894805346774237929649794982352725348082355350885199385778635363183986487227982555783069994686247053812369230527608456551157950959716984071989308199908741699729527451196427368854998"),
           e_float("0.0032608182590432837115929812595658833481211250794832197492185415326675346545283544409625660788878421022437903420539897899795822559609651208779799880271488532941978576846099672833092252736344367285559960854776401392768788055728939518521672039534700155620292622698724914282655230091196948628231394406456855088294265022930687339290357367727299463348831745166941718327254602501336326032100079669116311003058"),
           e_float("-0.00099948932389549222050421700634077003553518700406226159199242458427350013169863581455080301938610469884459858393496486524811578403013663831913561054526960970123298956974627292775243853554888670802750582972157157601280994583708172892414612196555024623184554689348175199796008820172263248855223076375863639392238031761230436653010264517576215304565650990450823712424257117694207101133031139415872117139491"),
           e_float("-0.002267538184263106747038336819810232117877617779452992112970615119894971825710076668257927378159160922053391169447072910895270240228847189916561457748494443463527832166707885448505096070366777690832021244488393891719917205737115987217675122155557911332628824449477199128751474542290064554012261453153769944419602668789270457206709620768565659112395468976929878901501403559723809630097398236471364815228"),
           e_float("-0.0030461952633499582415782877959382232509500880911598571337824383382084363719046419072656973436627687461066414099043426802914800471400091925917010601356508077661941628270190404275783537040040308883636694293305306291905173130245195454763103565082160602789494459965301407718104655828065255990678039332342426474014409778112422978635462293480800412633442734062006822624825846468596095237946001001515336331986"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00424_bessel_yv_medium_v(const bool b_write_output)
    {
      return TestCase_case_00424_bessel_yv_medium_v().execute(b_write_output);
    }
  }
}
