
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00493_bessel_kv_large_x : public TestCaseReal
    {
    public:
      TestCase_case_00493_bessel_kv_large_x() { }
      virtual ~TestCase_case_00493_bessel_kv_large_x() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00493_bessel_kv_large_x");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_k(100 + ef::third(), ef::euler_gamma() + ef::million() * (k + 1));
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("2.3316367917241920923388606474643347537771988396081629256693900226419274703304443639722165677831480851561413209164970936314572735900989216567016774129705740785943202300380257256924480696983848279621114148752703770925156879299132960837756535766121521295429507194656366762590485284642226351514601371766134401724830075911053722050510016504563436590532225574402836184933056010148669431028375025018962695743e-434298"),
           e_float("5.4218781734311990521140239972378622214174808432067261977053334823925437954807968650657335803287493425166079848471415635933588879381930354451387478149526605278238661599862376633655362665682526415465517049966366077473958111617619549565395811965160657256699946722124054460793114148699589046999710975672033003441904533408688571036668357628243906590768519834066744099868385833875522939434756334934745502883e-868593"),
           e_float("1.4582654120325022701296716875083102746403538574590613650777512784789372684703723707355615575156578679791070403830662039190173574607536752333142670741460833485486691825489896679593936516203953327746213082415900561504149057843389749363314311051018115654684746245868910605422334533021676102340499921096240186609515352274738294240748494988888869041780162274898782267999358724087747601676284462621738610369e-1302887"),
           e_float("4.1618057472639765634381970158993550819524304257616830260690555015176891646915100727138881573071604861346768485035646019843565985925150364945936601605796119211009661628627265352218984847666908851389309380717109208726620281804615331087726965428025300128621871432250674506393212757620941524474196642508127507068095272778200139677295219069997394017746568262888616079692684348265580142466436741983247389952e-1737182"),
           e_float("1.2269143829275653925483915213357279084511505206575539621936335292143963971925604300548739884871331274486704694527662371457695250115255932932083416385605418400931318162494775779847546625928094755220505900294946917855366073610836204939138632915513612533994684632525724818183857325802582775876006551554554453682080579022102955119738360538254256225657471450475083956347373499469063107119827315125176880859e-2171476"),
           e_float("3.6918795467190520861572894527600562670484477403467974754045078361088864753444821827150240949221618875990565653182805425262231839379322788575727200920355381241174692725900178877644428515378753003991734273950814334859627578343104696768446150309540501641224701506600457460631229003862414633884654288885170429793214538377776980226800425490404856006172595796579761305688679234923463386979858334630870674567e-2605771"),
           e_float("1.1267273429700449606046548024941453383186354618383372463726945372351668092524453235461130337830844410350187724880312952416017859505881495122503499809311794906396759628231037345291415402495390055045347094371419326011203717752369453826333634163930170402349695502817988362567823263942900969692856982121382235463813683857201327683712813970333946847475321862852566427552805934886119148427274540769770329934e-3040065"),
           e_float("3.4744060804512977279139519447969960267358551953297245111141202465491696392662086129125781719267605516532285074936656326318303120646723896878844500927492688869215496216455768031408033755782952932771129664852487148926934281764358297481217544907648330479272706357683239330169276534699815030644460600752197983717805992716356092403029239609546089203555407877118505948750123161808962040684842657643635018222e-3474360"),
           e_float("1.0798680828221390344113992708447103116815745784364541073943727392954102663271780922401089477967522197471526888252225838519177804392009358936522519249396755540146663632286644825438539128814850773226601665948244231497174538307799331918879157466474969891012631411104836781460250457203009462435943649411892439431360135872131645100730995507654897808785313925945513717202427014077561814411855577680314462621e-3908654"),
           e_float("3.3772594177436676239068811062809380649276094394993245286515773247701261136666653796941961948754557212948370726718948622909894221652730493768976983556026160457397773176051822156503574569337365341996532072396563844762701467931624466548172801233363328846012451002757329680409723161982885696926089461680384881964409850300596637937677633453642972047303677034327488797236791717702458771909750154446866816483e-4342949"),
           e_float("1.0615610031313900265195657217238584150441769898846629820918546916933594951220002562539583618845558516490678644253499587696988342926663622752613437001394235246653862236299595173546726671002585192008330972417566450310919742266697635351873666688356019243197282314239505640516425602018723814354509612855557055265971209971221556390381693801454840825928859972727395852054199256722777530316817528349698950278e-4777243"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00493_bessel_kv_large_x(const bool b_write_output)
    {
      return TestCase_case_00493_bessel_kv_large_x().execute(b_write_output);
    }
  }
}
