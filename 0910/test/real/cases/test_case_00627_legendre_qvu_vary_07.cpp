
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00627_legendre_qvu_vary_07 : public TestCaseReal
    {
    public:
      TestCase_case_00627_legendre_qvu_vary_07() { }
      virtual ~TestCase_case_00627_legendre_qvu_vary_07() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00627_legendre_qvu_vary_07");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +127 + sqrt_1_3;
          const e_float u  = -127 - sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-1.9370994066236930579322121109665677730667118309855999568845998867579322547484869658393353460976242405618515319991815973713843665970354309936102675506698284553574030138984759398502450387300502559963493004591547254974218240909865234433994959659788648586842771986283525375713666537822485789328307450967673911305461130674752869961696474281364249359687375881558852983397597244109235011773208379570016477619e-131"),
           e_float("-2.6374568082321798992983917602364237252074140008991604814637485703127653510367026172736875355573120969220171640130638978234612743661831485503468206913587114369311216172124821685787089176530037982128367021630899231691738448613979435323310386431896995291416518676925700993211971311487845637190254036984273554522074546325299360331997409457963008185560355886995513939790341645489893798758451518741639234022e-227"),
           e_float("-1.1095834494258745396188346733770200121201298632134188609010950868601276698886220984775012587081765614605706602903425996965683585721275254313416210320111402846527340880618154063813602664676960178122945825728480652627562394126358922748807427834090096864951295605487069990853599835747567467686418794551287859383462524006391155509639131556802902958017837897900288473436252022138668255832202263519492778172e-242"),
           e_float("-7.4954502091102973201076067204140197404386448125515708872646167923311504347168979797332704804916274249683529898646846713808752274124113101778435581266209808538012060690609654819793367238375047780212497912208633849297216031643917446021576619505786705562700992611167128007734022198493997645447558741016994199971997694323775554703652317598688022912055918997679236614742497347893999243765646838210955282511e-250"),
           e_float("-4.8344778266960027751981221314250931448634990217441197630590432344119636875431606546959700650645300520584616039747033841121219684190736027619834518391729163889413498752238823774194895036576186225823203738080040689270765666613341910449766847103569316668831336180513045338642979741637909247000225198057808297299192138821230372240941863003076905954258832455880126029499686753408064463191493384358283622765e-253"),
           e_float("-2.0668127920948880294849970631119465442646712686517380850352500717568028702739683553073214507046565440926400320135354425981897164594629256082569950891876506482644079643171686981881176847407227482113355514309681705401829943147396363521542519035355890039449596432986475016387550667414420252406159297994830173462202195496295817414965564571923009307200108492181848782075325912893848580377241990774364294242e-254"),
           e_float("5.1907444726547503435006342994928060431135202429457205060075988512797335479880368916237597542306146409893411053794751901038177362376215477808603133695063091931528285332188502579304356191905079961039797367852428652367381237015161741309992112977642909858196681120479118229824377462590615462625214061630654346100814725029922250443762407228496990689837391846975222782678147129405130841795227225637101504439e-253"),
           e_float("8.1686799849208385614880996216058088670317757945935993439406917952836263973859486088148039277338375193890004862098382259329545611366070203930208640184905719421393189277364329769757149265983602852887350463522369858000226654406800963379069068682718478697682603674295695363975387655073874122795927862457599823626116783803408601872712364035382721192656687427168368665361540419886740355418939431417773058286e-250"),
           e_float("1.2092445263771305008705187720297414825082570947286098237297984371678223668052457897479700863721219742737850291503473811080706982968255557436377192763261976779053051628451496753091328071212037803471777047718877237915077909517967995441041438374901834391231432552533879404119328407310823861177472603038136762776129514980583911263187810782949764920493437619278275365773152131903385712597790983165876493109e-242"),
           e_float("2.8743491177352164885865276896163414974393411658765635360753187643013392065344324421904263116835339662894756653088807495964897395809188560630978814204448045159596663755472486980131161877834460062967951657817160918340024460725599620366165932192506354917323802365683081360435129465164980020368251408642960675105275687901689994239812123944154597155437318214663380255504201377450714016372148342913295658051e-227"),
           e_float("2.1110866926864463065016713243653097363355569456444508764541267191884052935206992456222756296811871290459814157553677426046580801159345753936198408178503288370780290141818792906685065449771610124546360185626930656708598228303887349686179748430317436075181663285748335424798591641432206211780482742301027616052861362141701874635332210524662418733902614058445169953748677534789935986074218290528611703969e-131"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00627_legendre_qvu_vary_07(const bool b_write_output)
    {
      return TestCase_case_00627_legendre_qvu_vary_07().execute(b_write_output);
    }
  }
}
