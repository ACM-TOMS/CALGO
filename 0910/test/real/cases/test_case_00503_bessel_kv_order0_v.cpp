
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00503_bessel_kv_order0_v : public TestCaseReal
    {
    public:
      TestCase_case_00503_bessel_kv_order0_v() { }
      virtual ~TestCase_case_00503_bessel_kv_order0_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00503_bessel_kv_order0_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_k(ef::euler_gamma() + 1, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("0.041614213993697540340735934994934657830461439624057119089667987304787800936400136792474505314409258934151456809875922891669020459431064478266995679885955577395161238373562807025667526242034048456935575577761470106765501949796473804829604134751693797310295152968456065036153478108172192719105569388772344777064180889830555273841774511029672915807610029052017701785288194280095377177765892004938998058095"),
           e_float("0.012468713227113378782158588158718039894162457939688557437195149138754965117354025209772370491486787573172655720668171526112768673085257102737162991749845415596727026028470034640476175802814128195027611198455210669887771188847132165679011271684616714237711403838436281331581886588413921299159506834542073829353454321363743437372120375479884665167722608594369670683162725418820531094699748379176710560808"),
           e_float("1.2269043312803064380521948809858800790732292923603515455567805348900219689402474638766754977800621374436946667178389589226359203477033769521862180403274212575637793619953085220628913290115911905095105916953913465978891435116506914347357265938803156451738523868480426006202283865192284083427485267870105682301096913942529702320112130363956230258059568719301288702371114427671997634674075465850222425803e-58"),
           e_float("1.8265744090224914729814806426263438800822806129099709350967960923823693834013908180390446363858089138484856432711551706908963623338229912963894391240148855748834983598929026062461703457616785310060969291131054363164375664218825557866710882309741656003084946722489408422114306233070236558978222612724557080036657492669356013140163309630488243244969948398953774977542317076762675482463750431125869468757e-953"),
           e_float("1.3985246595748431042929356000962190634310911999268118095871177452166728946668511373771526664466222074834717683615132097056755385833411905398987613501094369109126002636154072996531164014435522579471603306385529478208313790690759068662355673297820361473621296575552731980556587413953752627205280470412807699844515681551581003994971525038232697056640513852543697355708793053524904133115089394475020891594e-7119"),
           e_float("1.0737109080666395125676986193380911589115194722428100104683119415068833042565834464863070199384432252433958140119660473765680732705956426821572736482086774039829855745959543624756727598248711120115288302692430819854931792877337287549578972522577811152842764057619358725185409898342296890230060431056312537806190538498324275724945662296069929754467362399398606296485747785665432128051393811137671305371e-33933"),
           e_float("2.2390688000967966886782838226056120381149779357578464143755668518707591105100452884427474920196202275338894951595418388667954145197150236306286458783191909382168897318616652977684664780500548721542082903121321793068721502515821455246927034786749605709273554431839400138244648269650485538397079364106112762606854740821202743066445350544851616483055869290672818098147065986932506180509247045863136519951e-121579"),
           e_float("3.9384937130140658802443006224946222126064475532637009346620093953814188211566495947795891698749360046831600859679549573747159077395610364010622551988815102143286963864458246870048560301291412475106204051062561632661797617624183536081581593058940060483419476326805048378609009683712704606256457778129817668157167580003957145849065503741864528984482830516023889272851709582012213200941256202388422529609e-357665"),
           e_float("1.0753656707125072004126470669505674494841470190322159420125742729270630509776804560578186568371866438264350600519609591045371203429906893687900645682876030883693553263042413132231614428019983959465865529855233741255691889165330440985752073218321149934964968584932757115858897501162339153082435672859178898417057337654568798481551419902912589144188038838227416597800879398933187299246085308997829685291e-910786"),
           e_float("2.2388265375640649770240666104125054604471039851770946840803048441067747349973578498310908593318043702611305672581140290711678345349770906981052564708717307081895769098899105137799381189457750934020313495051570617804322326693080470442091699684053791327772558192029832918301162312408340015319793486390563438222532039056183518187394371690283617483209763972936193409191806884767714304070975271147161718845e-2077222"),
           e_float("2.5980711883357667429192589667148772681712798538795361616506737655729242145646169773875407083508497147805298338047235142638120073802164009180958786537786467209898125006587467924809244761805367614963353835584769419036943968435970719797573235259057345985323692166811842929824338033447906676660478609612215337458959830301508509183794492897062382145042028531658492469484133828387724318347879360275968716377e-4342950"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00503_bessel_kv_order0_v(const bool b_write_output)
    {
      return TestCase_case_00503_bessel_kv_order0_v().execute(b_write_output);
    }
  }
}
