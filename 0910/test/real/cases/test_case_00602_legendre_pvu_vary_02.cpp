
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00602_legendre_pvu_vary_02 : public TestCaseReal
    {
    public:
      TestCase_case_00602_legendre_pvu_vary_02() { }
      virtual ~TestCase_case_00602_legendre_pvu_vary_02() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00602_legendre_pvu_vary_02");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -((10 - k) * 13) - sqrt_1_3;
          const e_float u  = -((10 - k) * 11) - sqrt_1_5;
          data[k] = ef::legendre_p(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.3655636642367823771464462770265439342526940154540767712770418523512270439681932392473750389566774729857706642639135057844349524835549997522282774283465936436709196682643654939706283679575759485661798509058665006538709049758536928541072577484580393075910669385355159630931902407719360004270139401583122502682691487479636748339180626290064207204713282791909668955304332274914588855735286510430712560142e-135"),
           e_float("1.3505787081009889602070874322588302024483271219905674274451591306487815822768825686315634040190678706341940718952123629736170982044248957070498630203733364741709052702761506535531491147997874650148558384695727672096980175844921486485633824802528343518518531996487425421670691263923768703492232137103846025457318055058187600625900873021271214808759870134199930272204866320562875211188866399436026951899e-190"),
           e_float("2.6822007875301751045726167974666816086977917238485177910043136955929434350821328722522142078236578720454409410830702241056231008943892732469545881595927261739519924739720017488207425365615524403988066941720726736162559058847879518629582963665789628321570669506587717160729079279848317745731807264448644100622895759475642004019632201125204559743902447967108460891742597719016435545600167660679412323269e-173"),
           e_float("5.70697229482716669260801141690872641756520570985682885045628308613862479073329534901946085525719681244722898971377374047495871602953907916520673894049619800503851758144914405415396443228682637640195432366374804633429943292935523016030636593746147874402486065517766930937734592145203713069817173594143923666285974941504851583389908679251141048035926134248129199645474405056326886329892258534448255627e-148"),
           e_float("1.1770804561602084329562386113796770527610810057271148195941782350431237989985273520513538294554926346517108334734908337264577821186540267150885620629153696901874727404361321663767102628009461833854347216171836649905277556572246125087014097961059885525637519794563198001275532932070061214001141515472655717209037776782256216319372656688754491454512083857685265930592096052840302501327155713912662030301e-122"),
           e_float("-2.6550387627262492620154284208204243137609270623379356004388153170350242097596503339815419369068810018074308713856982624562721310913984691366343213537649889279415744965335667774735284701834487805365035981034094070184236234775874670284687074211506154286035930136057556521433847873616789824384556114228469932412280192309555274460026932028233316197827380438015732566360258880111605542173359206247431225453e-100"),
           e_float("1.1664015656554139579069274081480588198038891796671997280961601779585334508512833625089290180361910313371673153531098096132490030126587694467155496293948015746624226026196450454687434806108312384150579483917137367582563900072418721667456929817921029472714885790017713486199819936686851719022578569020109132890853337655040432000953594937695089085094068746310888298604120454231406668481993024987829868994e-74"),
           e_float("2.7642032492730757679028544922245796407688948169387837057199884117952885534263898771889799579001049417394614127217768715365667772989164845218094606747070211133234413794094260600039118424899046516525630989725795774332167348755653303019007007283595654500174313620662092495699325501641900712434937990468711797421964725471599058952153648230379860897095983492939456514188398694231285672294569509466093514922e-52"),
           e_float("4.9441420362586686572622218141073223437140166628781662851071475375035785184087847553415969178374304789433053027283243748912289208317442203629981098118033930387681450793780550691003604266128419252165668124465676088858571720995252310048629094511030588797257401901854349869848693935709557591332631673049210503926515380108583512390228876248881570522613955751932285743539137172290487887612633050540592433382e-32"),
           e_float("7.657967250566906913315048791755201572709661502155454408177464404430441672533812709296144450826228836309089539147817775018231771792462646826921817049491809594668921700613821137462043289436151044758333834558183898511999004854704243777625038259697601113976421074542930811101322163287684993056740927665972444931855166354423896683840544944953334187322940212767432210287110978603238137166191205530577678165e-15"),
           e_float("0.30571505151006166683652664163545524746758964283993534019947179182761464361697564620162643807925217558514939860801733553956833934025599317176117257845167017220137392568438637905295058725146300071485983419291371513156395870647126801469286811752468904731491367932104751496143244664948868143541699974000689369261517613218680490893702916067815051777810343938624298381458848303980130135664118139981286353947"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00602_legendre_pvu_vary_02(const bool b_write_output)
    {
      return TestCase_case_00602_legendre_pvu_vary_02().execute(b_write_output);
    }
  }
}
