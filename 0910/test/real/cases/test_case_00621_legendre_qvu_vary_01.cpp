
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00621_legendre_qvu_vary_01 : public TestCaseReal
    {
    public:
      TestCase_case_00621_legendre_qvu_vary_01() { }
      virtual ~TestCase_case_00621_legendre_qvu_vary_01() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00621_legendre_qvu_vary_01");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +((10 - k) * 13) + sqrt_1_3;
          const e_float u  = +((10 - k) * 11) + sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("3.3968003733956603269254121848170028976004233427784250513791648903058001683350792837013212902200512378932547235768489216643056793882128450231347866979846231866825714746792820700041723471784493860983681098204470436501810983606618080680059654013032009227476254763677170572058066346423794957727669124935727682612459083837532358463307530078289656705483675351330736371846573803314287746462339639137456340464e316"),
           e_float("-3.8133315594408553799019914439799171069337263979979240812291678642293718874637889396375618304131567716644925441472161130262479434675736467810407385833404521516422047979934367949851978528494548281753543005571345004267592295229181699460520431794910976627985612157362787632893051159466858541863915010526025675761362250612103576016295912433022352141141900629280287989559420211072058603175920505070247207278e207"),
           e_float("1.1552043844802641755376350891274802129666289475847058582943998579797368540466568761927155269487875924984576478103986655924824910902255955053049334750472515011911171325669772766502942909232000310911408659842725915875427831176286635271069296376021137174612192717356046735543127977109012233771573225261588786342001745749631966702387423238676501644549424497271167886680985469688371767426060728996582791433e172"),
           e_float("-1.324813646712909786986698624287904474709628658355478004446695201289696418931318727453000952701531712428330513970238723917782558641052052889184632676516122525648355735667677166793215116376302034002639544326454908151948327443291867519000200062144779272251472496554912381604840094999960743624718358886252536712991732299598679972213665691215079899968108848122536300140370594794397052208091533370463175532e146"),
           e_float("3.0946232949222708821721925754213128188124036834419331142366377753960391867155684175570685116978431303247483945464589966450854187041309057085708348230481439033505319490150650891278850338649682963268144709661515116791759084885079790143131211472049250327576967419320964355571368301807411765557576587723128493927351639743185213490370746368932706673358318544239679538170904013097206401988277467593590427189e120"),
           e_float("-2.7996209297237361156139079546003465226236103364765753324641169793230287386919616069879600832824835659611705166362746023479268852292072092973787095118373236431340063847157262207127865564344979912184845535459978704738997057650784511671966678205093908963334387492922194551999522680261284667430501762407269204812588832103864846292132446299278503969284445129037700972631228393359501073530639644774023919268e96"),
           e_float("-8.0329548385742022476440416858916522872133632296209856384468279180585963705271003697830921493002255339700500412516104389771951100029397736265285370857541566701740181567579484761264454438946422631443971195795924684069007225622657809816342073089685409012516372146194024159569157094512226683511211314111220612160885307399115957741285530194959397687769795989386325463436695814292108561330580906831522620254e72"),
           e_float("3.1158726983260530180148754652635419043307138818265596315029545407687867147191796992039678123594062937526032775052964320889904819600361096981657126317844496239694405212667205028948017574814152052066567892701743439308928806420371089368719187538468569146837740028396290768447814555946383200219959785447263794871146005346089015229692952600141068232587432476872621428163133420232278636049832695597393888654e50"),
           e_float("-4.0279393294637497952871908263059824402078461425264559699042677172911355605192547637928369609888736746501531987699514970151329479906649793283904374545441158130409436759851390032666054884032480432940088836063801512654763377935248011208741315669534609274499639169574713661884401867250895326197740249118085000939032317369905728709368972457164569133722668080441889026944056142180707728527268115136749145563e29"),
           e_float("-1.7990365324414830182392653949739989991306802874769284395559287446511037966907676616681382102163324969998824140920370930294547042629785947017097060915609980370427345390636701073329299627983162325266585820353384492908552861622216255671051545905879216757956445513299515541796578452702328181305659548264140838631819921534961245368433352965970471911213841876182475060464990186229585908774135787835233429058e12"),
           e_float("0.07877238420361893837406337865988173343763650525551425851844700958451021284849517582661756430609631286617053010110567862943103386057130327170557653239622196071359119724267002499113175883095041441086265723853497886391377789596157796543902865682244914660139311263841273167681598274506241784221457031237902226614832042382642102089623472885175082911135857182033921793871093052669265402487987297076327227247"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00621_legendre_qvu_vary_01(const bool b_write_output)
    {
      return TestCase_case_00621_legendre_qvu_vary_01().execute(b_write_output);
    }
  }
}
