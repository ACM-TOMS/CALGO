
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00631_legendre_qvu_vary_11 : public TestCaseReal
    {
    public:
      TestCase_case_00631_legendre_qvu_vary_11() { }
      virtual ~TestCase_case_00631_legendre_qvu_vary_11() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00631_legendre_qvu_vary_11");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +127 + sqrt_1_3;
          const e_float u  = -17  - sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-4.0671943290135468972426340729191836363162814917214889290470262351399522625759721616065201919973275002786076420517784117443569715759414299278187921810773723283757162913374498862225282657187131278871365693080448310172428701504923640766861931865744575974440154469215688827969870094362768704360580356400328706569112433279025318757836200417444364449140797854708181128835622924524168899826033593856908396486e-37"),
           e_float("1.4648144254430211619158780456261845061219005576366372953841348911312382537797510421217262299510268510253012498088524908793380940431953045602060183863514814808997684093759414561174967849666985891347073084714648114824832091827243028478011519633146890154737137044763534121912031005397503059754112031500517205667687007092486219371397090201167496444560795066140433272715667114986454569975446959667069758882e-39"),
           e_float("-1.6959573611405008778432420220401511373264427502973900907986095124597181362799398916563792163293845160221241071790597098512366525406479981009247595987388424382591770708417437550300343089995624060802398633126793222773481122342574461405634902144235855050693746380581191933266150697730425920097174350532055969624565244223620527180758172117359757927754013837363034343909266743556803089897868075423911572376e-38"),
           e_float("2.0235852020410317432112906973985513842752136091310236400534056358391257964816174754220580729037569950588936509616824735822977660146182087705299812995485568646424449258916305106537470302134162234599256436128908472764755873084226470889019947069353056188464731624752616841103182120633233705555743553622790822406226890881374517653970200901807984397818403427711783615392399781719658186604664218985891332553e-38"),
           e_float("-2.5987243316510530272434151865022761827360048826749300603662999822963004274067754590274689497391092167042004326056564353102889215859149300946685464524540237842793241415267510455861429296445733246058754094701233449652422761403532544406375206456312825405951840279367343248348170582322853500683170393377153252792680788406591204176629058726806062763969844833771076939120948464373352322655555634804525162205e-39"),
           e_float("-1.0060918466478588096147747948260118095764576499371949105712399270188150172509809208189065230287695869780719544428279706799025270786712528058708463383353339135731956252800333865936485538199985248257781713291453408808526519298868797143365624331345401775324128911917741614254981995657022547082628641081621952298906052449741391188046520208626735265617714782438436784734026131017403581453431439948084966285e-38"),
           e_float("1.0334881536183718388213461584146060995501250754709904712410450077632872236527818658410257283512049579454649145790880947216690413612848023762468121186159933754250175189502299961825598996550451139666261213884450655898716150186695194588820033205975597604893752401723575946777457372318401818446551403693570148441115681851448961643078815750447507787665140521306174488473532689476071668245978715788437072683e-38"),
           e_float("-1.6571617173118053267681079233192542656146988801321732332424228663243470251185938399878226491962771069720289726266146495085700068692496839328951524760097768708443359186327058361677837230759618883958456997058861713052894111237482693111384582889130304599287168043861688680917059621877111807481529666055929515692893783012034158184999531607406367695201205762776738414186796698814550624811277004158335891535e-38"),
           e_float("2.1333699230059985774590370755827903687092036454179573463959250749248574863187995514136411882502927266039256160077096686740880454304976886448187616127848920161500960706205354287992499530934492435120445690278364358926404364599151030925472210305402389801170915919504977357130278076673109265349611276624534803071650335957310036494158963706425064022894503146887233243670006416078553749025151243603354748921e-38"),
           e_float("-1.1596159782274663534938432743161731984110591076512627652424468253533540640468179507424988552683257768871449851972435941496725419051221077880221446242074803782885384828115856024383798936929038935193732824878527718649084789433392385701242406074028795493176874087920898362936999423100970415420150444777263434218793335951824422307108665121965099954889512694973023177429978667539853914600849598900740404232e-38"),
           e_float("4.4087993057074124058368341808938239325616795549529440436166964753191595371739820132739170460896835924420870139751849370105238513178627335257880883419850188908349087645579915538263752090915319454361321483991866960660080549720726183293914846430644601189581811435180467897243069046843486519974445557694737671069285611874804136276827419835645829095131068214888933206285838224187106948088725315559605171931e-37"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00631_legendre_qvu_vary_11(const bool b_write_output)
    {
      return TestCase_case_00631_legendre_qvu_vary_11().execute(b_write_output);
    }
  }
}
