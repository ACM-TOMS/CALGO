
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00504_bessel_yv_order0_v : public TestCaseReal
    {
    public:
      TestCase_case_00504_bessel_yv_order0_v() { }
      virtual ~TestCase_case_00504_bessel_yv_order0_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00504_bessel_yv_order0_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_y(ef::euler_gamma() + 1, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("0.10552756230044593915534845206562472360221895976884057971677186985983921627344416987197813159723238338126370912029922654376072459210752331331958990864200396834360945850436080998179068901186797523933429272477895315786183203576693433160426590617237164626637152672613342780586677510969487224584903778115907182547504831187002827357441064701090180126057312712831456299034194741289357391981000174142603622022"),
           e_float("0.36844956949216278077860746928067267138531950975516888197395802392907079961245528348338073907878424232249215757260436388143659157481618508712032778316455130280943077635021558059203266486036206794592568756703839015792663095132013582343660589131094304083838248258871786226136428226347947641464799939325318499852861319573127602863878486453621050398347679955555387080474970909540689655818177335163504078775"),
           e_float("0.055352345581140220018140845539676007379876062979905138647171321111289395162933364561668957754707182618722600200332971870939142810538796298612694403325345533413919171050703451996235535547729515374770494462887180994171790255849557281862398747528925379323408296013724473641459293807578612049609291036162982155516691732049286002569597019477451040955733408267984858256172166511505072165173599112173511457489"),
           e_float("0.0055365095895251460192592427616843853111821795892914987238953974825076876302092920329251232470601611876995666181465754930015802065457216219533379037488009204391784012769989879276349146377658939479246645067751885263415220761342151087425651555919667846685329164957585030380582629955036098239055694975249713235446258622662304953676494951540484087764420697290252505369940523553950983519608751943996985585931"),
           e_float("-0.0028399400567356691247173892402632824026478740945950425147116925904464856745954224494782731808096443971286349886058856903879312535973584531576121317685121919437665586089105001942207174345878132139714909104820181978428405596142466196607131446656216445326671591646817268114852295246947690241961944338842801599267379626823184165166431151007033383589761433852966917392005224814966876433269268427479678200352"),
           e_float("-0.00069899046508750922185164194300597789815162099538071019012031010036642070593942805896254232024517284405955046615314085602526267725611101048740526628187424508487775159709919029755629489708673958153072495705044088788755217691649153569321857080984428043546107057930881830835085811052775360037233742972044246948744807544476283335658750182712905088512203627412406200914495127549159708031050615180067471709823"),
           e_float("0.0013598098167670200214613073792490743362074703971569807377611148475326654208429643487673138996278672793174975505989136232212423102194121079157777810522212216421725921925552865143797399648806269044528436307974322760965848802651171509308165543645458197665740704708160365184954041788604708718205972818140670560743031497489120421184069368275170733336077331273752808299043235834693834963881503857861128462144"),
           e_float("-0.00042359010145683842466674462667033532358304884621310378155338913450592841827829827225952655634202841816929100123651635718829790969452439451240467005558583758807419448033661169095134478561978623539241643742435508676674923113395992258043353666223218737196050695545694660399795470540834033243897837364189517167391639799605321088145847156033193220521321180217922407168598847480440544552880257405719607968012"),
           e_float("0.00028909177262216527106801916285633929538741596390803941368131376843703638514642372121055366555000076210576034885526708378162471101344106218960223353829325615868250550441695741079388249630483870802261637117510704533370349128646013375289033688961394194266652646466759484121403041954700610348250339019808859253849703622315057799528574957902534688679712067641197562477598171355376452130105979018135613709523"),
           e_float("0.00028066996153367090813499440456085334791335618386428416194516547589129924837443653570613290090359665325149666754634179805680413954072941524324061350085639543806575844109630852077374964361140197342426852590863392954925412739981187962042477786998203774479103979593798254077394949615057447429699070887972507483696583226195338869588225649978937047850187031481520230430731543247671901015561650467985771022336"),
           e_float("0.00013302744227829351460374458864557354723178514496427154116094219927508214242066781097273524743814259646464819198685881984696193566398703656963022995093850260241341500969516341887688245985384043159228249017313884554496709167043129763646501778074843703818217136603401126700907710269727416267861762530965773007455025766004034506667391287369309216290287476242951894943694374066887172073054705287421719761933"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00504_bessel_yv_order0_v(const bool b_write_output)
    {
      return TestCase_case_00504_bessel_yv_order0_v().execute(b_write_output);
    }
  }
}
