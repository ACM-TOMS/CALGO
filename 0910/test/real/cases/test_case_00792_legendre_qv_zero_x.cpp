
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00792_legendre_qv_zero_x : public TestCaseReal
    {
    public:
      TestCase_case_00792_legendre_qv_zero_x() { }
      virtual ~TestCase_case_00792_legendre_qv_zero_x() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00792_legendre_qv_zero_x");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float v = (ef::pi() / 4) * (k + 1);
          data[k] = ef::legendre_q(v, ef::zero());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-1.012444662119393805119379417981086146628101805500933022099908557649986339070633328939466037910072972969906510999348899971644162057160885425636256996816640379199146287435431218029986780161103729743334494760678311214992067760398950867068850869821666682482173984968562438979093622399879299707555020393299707614788696403761964609000697168404101122520329234658235338653894510001224180929942178180604354732"),
           e_float("-0.53666706496409792982844757419601125593373084610783184094444838965720269354393054678484788731097670915980060977496011213931229319191754043073081612753336587913906130530785870786215239866587589665933333978578234509219366361868862283209412307037881366737430009064680103315867958479523722765776536572746891049445311850244150437901044633092306366566765113984665838744996670856813235712402855906044031417361"),
           e_float("0.39080109427088614542080491530698240071990715158739015406276145205344080421032542024357209279884413808218419676123985414223782837288135720163623583637426883313094997517858115595578037917126466850487213614227034258649195715596027384211165656020471717185486488829431364740839794281357627923131066972300364229814846890122034330946928218407598539379829367254276146119690973991812649153267894990748350869787"),
           e_float("0.63770646504331774449929924749843732941140871467048402406647470482152894918737784064152779064205250343568291053180713485056952096371766772279243032570931564928242434985919880551463923929104204643067374360332886545186308050540278821479731417834582089110320321612955827666198633103132512435712526881298210789376113966781742700119740960428953575316749521029495323083839195041038473300325364961184417942523"),
           e_float("0.067952578146891390845134690086441002830897599226820093600396970767878392514837901404388732275435461711523399494120032459198598276639327076095986657164150815859525950339519758166182461091026205213820234811959640438441403167697650262810976775203117320501905351769779211080116819402692866997358974519580718564013153199698530351972827347178396084143039899128420141886442908466388262486784011327668492239351"),
           e_float("-0.4927745101241358427810012765974174019913052211098404643636956535941962292338659679867291180846255764713983704994722201199506290194464787587492574201359449894970360824195571873595967070465289586137587635483109105815532362044854737817111215171566176811789563228635223323311536705606001513543370532610775476442878280018989793330584155326651419633739787018425578945995863269153991044666209535430446271445"),
           e_float("-0.36250305227064173725337148501397532864061389511372585958469163809859455853451319266495668766211423437218563873381633089766335799362958945779007001300207168993124697477242651191674812831189185741844597522636408667850547733003403182039217622305020049529391463530290565251985040655091946931154853905301517735850737177078228169973378594935140877293270630932580346119559196048283782556421624824818573528955"),
           e_float("0.20679185764415395431320355655274267883823579501352017076763109378685511162487168637142192757982412715101073528003422703702322570056078224132869364858311922008163083962371403559463093658303495857746213882455634231904756140267847628698249731578667450673759204047891982058382519921373498634852648760761196651050627280474004628322833713456534393759198985459664976045169932904570141387476242947599368668925"),
           e_float("0.45243762367696096206914744431766275661589913842212644934240315238351607610930688094162574317346844031924923937015431478377498188864400880912759986401672470917242479424327992982144692590600111522577268938400036985609324233416556315815037579455173567176144070755882164320600528987695496887038039984558762837723340929821820574379334853804039664175213621552239068188835393721278447551280752716269490300814"),
           e_float("0.09850093978800245109207912446063421730389431393218594187854718577164034615108684426901973399354343628310952031211761267890243641497935642217763533852336562418377923188788498017318236389709838686847040445472082594578935207888259606127059278259594130564013675656178509906900482223747908764484858366542345238963245175918515775284170977747626546400797684805698614794822059274730764614621467601507395427955"),
           e_float("-0.3495596938500049611949835647886372146884039810079975778804122059071553783653605265656008517124862645476612076432140316206326387248225463153927257692848141424612788225991382409003953035931347460323632259007550032757657961421455119984041094473162166601475643032031466839799751858350957587523325601222256503734146061789399701864998598298860189378840158921136837924170655214232417255215894686455785329693"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00792_legendre_qv_zero_x(const bool b_write_output)
    {
      return TestCase_case_00792_legendre_qv_zero_x().execute(b_write_output);
    }
  }
}
