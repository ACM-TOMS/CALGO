
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00614_legendre_pvu_vary_14 : public TestCaseReal
    {
    public:
      TestCase_case_00614_legendre_pvu_vary_14() { }
      virtual ~TestCase_case_00614_legendre_pvu_vary_14() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00614_legendre_pvu_vary_14");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -17  - sqrt_1_3;
          const e_float u  = -127 - sqrt_1_5;
          data[k] = ef::legendre_p(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("2.2100174769115576000810440774655267664467280905811149133438560696670763661114761280383051884214246319053228221607807138645450349961256940892897470587139324831794155346455701806282554933565735209049990966542964760899009857218732095293608648383058591524674472834004286697541797754248135633974287195183203948453112705693150417012523311173069583396142471611725966158377695792829443252785108239191069331987e-54"),
           e_float("4.1458969880066479684920897879821336884315786883756007735846127660723504158785163561819208241496957717333239398894767284205422893247225358660560820929269441647141534796344831390070631853887235120111684076268041867090434695973595815257402747442221653771294747469854326110183758941699409319943780856386237972696526784607950572726899522700402629146077460747455245270331242639922549433392924932929112670117e-156"),
           e_float("4.5198300488185101002877561770791381164509862371143536778379207586864584744989995106367929747476874831556037410837411991150949754640077636682594853968117307410530169667586949568697684613370977844767758245854209228344100566803828344146625301576758319976487597824729716623433007289380485910606342906108207477505349572138855310157605174025477547555587503312983192710989649234317424567391736727959180056604e-178"),
           e_float("9.0310116200523170029083515743766051699487818088433976814673213435485020996409394721182274620268462442901720267592671466031136784379681725724918042780891013685124731977196907856571325283482741656649004762931400774172011726278269284774659386886063468307264846939566798797733268763206316801611499171194287652961533607635136749523733600174933569043378491588214648273925508758498041707018841833216612571861e-193"),
           e_float("7.4977949758636701112504500603425758906185252964181259341906687531899238156855718228537879992520262177026903382897835685707631965403535461920333159359514073206456173815466369921171936476676408728681056146998484203945796346264755220271645013210669614637793790963707908786554600291206520292882818799045336670783509123861330090961630767058108645468459463074796039860363107912864630019409762513622933854268e-205"),
           e_float("5.8409767773042923922156610289056955760747974918727216198623685540278785527629981618142136185710864268176911435690339819194988305319551223724188063333617455096073051368895460742739441569333550433156779988819321005205182904832593131484154103693164358116751182831757477221436322886828267856037968314931077907770096049169710445106994722753158980108703704870489423079432140845378318309368120229572399437174e-216"),
           e_float("1.95484026452988281058588627874922417463637591839468255346600623780052331181780285791128029182000860170361550588005480660493602805716596344212233583965921620101375203346180159986669486081690969960524512465862627290764960965670033530083496158577695323719256807304359827452046759226294275549161447168115009318780053638552541197450431912225355400109466914558611619230895664594821265186185899617769882502e-226"),
           e_float("1.6212219248014145145662986156665014822198515194861798267154943382119113582772293838894250045173071496435634616615374706517824136945547852486350994032234118414151568854657198921513646858193218045800617747267059169940550565241500950495983053442324551420344698288751428428228011218442552110829880155382093288639859591193352740123438641990686828950855505968326138987967801820735230246133375938674023137941e-238"),
           e_float("3.2335254087003797179320793575729584253343716211010560695058513401405687338048780818625578879086136463557336463097443971061822066994237959951334573585485732756290526819268287072664043646914753428967623360635729599746523977502759585814009263735674582424586057465089683244592615890695123547913030474250397284786973208098725129130365606753284693617785244030690787692152787993871319152838540019202820231639e-253"),
           e_float("3.5163185818881322063434454440074933605073300519828709374227494133696989607231032601328843439453863768113095268533179939770454091305672985791641487390832241295432859753591135498461846896413202720205536823554501415749253928536807795611903969183543201945726580421758607403676683217797748336038802050390897840068729530447623280225585048009946997023949613512707559264164655147739536311894747003131702619465e-275"),
           e_float("6.5752582534058851065249461952880764866572895062223113118002163497092046055957994867224542516908054537859833863600295161588915953743427750828769254795158193420120959063213474965770877222640410561515683203929232147616466168085096522095662389544019674244139539004224935458575693136310382923716963677425257500710777179509171059342100757212186269451781069245670014389761815280041699106417485461499023593914e-377"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00614_legendre_pvu_vary_14(const bool b_write_output)
    {
      return TestCase_case_00614_legendre_pvu_vary_14().execute(b_write_output);
    }
  }
}
