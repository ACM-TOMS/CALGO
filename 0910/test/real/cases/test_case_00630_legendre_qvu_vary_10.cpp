
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00630_legendre_qvu_vary_10 : public TestCaseReal
    {
    public:
      TestCase_case_00630_legendre_qvu_vary_10() { }
      virtual ~TestCase_case_00630_legendre_qvu_vary_10() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00630_legendre_qvu_vary_10");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -127 - sqrt_1_3;
          const e_float u  = -17  - sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-2.8139411095862571173876746986106731230230335580716680141535462658360463259155953009506695542813194691946210131622146818081548527126021145883674003067353075368262332351221096631490969525278787040980200449758820072488733787189433213446603545236743294587158444125102675825573714908134671668484302104064263018100295951106761178465619852951956026127230961571067733743325224572626994105691257246590342645623e-36"),
           e_float("-5.9013673074458665408495558638795495627073201889952923091126398230436502227270832476806468207330320666502140986629305028323062824962336587113953982949017747312085855410517506602447820872771810806013051470083738964195334989865880035881348337491988925108175409426987397926496253336572668893010579162009500848509762778356302981224627717773690626888038951891113786235430242108064368034252531031672983552941e-38"),
           e_float("-1.7875266933271005042982958499893810529731270163696974267963729669812291137668289795700039141239572978190941915856533627591614901670338535902997547917017220557479401214763854801902939005477829959292779847949454098139614857972049212766811106451871186607931639060563524569572616372002099380194254042699170455914988783901938976934463751077644712443330136008761198238016133476891394779880895395329857584012e-38"),
           e_float("9.4885326651752623256073837112168594140883386547801049186075513962663610403436669414457045983427205005528095209681882343516080489687879324076029905004258708174889779819135387954615942672436316960777349269354573175005015950466045657984963774286242014564811064985962932918737324082616856009247549900171724204425374300285737051765983139126679919330704223048250658269970947240736393524811904172108747211798e-38"),
           e_float("1.0580169793196180076952293576462547617220308049342160048419332076240761967573756752111508256191128085401628443456050458243192928220475841946193240263205117028372757074085854379187783374417609737511416129876272723293843670320008002545699636835697163543427471346329227656126122223115628177531583248795815199484304801346319799076307065594041679080424530848254745028924748829251536138295787183814778457609e-37"),
           e_float("9.1011873756818282357268880434324231506343455332174140102295406305572488507106031037976183306054847620953067184837297659300738169903866469489819548601552019173694248199328305182980791700662984762173824140735203794860971744975457248583790883328013432308212547708064066765354693590709327237075991013208383760436539156145103966112938920820222037232532522833405380517537700579624477201456193219189847843362e-38"),
           e_float("1.049121984005930232498285654368269697769321545345515180026274955419891557263667926940302680721679870934007639226622262888049766915765215198401490762108135283050881414917864595946156935183112782534162343583432050602416064470785083296348535337432511374046859528453144228133950234136357540166664018782237808724864380707098663843410695845094192696476921908273552702208834233348363350777923206720296026672e-37"),
           e_float("9.607435682534282112883074359176793868713997317500625912739005517601449370037688107931380190032546552219808123700895061842658091902056555082835875487578414175542998053398324076560095225730563332394324387624456166799932050869071442624471595533421370865563667558949642853954473618225350866732727103449461787824706436340144211566634947449890560715760865646488545653485876033146061913501907081208902607756e-38"),
           e_float("-1.9800979865353389134985734439363777034909491236873460414855433875459877964452941819042863939138878078005878313973652652522997133074407757770821824292259074485792503839922919586718796949514244621688019313018866852001417993025169077990637365955781641659067483909858609863221025361546211588417751594541293011356310970928602763471798967736020214025488293225665242783615401143775938517358498697450360371312e-38"),
           e_float("-5.6923544570192939748715156255756572805859378220234745644575807290195460813829559228541714795064732609669267201761266523978322156942180273276377928940929878289958450521932064757978847700261555946847835171181774126330169802560082205882636716601342095595742743727798213209900820446259524699071358353389127497044621768545474908748844373536878287297109636490538630809581444252271004755669873979851518320244e-38"),
           e_float("-2.8218972541814222496102857025560425962849702135078326124023655440824486984731515873356632211728769871160295070019319624258693035498989073582065327031586500582547533307716480819112668587208848186473754167210253814031295874498934822583729586859503003334655611533981933647686529657902080633408120989596655473039063602922799688438081281449268745582356526016056074246343626307768714491233978903158610084437e-36"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00630_legendre_qvu_vary_10(const bool b_write_output)
    {
      return TestCase_case_00630_legendre_qvu_vary_10().execute(b_write_output);
    }
  }
}
