
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00931_hurw_zeta_all_x_small_a : public TestCaseReal
    {
    public:
      TestCase_case_00931_hurw_zeta_all_x_small_a() { }
      virtual ~TestCase_case_00931_hurw_zeta_all_x_small_a() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00931_hurw_zeta_all_x_small_a");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::hurwitz_zeta(ef::pi() * ((10 * k) + 1), ef::two_third());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("3.8597655805857541213769367222647452505002261970815711929645636748919424430879035963035608622412752851833698382322825221374221835627413413651027718733124709304192906902961956975543547924661180662589411275859809427879463161177547757063073284455940731401795967481281330353942313392454571571251589459684759800420473241346783416705913485301925160994997426988263205211908222357176948140220045137211533531314"),
           e_float("1.2169621301608496166141771208053854471205570934697752913875746774656809186620627288642320816339188972751674041365500199711774236781183298210513709498420788770944645562795561875745452626205721056426483191173864205089680039732391610006230677369124317303046584976782425707764328208579761860277993579361914053343728103200477560247256914102995674873701828279566613731374131163152278460923766283661397516546e6"),
           e_float("4.1433070792784792845695927216869584608993304503496586267254406209598987829565139081964229240514248404103720198414771195862992082162652356634283938399281462355463497105508196101193275352872870529965583971670774888443805815775256157150159664847432221301504303093643329548812121562605585003153389912318727063004728206139186769683869924767720809829106876249745397106248911674288936604174762212827836114334e11"),
           e_float("1.4106432014388526981396111434987479013602096189123517714412020185412011666902387955629201663895288508791453947048925586396226085466608368892331334684063789889737781044797076569165658209090373787271947023540960155402192378378518474820693042274117251206931104834071005891277225376335640066922533124568177320681628863629739982433086909712349768463222878283928350881210517235654268904019037646540723452364e17"),
           e_float("4.8027196722097212363157312452578855701158696200426521672441113371526709709576090480549053019550068351591529846593353193024681626303990479789489867800160459082898398006954199233615639885590355240581789368046140839423543001427712113921852135786788078163555684732293974248556829785867770090672748601525278834667629999194907644877469202290917079291067817238657714661572289358276815355617666892083748362621e22"),
           e_float("1.6351488616187898318031331744859515945327852562339055111611571603355457387046316044855434236077279787011441207406897846241025585566037188448644205748461766088574941314133205720099726195929956855311253417243004712260414178594927439108508252126405345280492022476799699843218690839007870960941717319444061519207159009176863691695750026833107306852946937466504662850737801426961490582137038488168726227517e28"),
           e_float("5.5670786182343536907501443759053724689480994422164044792772057357290702406590841178850288198494209830651335211359990563091325635817323201145136916800763216142355868073481503519168936340853819333160895757753921959252412453158496119676718088774473392913206107167398432704983326426528873689673650523300757779050306282178040541618501604682701646067459230769761166591327282679739193599414596962096419979426e33"),
           e_float("1.8953848832405278992319142269664101276477487734245719432129122377556860004495064886546440650548587554698155420036082121495510180439349126062657589504499017913874658901288243354250542666588231516945400468806977731576157964036456905463679179418035014204601864363810204920131475551008996790362390984227793982802297069725387980287079272859391490305277647385615444896194785191187083461228991478672223462876e39"),
           e_float("6.453086262963709270721544796928396094318888913928399496546291262384192185586207402902129796520469379897200386592708196690983258807039316671322807021736052497826097314959018358262625370126765798888754589480663902297565125176408314155316662754636125558452540033462180001700980822174355350723869432552743271627915030465031901299480496276688861131533318327970495492783928761539591724127457745299406386921e44"),
           e_float("2.1970377987849785912369026165285259749218043609001037256087999379033522449341515005005893695810683378008045747340799413103642411496703465152539322007935959090707274586673079422138787952661645605321281135975277042530602536658881888005958252612220548992561709387711693464525539478388848519778412593837647638847151002188251155381754363740010667544336775028927466489508043828041635798176036625006876086129e50"),
           e_float("7.4801031515624881328160110063643764990698449891308203018462411975379093533765669951443302780543423371390614046559321658010968562067874453327603401981010344771788261674564572797889972495851982733484035198733785885157261561484188268741093584879514901460278477075470478832157672367735238225236093682419458317192645774203751177066774808889043881195466221788394566152675027274748086353702089003106356450636e55"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00931_hurw_zeta_all_x_small_a(const bool b_write_output)
    {
      return TestCase_case_00931_hurw_zeta_all_x_small_a().execute(b_write_output);
    }
  }
}
