
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00533_bessel_kv_order3_v : public TestCaseReal
    {
    public:
      TestCase_case_00533_bessel_kv_order3_v() { }
      virtual ~TestCase_case_00533_bessel_kv_order3_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00533_bessel_kv_order3_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_k(ef::euler_gamma() + 1000, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("6.3249297239957820798805491109119005378204495674111971665307696318260364009014409145044920136243217152291946648371257701726688915745665408559004993027907075482502611343981608785646426800323804069683414379835527583828642578295182870771168207544188491780783826907437143218048743565920664537039736268434613501447607996248663598845436309975112033600999499216643920371245954926785396869049826429948696723305e2369"),
           e_float("5.169870938481161853933744688069949546776317035042613550352117074528389289867245486169736180909912961705222278771778387210158674229795245544185688622729797908021372704156786988409080744037576138191277794702962404218731830456404872466598589765973223962190954570261626353601986627412968602714864229220828002794888197237791828162309974917679644840411329398852662830914674148400068171882306702180473208838e2249"),
           e_float("2.5826478664439375067440146586997982552182686834487651141151562024120066956541088464612800185115124386439323625168098428363105087521500167370370385427260712967069933135520585649462311633083269147181526488046239480119666002974925718580723162021741271478684623453442726677700809186096411463368722497321500247220215668048792602788084819239726555753636054502445711162725646225481316257989839241870772965158e746"),
           e_float("7.5070240496022953952958874457531386615445483289683742722849143000097201168708293272471212492134715375620341997570143678802636653984839955884469538351090648872179566164211899473129776007821761444842452093148036119360142941397843880778783382971317775064640337500740279524837001766076428731262904978866552092238967865207560321745162326693032475923152291088307108418377751304582560809041378317178078574861e-856"),
           e_float("2.5556004555990833841984938524099002272640567436239909132950679257957146750053872752502858330642580142143500427131353620490823909812841774851712555233526364820913163428648482510318704479957555135198467789969879756188398958088031999052596137881775502769080120036201924388547687519098249555511681185854056293630943810672461921929754700876970627445377399706101127618106936525622887470055272320264694936639e-7106"),
           e_float("6.5073932856374373888718654249543772688321940700381967435897633751185691295484550069710459456391390582153377024153371431204228635257770453496324330919401629523557174074928237251390078137836206303505827817685537624638350315000053285737786006680340105963779932083729574695021020188355711826805597473781683924048681729933207571784488114427748909974328237049493629435557585701563103787616326991832819124675e-33931"),
           e_float("1.3386082529548189963541087066562038008544425244675619507052167377967240473558949886474898241449632345632650332226023120498165486756527939953673098224327812062570100026904174194799355407221295572121768692201093683866442993929160759867992831904092726767383261711844892031799690912928014976818338315146255681407648909608634611771787075661620793104551212327724841908205192949198901706073184236603598714457e-121578"),
           e_float("7.2328127985789266286380054764824721757669137365422840024725287844856493023758791129530179818490936362067017190641463704668749989165463780922090140608727165255016908729594336279805177032540140849108191930257363574984680147252613495916266279791380743634442575670885752385396210073626003868001679197147624161503746127268665285291217213370333714476193062744902807120911494590507949612632890244072968693638e-357665"),
           e_float("1.3652719599607168977508081017075340184034882190759987423019056097357500986990014443232000719931058820690370674485781150165576844942515344384559489149541026418343356010785647716940731343293855569273316016667115270074720761311337650332621786157694897945760641710283046702991200327590001336803837576466722743904971726376476090204045479102058862120567039450122385865171610497181579746988955334253734426745e-910786"),
           e_float("2.4858379767253571665641408485628460024990348438093533093990568926876306037532853728411951744588326277705158773129495478216639489504041116256837935475868685734054839454612214035530642102834391833940694640774463572870671931717888010351174828644642352224424283536465603943179061763972335467874423497052236136613441857611332463753402884265306074332674294883615572178056336201249085494578166636519299642361e-2077222"),
           e_float("2.7314344606305767254429354772475367352196422408949256153390355551533795993345370057121684643494733390688901456591685160661191140635895152749256756468543336075608264206858978204080418774842610951826530232394694913513768596049080173938163561882616423213824001799576596752327583334660722643699992399466858127421304497282427862155250020166049122174640636889427273889947780279444843110585161742837203645995e-4342950"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00533_bessel_kv_order3_v(const bool b_write_output)
    {
      return TestCase_case_00533_bessel_kv_order3_v().execute(b_write_output);
    }
  }
}
