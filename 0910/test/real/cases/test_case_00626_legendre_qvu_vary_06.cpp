
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00626_legendre_qvu_vary_06 : public TestCaseReal
    {
    public:
      TestCase_case_00626_legendre_qvu_vary_06() { }
      virtual ~TestCase_case_00626_legendre_qvu_vary_06() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00626_legendre_qvu_vary_06");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -127 - sqrt_1_3;
          const e_float u  = -127 - sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-2.1145830910751400261423386553001219370617154896469921162340437547850235214982380114698544775811962213706807487795882962766784145641513891884336398819937970998588406930237848332540186093002522589344432611503248145168373027654429389248079200625326713758587940926549063308380516857206657771914291978359524884400437231544916443910404869015185466697861150574806358394235625359446969838014600991339439962805e-127"),
           e_float("-2.2940180064330396705506305300403074327759070223824114121684644729206425459562739221260577942552975633061146106605281952686812077789294337055322091022614221484915959354433422989414286365147511371677408773237752184402983978757182394298645935860229487301937931702226645063685370184746554735789464951084231378896124524158794256641933201140960521592302210430008727107336953002086850795243874504257783447604e-223"),
           e_float("-7.1794970654747507651901060444028121603276216198852949569058676671743173122440949551475815918055909067208055418562683988735167880096825523674477286448066106011957471582584279749523607298752374127618958523671227460304793644497529458020684239213969055259972930116941695252563567268379317035206189929270552281916976955851324150887914920542479458279471335879221751846907906439899882124927666798495000030821e-239"),
           e_float("-3.1615898096657277508366684035194826229936690561844381179633789963981164446316642413028440521987056651855504170961158346323105643800645387466083623458545581606468463980628041196187299846941430088775220147976428984791059914209354371366346432990449059748934039272423916138695128815157033237231097137758528360593782209735588321839184639487528321173381284523857358643968935886784826652529495282428726223238e-246"),
           e_float("-8.5708273869727659062808943146860289138636988489865946838461665966601576590891238278551842470258115353631185941311813660067863788659430352173770472822638400664647577160892104303855023017703935685228863274467859331840752674338971501618355979475851297556354589683331250069438706889410435785959057332026674354397761128311185651426517182858819840508424226281758389189291662486738349797266048990317720288322e-250"),
           e_float("-9.3469672985737577513521587190998288223520047237397136363283405270113761604386445086483301127784834643046301431241282423488914111995465223620400719743496503003139075017151495230379033227506710789330108168921264009794149025277256963924544458446957881539189630475537667411408711245435525504276956720388809563788377715683266406583077803923013210178865282573106803324401399581617980781149416225784137857376e-251"),
           e_float("-8.5963445376206184269677594284463801128193340982178137447471031165342362200263835889439202648294488016517555829104444286428704666316669155303296385775960441257441158834265855493760277979526671458752624050178143593834657225881279570017681624550389486364848090337080373119500497159486141503518089568050477115028106109563299903377724471130226656177031257865119809053342889697844251732548441268172560644079e-250"),
           e_float("-3.1710271053384803853040912955119324801584844458075025328241090584743875129012900187652720986115238690036044021604797626036472314178970213630078109192198981083784901787542235810647318199095537764082123680488628763125002743451208580963435623205832468773716899697349012797738346749618873289623787690748606289151639049476612469255957021017631940638715496273109667865151159168116123545185001212238373308167e-246"),
           e_float("-7.2009277508812105109526482092226468976597224707311067623360607842633726714825136320842285563223279024219933618799103986372674180688659287160533514014694780749797372208196951894701886443244668136183147540641309978854509330852614993153737493458055941443243338902203400901753193567766345571693841897109743859249397082951798807486273091759841514171134629508396708095094280314602022969026457944975101241354e-239"),
           e_float("-2.3008656139693719547847973111557129892955814770075999989772433394161498531490407142060358593785260329308719432174006589071849643243764720996397866265305588465850520437981978316470211100282129158737348847381478581074225691503355431573284393918439397297803157815337659957379394359679826637406168448476084066851208588648800371794853050246317309523951456054446756016780870191464034203428909448056104568109e-223"),
           e_float("-2.1208950882216496079173591315662465671685899797640309861792201390209426154008458594014512908074563876207971115494489193706587741026708933741740050593930511709393738350138638238928167150605516223623490555059652674042328389568498844732233238050294639469478996840967570086661622573093961406812283197487029924099862963979435316523669598008383250311837923301642359266762242551512926173147219338820639914259e-127"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00626_legendre_qvu_vary_06(const bool b_write_output)
    {
      return TestCase_case_00626_legendre_qvu_vary_06().execute(b_write_output);
    }
  }
}
