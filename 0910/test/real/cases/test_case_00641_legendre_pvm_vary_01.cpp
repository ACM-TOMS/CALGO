
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00641_legendre_pvm_vary_01 : public TestCaseReal
    {
    public:
      TestCase_case_00641_legendre_pvm_vary_01() { }
      virtual ~TestCase_case_00641_legendre_pvm_vary_01() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00641_legendre_pvm_vary_01");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +((10 - k) * 13) + sqrt_1_3;
          const INT32   m  = +((10 - k) * 11);
          data[k] = ef::legendre_p(v, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-2.8934797310339503150196230525839369082271253196002553985053889609838382355392611886173860706475106931688180320472928980644273458928467137966013507746653948085233713397843718027416628633561327563396658041265436075688586144710285553119955708924824786138926312480637683854195237560666531063437575341539409016649081264153402837220305818734929590454280783942399450266052277230889810963059498931841237866518e315"),
           e_float("8.4434502965960029907188428268830245713636986126909814442708182344654497067748639880770164209118288377321712396967151588993804266583426547392209642372312473611500369968460222341429962298489883041571231927474097966665207240654052510422644667230707905469800670535513694541364516888485841740395083493518515033732642052321174580739573250958165633221234343494679092791285594118505719552187329915621938454177e206"),
           e_float("-4.5524936671061006070282711018087541041400541366767934511862345853932957139332139980374329678151766623670597508496574601228455063243189192496935261570874938926140741348503662642699322647344609218546525768006652779737566896337032194890441498590717843004098504596386635534792013928348825848371498669242014992919366158691719755407262674259535949991121137624199782462119337504734760338091244262356946953689e171"),
           e_float("7.5003533778086459586880007967618485930572977224599076015372519699773686372841225764042351285828243208562388207644874331546608084453394383401927384802105454919313658084944694055856175304418299719524728906104126876850754071731706247787374365575128961957470059812181078057388928146275830827896126674732816674103201459236665211549374014564305865914407811085565133438388104924060853810082766886464537183793e144"),
           e_float("-8.498062922442596714138033326602542480161810812551398408030125628643643076947033876302425083917849996306105409533987463625293444800754289201441949498532950558441449026061457843172458785355095157114009364226093412847326139262755470999039009824649197646884675955190670749193563542780074079373108877923218724461341166843344633323676385252763876391879648934721112892290498122465526963323394018520499939803e119"),
           e_float("2.7595291421601472092003494530768770396399199706031960165519930785950986540837279658784036058035488928352096839219519260854827336143907426569438847537148075676576817578433687660088519348122656710609723622415632936894337282427985605957878908409937691699379575300193551574701330188132630241436016282499965492971933985498829878521931479260344999223755085158158989642892914297082203084149044568144055300404e95"),
           e_float("1.5673228724593546440109943731374868045361893910793463102389851974447351241785758497545521556597784383858591597157951576534850045304439530899403089611778615087109228679603653419019348719241671643880258732318931607275922321853989645485347524374981073513178504483655164829898585064195304685254098346380024644269598221479415332883657795978924887448667348378454975830491568821612472914803826656904780397546e71"),
           e_float("1.4458034735560028739311972901897948889193681219603423764897979156142727160532964051689797259835160400144602309473979661786610932735899879852513478868752504812930367659166677669585463402195377012216713681152440395705949082539901395208618241703487619974271941038339881644497492008166460333197192228079476920310422192930801920206691696205373634666075989813901014354191078214172237738370977944614172858412e49"),
           e_float("2.2037587560001269225531634941673862486476783559375040721637136703439846772734232188984155596615613062771067752548659805613924026411206400728862384243483523348546631700774270557922162443844747254208023189760201627177774093493148831467417465139712396742112307054992308869883021943015662021493120697754288045423047120052891419933863991928726802508856916894759432632024066657252506066018101161040253892789e29"),
           e_float("-2.9248870622336712509030230630030895232801459137894597549530626269119634384287446189538136358695345487714070178543044091733214381000754095310438488594648293365367085665829135145710030125079138989991548927655813853820418625792331580121735153947528402374685802252685858067656869729494589094830005087668556626414106663500844001602299389589669744433170483087662796073326542938859527853620376469556267480972e10"),
           e_float("0.99736962666602337075502846666050056380406857268765774268365286032636344983833554384593970425027241861452956988023619002495831450924983486456834195945679336407227271448962463329607488776852359662416951469572363754286150836988131945153951461483745839035797402109503211144363871690198617041763610500674211329158954005151373116088612982760465086693769726622932011880113177818718818365481476802501163372842"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00641_legendre_pvm_vary_01(const bool b_write_output)
    {
      return TestCase_case_00641_legendre_pvm_vary_01().execute(b_write_output);
    }
  }
}
