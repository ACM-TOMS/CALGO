
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00648_legendre_pvm_vary_08 : public TestCaseReal
    {
    public:
      TestCase_case_00648_legendre_pvm_vary_08() { }
      virtual ~TestCase_case_00648_legendre_pvm_vary_08() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00648_legendre_pvm_vary_08");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -127 - sqrt_1_3;
          const INT32   m  = +127;
          data[k] = ef::legendre_p(v, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-1.6468255545995451803786087744531276829161841463166721096266674525254311977778261277973040787478837822171494195417769240538735848186552300060397923136876326081482024025436538270582649648466991774980008998223884040206782260277675584128109910745759957074581286161643798408679458726671341755015485995765748717023587673493214460217428398863469361519787416500193797066502413383920072106160470177423346588759e372"),
           e_float("-4.2934519624982891188571426312143021866266053240254420923596223326385921454229032916151978919695190477198979764474332155344006532752454869745872837372691897125947522828160191373481519025041543964454395392727562322838939159110016715305113004533124747816659552900409470304176339868834855099368760669911859976656984499427277425753575775284840044846764948587849194092279267450531655331371370095808534997829e276"),
           e_float("-1.7376066407694203337380924742949254732917949544057797466958530491223678005632566856733663098276964290359801572982660007083055944010770576762920179905056047005175520808490106750257105771387250275662727036633870873255719562415513653854530461601964871718945739126567633848267781677844724378677180495702547458216164248624830587061003982673875468221227809704809798577588830616102655784103419679715790424006e261"),
           e_float("-9.8150971490021361019243231803001864981149127754713857136951588903956297401581261085390396675784416141392901987323623722738326444462353949546646727615272226939496429240859319910320252090964799664439252180110663325166692794375437547052924595706107627493887596368824839600418447275185375368306689527826955691411651822009397512309249964436761994639201925527654420977043393768446448299802756529158186260774e253"),
           e_float("-3.9406629044182140438168248541095745566354651025733677960252673915454980495139990697062235296424818815967984133853640601787688546738310167284970703697427879951952660042958773701831749996896282332991119723408038371483047277643383224154306140195491802555848624451023542971600378413741864492418275994527619174495728741382938073228951669521710983577210326179746843554350561470561501500853943324651603807229e250"),
           e_float("-5.9240583957736717207615793877283191044510138710641020369794322834535612884899617245972656187430264152862877324689472840814773473356452212585699472952094297807460654507001282438928514720018368674321021007801845842358553411153077354822557468950083346350244064964672381917407175908072091459266506199647497251023758774470118488961682020858180292325682519540695340182987605881026077619570148212966082219014e249"),
           e_float("-2.7093290552882296609035155151452367166055718749620241849287645439940484476946389218932543668556057289073174618203333390639814177898134198373865825902901632291745740601752717447728868937001028442100246770728107547723445938016587388408117278038155213972299942228069818480042839262347174745001612281338207779264542277760004010047429584225371049052424052092148104778772980644868161497059147198690164174627e248"),
           e_float("-5.1730792516053216719575114584125402961248375876899778368093455674847956527534449159659921535239328793142804059996764957419786385002743147642850299767746590548516313931398862387797152959453197816049717127715820269480312493534571916369672557916237971815849808137397357455192205811169540388558598626565254060693095032644230249584816363884189565389089240094336856105827552179254840665997488640035478156223e244"),
           e_float("-1.9329221386927490632198048110857707009606109738396605165450369400451346601279179051786630792525144378515402005910005204312033319623351946666857447449319807366205028095854872396557665003707906171640735425418150066230730146689495838872162721380356877067582908070176552068172495038416748896486265829271620926714030533020666025890041865292843337500247786715406907221206037180055247626358590427323509098276e237"),
           e_float("-5.8478085904150706975378363560875228339324624681450733922156819498191486382716029088117615730672313410335617168110104696149016763577109549076510882019015588361597347540463194454809405910366424382588362284203578532580272141521983760799508451537587919608441112032541527670648256791950928106968862332330231732007168630354626036862448047736917178774716902503545737267069054195793603824217821986116655872539e221"),
           e_float("-1.2174474242306700586413045736649035549429565909977988651074025746280121111525780559437784049937234270703370355886987450933272709439107641904292629167603666846312718074148664747103060971597007778760506223353379790896727567614520569901823266455937030102541585121049818023578196149443165929552384379059617308853956154646052434592325221620957313456361633459051781590231334561880010198352424457036198849849e126"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00648_legendre_pvm_vary_08(const bool b_write_output)
    {
      return TestCase_case_00648_legendre_pvm_vary_08().execute(b_write_output);
    }
  }
}
