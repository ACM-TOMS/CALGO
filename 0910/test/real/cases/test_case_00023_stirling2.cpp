
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00023_stirling2 : public TestCaseReal
    {
    public:
      TestCase_case_00023_stirling2() { }
      virtual ~TestCase_case_00023_stirling2() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00023_stirling2");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(101u);
        for(UINT32 k = static_cast<UINT32>(0u); k < static_cast<UINT32>(data.size()); k++)
        {
          const UINT32 nn = k;
          const UINT32 kn = static_cast<UINT32>(k / static_cast<UINT32>(2u));
          data[static_cast<std::size_t>(k)] = ef::stirling2(nn, kn);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 101u> a =
        {{
           e_float("1."),
           e_float("0"),
           e_float("1."),
           e_float("1."),
           e_float("7."),
           e_float("15."),
           e_float("90."),
           e_float("301."),
           e_float("1701."),
           e_float("7770."),
           e_float("42525."),
           e_float("246730."),
           e_float("1.323652e6"),
           e_float("9.321312e6"),
           e_float("4.932928e7"),
           e_float("4.08741333e8"),
           e_float("2.141764053e9"),
           e_float("2.0415995028e10"),
           e_float("1.06175395755e11"),
           e_float("1.144614626805e12"),
           e_float("5.917584964655e12"),
           e_float("7.1187132291275e13"),
           e_float("3.66282500870286e14"),
           e_float("4.8642513089511e15"),
           e_float("2.493020459075826e16"),
           e_float("3.6226262078487468e17"),
           e_float("1.85056857425355006e18"),
           e_float("2.92068988191531096e19"),
           e_float("1.487829880643753094e20"),
           e_float("2.534474684137526739e21"),
           e_float("1.287986807277062604e22"),
           e_float("2.35535731151727520125765e23"),
           e_float("1.194461517469807833782085e24"),
           e_float("2.333959070555727389432196e25"),
           e_float("1.18144018577011378596484455e26"),
           e_float("2.456546982351465287818108795e27"),
           e_float("1.2414770383291369928363172325e28"),
           e_float("2.73696089482081673043512156325e29"),
           e_float("1.38119259052090290284472222775e30"),
           e_float("3.2180923166496316666097876322181e31"),
           e_float("1.62188909527975750487887236507181e32"),
           e_float("3.98220795976671722461041817694421e33"),
           e_float("2.0046519772843818631786484061167181e34"),
           e_float("5.17331687359579810443886364399481286e35"),
           e_float("2.601501750631019038096563064832102352e36"),
           e_float("7.03975082138863652227864372020512253e37"),
           e_float("3.536661720482363367797831336380154364e38"),
           e_float("1.001377935398028675640019274511632680046e40"),
           e_float("5.026334041838383363595810272727465312046e40"),
           e_float("1.486195563504417819994257239350494316026e42"),
           e_float("7.4538021532732000833796262348376254659125e42"),
           e_float("2.297427976320778969180472268483729218102439e44"),
           e_float("1.151383824297207913001799263199957444169840212e45"),
           e_float("3.6932187717885250008198927913966236544738443012e46"),
           e_float("1.8496270007448789555150942245293891186540207956e47"),
           e_float("6.164904659367203457362294024637986920898335597512e48"),
           e_float("3.0855193729054411521096003241961317323594780722792e49"),
           e_float("1.067119693063032138391351786371577295046478490534192e51"),
           e_float("5.33773989958011500511682789087238895257452926007716e51"),
           e_float("1.9129956055890354496078667630983904129723539516147184e53"),
           e_float("9.5635288550944027447527330253689762013863174116409944e53"),
           e_float("3.54743717632391055820243115835143431913342759736064476e55"),
           e_float("1.77253439205143343138690105058136113173937650121047462656e56"),
           e_float("6.797273749043552882310737514568550061649716512309153363173e57"),
           e_float("3.3947264920036857047043272494004974051302748746722615891173e58"),
           e_float("1.344385778818420636925586299191629572816262736935623966646864e60"),
           e_float("6.711150773227967898992713057008798346773627665568727854199263e60"),
           e_float("2.74195014048346468646337869534662240530004357345178187973303815e62"),
           e_float("1.368193471103022698141492256018730017609250189202706181517204625e63"),
           e_float("5.7616148648759976734541782789646854284365019492987862017863923625e64"),
           e_float("2.8738086229337775761944973314347802189713663964121783361268218375e65"),
           e_float("1.2462449744878591580867881518088869953526990923197756704759643749255e67"),
           e_float("6.2137326924046880682781008098675750798658144566628355505573524862415e67"),
           e_float("2.77257733152105615602234650627306433351393244051204195095759842167699e69"),
           e_float("1.3819024785948640919704558161461436197159798372814441651456938029947495e70"),
           e_float("6.3394387052486798951178294727628494765322876080076874133925948002943703e71"),
           e_float("3.1586204450486455093953001696069351731070591441455003463012918963814877e72"),
           e_float("1.488635756024260162389907152997488550539595691184610428020459047457860902e74"),
           e_float("7.41473549744219876178713244341836359435020387562134763520164430531780908e74"),
           e_float("3.5875386320163332706173706958062753614536756033909814022699839968221095982573e76"),
           e_float("1.78637023822444532129620759640685140580217037025873565670284027445126243022573e77"),
           e_float("8.86727912268312289763890638211728465756551094987174336871882255787058768056826e78"),
           e_float("4.4140728906042015105084601050754729147996301507963999696287450128997727632796163e79"),
           e_float("2.246461649596059385090674587275970540656121245281185666869004091307149626766933093e81"),
           e_float("1.1179656212762315444469195280789758257116847302069450883680631462534429154731435151e82"),
           e_float("5.82994798998119859420122576351264725685894186833630465102498583119369354221329605755e83"),
           e_float("2.90054824164947412283270532821116096558467384962774487859473978945296551914832088803e84"),
           e_float("1.54896535192255295285997794697967759112505334139623178519189773685603643976287947300832e86"),
           e_float("7.70456904944029298301586490347637512991893707425095370217725820339838965972379784347032e86"),
           e_float("4.211101021261974347527789560651272289435341987723515928566100672121276516786746763411336e88"),
           e_float("2.094104985687975865212019783347790966561213301197639525633516020360389672299934557881648e89"),
           e_float("1.17085373774366417898549496831964764839223421535308857109261503250557693805763716753684856e91"),
           e_float("5.821114769024969891588212501509749725608640491774186348117784999234873541330673125633005296e91"),
           e_float("3.32773383903432790114891861715560506138854917368236151972452959496311693210555414654115880816e93"),
           e_float("1.65408227539832246297790725234123791454199785314692322719343938402221010439281031155211666752e94"),
           e_float("9.6633693452142976626548314710539967432240021802909452994768207170807203025913902430769879232798e95"),
           e_float("4.80226506267802143149753465628342677714788406082596287217127766464670450317180174985559436818718e96"),
           e_float("2.8658031584790632578165042990226844250942975521301992192995535812917597948789214178486250904053968e98"),
           e_float("1.4238908304020130814217947198642347792550927437180187987084410027370952226771575422312732912532865e99"),
           e_float("8.67588364404267790282411421059560636657639276833105855638498032592705593391181253513531669157972389e100"),
           e_float("4.309832370093663404215143015472586959435202896143406139124417411312803190588537831455982616599920139e101"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00023_stirling2(const bool b_write_output)
    {
      return TestCase_case_00023_stirling2().execute(b_write_output);
    }
  }
}
