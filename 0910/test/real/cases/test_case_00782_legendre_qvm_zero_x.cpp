
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00782_legendre_qvm_zero_x : public TestCaseReal
    {
    public:
      TestCase_case_00782_legendre_qvm_zero_x() { }
      virtual ~TestCase_case_00782_legendre_qvm_zero_x() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00782_legendre_qvm_zero_x");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float v = (ef::pi() / 4) * (k + 1);
          const INT32   m = k + 1;
          data[k] = ef::legendre_q(v, m, ef::zero());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-0.48427074685585051915681313862244156322390566256960582099466822078847462458608117785838429176117624433720271893541090236734561930224074436751913891029394213975744972171873171012703263165780980648365745828566739337534506961753384918070861459662427356814335106397585074565968756255822004729575824049549237503498262174433129951335671535749263735744014095777332959668526146843983159299979609818865309459329"),
           e_float("2.1671675609297456014037355938389114324213318613240360967393689850037846024462365406282705512759228610835282310286533545336526209589853550868841355488695315699257935183582676375805583991870872665177667710190087118080708442982659717436938801492596985309208412439373192789788723673161787753793092903273183815814116139612535251698134101317354836823206279775500027120253382103207960298521660484091894230884"),
           e_float("-10.681878441936179743903512134783706119742310431060600895834192104208003984720510408986228843421186919708433262660626758204748632459256161242873237338655340864716020849560882144757946664344281272225937015456902845997047016696411504739201433504793918772015796523161311311895122644885561314314538274361025099753138957990758841164218418328646357295412787625213043088367835836964922362108593206403151203018"),
           e_float("58.174176953940391976586785094458390917699577479694664911417994817395516693107872408885466126649087748454032428026538177078420971287113934933399590981441079718030102992398222641063026663858080740237444233097457945694645379663421207846480541538387117281624395189568789699012662013741813279049799117071609843092966532895730226870048634988488735410462183968724058603646066494984742233784293488623328874667"),
           e_float("-334.99327261893025120674092561261694027528156252532898301632907539092502078316946195116632705084559940475409238576501520871453433386891803753855693500338307081742299439542372425853038869034340263383677383161828351806599053970793870639848840159131241849405651251572981272810774477775367621861589093237997666791531164056843114416743187385186966725070496979395156826227079508576612344380521924374976622787"),
           e_float("1919.956090737609527225920977912684440936532457642779500009780429724505182052259588453533615569495728959968671856109454454305600800150032971537051155727897982767102567657517313288832261653046506884659514877420183948555147209752680256362234643038343249772065115832198376489997349629530897862538485916601597960479278538531301198128557755694028665724546212857995043925393535278498661669154158700483463621"),
           e_float("-9920.5448194582878722981586751032769687305176701273746600436000621831222862313709762771832182838394522845814341785846594525732756950563703711971694716212161502332320286519569954728017685982968242055591663488915655842810215695388483615151351634387589022337403991331321190743014772202862418561443702322966511710973192740413257707423198472686733424617603462656318117207633436162912467973483429851596961118"),
           e_float("36462.326560130717852864060569925548433360865421846482499882441176111311581536565692888966919963561193540218928852438728774707425949566450490375481387742534509319346007558861328238687166050815023660971938843493728858655127671212014039295127991227579686175284509379343577109219389106791852636949131012435257905620282199282610212590246290396503648441887594923157588245930962000032767302861224107280500158"),
           e_float("-25697.480513764636928938188280315376754602001681245716760774173702440817323326461187334388874613782058870047752680160253456444342252108772010246448563004790864681416373882672881666032214698999422555629979987978259614467958296938454912573512621928482581788858625884282103838579871617259249172043248997503911938612440424585745955168370986394872831808291617034830956141173367150969893810138486495203602904"),
           e_float("1.4612177419526404154428088716281878265262715808651748153153666754472637832001151008356635686658458908571192991608267167855018616258854172582914649549278098795520761188024608337441514575355235848390957334598191862385346447565542138407978128639361938554854582796681734929783664102627478941619100898944254371520353466633655116536934809647519635159173370392342346632219026272873982640582786597328033974764e6"),
           e_float("-1.1516250225820343457160272508283392149255814257030102331808669416176657297407925076535655687311072354683729442440610798231502318788751106373220737977398134993274882981218636603878939816845294956039689763923374108609023526461346776509607676785766083414126220789683846774026414993742323036479625259774160717892956220297195816531430965145690092306665114017442783180312619366349717161081288973767907760003e8"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00782_legendre_qvm_zero_x(const bool b_write_output)
    {
      return TestCase_case_00782_legendre_qvm_zero_x().execute(b_write_output);
    }
  }
}
