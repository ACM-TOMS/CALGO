
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00635_legendre_qvu_vary_15 : public TestCaseReal
    {
    public:
      TestCase_case_00635_legendre_qvu_vary_15() { }
      virtual ~TestCase_case_00635_legendre_qvu_vary_15() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00635_legendre_qvu_vary_15");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +17  + sqrt_1_3;
          const e_float u  = -127 - sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("6.0752478492997685956748564593795184159156841744890338426013164772147089014943389015047690252387524508398545011008580245265928581605127123174960532430006346384298249855135870244927181360969160878198139852550119369969870287397216662838061549519090471579952238945699415607633006101236009382970493118706872860289732854958309443940166450014684911105699678662133738754790952125589787525960571579806628487444e-54"),
           e_float("1.1718553043142385528597707599065474683197495623581591144553603113199446706651899402692714250106858688636587270453094200170681219623334532089224141406893296492128663696586916141515277839665576099234849175726193098311985356090682749098361499215717792007953262504008713030948044065022162323776113060922051148562811947972842533402832472602828830311090622048281587577471432551357332802384505090809013232869e-155"),
           e_float("1.3136596319786681745496106522739659476305030930949062065406089101242537142058871656153882532690957304325079300483415211886813258860179926085708885618817469473441045057900688487825194597669491527004965426030684393566580518918516861778425059026517300146376476019563964709337610461983552259128313511735628873120666872678566103489606572965216374425386707079123094923603846798071681129144483090856310568847e-177"),
           e_float("2.699050323551717043319089474859163608998906895434039070016182501454991394988233858365951471903392259103899922851625382837466184825162860821917188054026635368251792606079327060061788701381324902935795820207588702658693275277552347978140239066421320056884163964584821175130588555438000269778959338917116179541573675239481470068427137370366125953039002317547930044904689357884227513708311484875371243321e-192"),
           e_float("2.3042044621538833299254421477491913020623655961431086879429081564603783635052043846835858433443456540569984884772474558842032231661155514516793992315578141862605430140457666515981864127048847913858466687889846279436294397236426266495275984212565609590327087135124670442687368597090325342373089091488504716422239966059425495979245969842516191474150421977741926444362285391611550524520400286486723875264e-204"),
           e_float("-6.7851123556125211433689674941848615309572641073900968365399953950336800245896143743569895125585860093549878772352828701917848642621132654170671294789574628797096977561170363434622706598231587694240866780309652972286613805525078461142203977341728442516910241037191293074022128651645646042815853918258303913866697262242646215011994897658629539693890181243524763698448989724043141039222434527441194602149e-215"),
           e_float("-2.5111645590559834664406782583288073536426344693458664319588429884868249745938702317610221625912335111686965651714544069234790883477754948892094843307913953823770075717968794579304605321666026290571845388463711515168493504662496770812019089281942661258364628198009801473054020155522850811347089679807078846301651961293934107898211401328417751258582619285039857994353933506701461192197878684633486841687e-204"),
           e_float("-2.9414748677624134765024265914886074180676136107843328114168437896740169209690828920578368170691818351514653531030531744683479657794650752051249780207148906460010455373647167637535787330577218042938801970588629030850511127178235234410764568573677541680277687659119994620791916914122596330849689799066041882869155677214317100265700254004109819782221776363715048459415728574435500807958495842272549149152e-192"),
           e_float("-1.4316505174214225764141899661353521487885759489938844865669405330066409007913535335595355081397595245710483601199951291363458300816094114585060246032833046627296078154871890680859361241252289328549504784736790175537881809315970129898121550410551257828413191919226493902195125934881087861649663511332733210320812381699300367453054684616256832364584882702240724632361085125898927987581130051715245559666e-177"),
           e_float("-1.2771095433887560564488435582385524996452917185149042778942539014264848616081804683541837197437604258233720407146932248156343624348753845484236408768058410747617444740482824499671380905641087816373454287781876801022680968712365908216684105453719817029322233322771322251613772103261921242460728921231122636416725341621674908871381956177461657580140188628341612471064220184910987985338185238002392100761e-155"),
           e_float("-6.620917256788046487088993891773388812159978323640913421757797563040993114059966195967289378724873766626572234648081567965977599841032035949303689897412873289761960628534874700618326950910353442811894948695227336607447651315575950320222773033822412584448347045571916040620970909696449941158537823659000995188871002386249269536061199843217711916309268266796099570470787796032149626415376172741509325102e-54"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00635_legendre_qvu_vary_15(const bool b_write_output)
    {
      return TestCase_case_00635_legendre_qvu_vary_15().execute(b_write_output);
    }
  }
}
