
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00661_legendre_qvm_vary_01 : public TestCaseReal
    {
    public:
      TestCase_case_00661_legendre_qvm_vary_01() { }
      virtual ~TestCase_case_00661_legendre_qvm_vary_01() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00661_legendre_qvm_vary_01");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +((10 - k) * 13) + sqrt_1_3;
          const INT32   m  = +((10 - k) * 11);
          data[k] = ef::legendre_q(v, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.1267309694478756019104976169675474671585240156627254868027819743527623717027495568645648591350025142879506612555724803014408154108986815786167615502192262558692784148613805447718166210063624360297413999486461921885569899421294036420507197179879330796918157514374575680492301630141369040029753721477966756698852543626187245339870973084627416818548022395065181544511452876434794612453755715361788791478e315"),
           e_float("-3.2879086160970041024154696725758377311935500657055416596462731534184213249932484345890494797422358371371115175960005463702678143022637877993930082662756189199164252782846888970455154764973041847499503540755571735900797490104797227114964890412341486090406017262930531207368924088330155230311639497085612104147403108619878092084005147892890657543430244480009871601753681388096415898175413781683904125647e206"),
           e_float("1.446319030916148987554156536387894549475415215074353619390380356917819579113810759737160320201510610876159668057470422390462817832252816847552219361847785682354088905495368735506845573526172801528472967237688522589968135513349940911399920064712689796038034656542208695336776216329962325242217831463287673818107272252189238927514064524820789897020966310684714139621430882689085625790137740622710113205e171"),
           e_float("-1.9710903553860866441973480136950631658746921106440566137354659372917664336583135411510840644527823697497043365619990333845389538801969873857067115129044352491228966536653616984008904574606287013183460298019833782822336822224744656108465965677325705683872926191133905567402584087544251546408564311074755979188880622480979272683529829529218848136326732060389501010316954938275206873535482515101922642919e145"),
           e_float("-1.7219052437703941532204303553654429051583035318280828767322639051813549323687324550462085446395375340335081192751579746353955067579249858554047987691334023676701355311212397763762064669148794157739682737019397833137509696557740218075946438133125660853057211982103395217518868749125844463424008154650305082137153417931587001731463557074572893082559268694520024024743667600333987949795561792628487500609e119"),
           e_float("-3.6170898221947402140065039073528782846733348596248475573829632945130975809094411922600453956691956846308523068013226961999369669570159641227457952965716278460071103626630531256786368435490683054613092734617747647942508876694661232945705878241069839729743135533768733266889134671874483196259422157796269307345508147992941171404892819465953649359638275237789698441724839963922292510528313762188765559883e95"),
           e_float("-2.3401618464699105430258481302026773163510385330861104393386594596741255836875009978444799468300858955449780167617390936547363893696221169056801234319151851639412148008860460266189618711813986761115123286684696549968428616828604743534178860845506501785366194576172049698266946004624600938097239183663085753764931024021056701741655265404220279633114539075691716039491814716051469161155162904135892246025e72"),
           e_float("1.7689484895292017940009044755856770988674265324033820673906369200827031446534785501586215972563456958490723676410305068820800512523032512793286940387335200811499543640450859264737296664752734359280387685614045522600823078296180327258809762997593412171130765178403541129604515972178376768488149159381726368039112751413791688010128285741536692035518246958006294865502974077504472662238365367618034995783e50"),
           e_float("7.364633226685147605564036360813525126637773279465930017503761090733665218273932047368971061523846855572390702633687058045078993841609959306182658251707127687983657708371398417820604106484952528390800342121142010197122467950998498610943368891051519715718775211004490103635055917610419714991735578099191149202706621057216853554312253997698482986752790399943219793715598885228702175353668952122900813712e29"),
           e_float("-2.778575284187915018787227814486098194841668200600802936161655111058577197765500009984725249490521783284999178957020581485713868170323567621591045556892205192582981225263596486768098763267705771706811260918674737945551505131116410433572656191457706081733643900609514634880480553529267198142237152124590841716436210788497580865156756437915341305822823867429986623128275449266254138702647994989422349092e12"),
           e_float("2.230325587340501685602174174867823286606004280625197134426294853302878244410483822623253385791600512857940909966749250509165769700308992286839714242012523616870072098803725885627445915620579976345056217713844470958568822942836687064212925138392392513120612509887025101250995774908660315683879889305357360181764791201982300718279499648189474466481173567596452598334330168811688842709006194793845147522"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00661_legendre_qvm_vary_01(const bool b_write_output)
    {
      return TestCase_case_00661_legendre_qvm_vary_01().execute(b_write_output);
    }
  }
}
