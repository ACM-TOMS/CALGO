
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00471_bessel_jn_asymp : public TestCaseReal
    {
    public:
      TestCase_case_00471_bessel_jn_asymp() { }
      virtual ~TestCase_case_00471_bessel_jn_asymp() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00471_bessel_jn_asymp");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(7u);
        static const e_float v = ef::ten_k() + ef::euler_gamma();
        INT32 n = static_cast<INT32>(7000);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_j(static_cast<INT32>(10000), n + ef::pi());
          n += static_cast<INT32>(1000);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 7u> a =
        {{
           e_float("1.1446862697791356332911068812850539840419832216755123681875923435760779900212556494215833660829821265867183976486072274747552582949043782626066296038249490502778950329484654081316123965405053905897757821436099785426417158848407174323967687649573202786130509534892288895613917234735167843324109463137853442668586521116509726074176979406060265037003098214602822792265928228480033411952370083641925639292e-789"),
           e_float("1.5907876719216564381545827037383157976507232483883096551553155108878164417231095228404121420520489381419807553837424841206095935958966797114898561712450714760383553470593568167481617621766174274927325820363773257123654025050179454556844679326581520519949263747367980097990814056556447494500063456575317372399767379502467634422422525047564669378018885956703908944201803205266595650235078147098267315642e-406"),
           e_float("5.0245999528760045826721914669070463808378889931154178480901356565036216344530303246177547325048417280567162375322788966650880294336875638543083878860979449340207624583970422531705896534321981006832125984381067314829477734704466907845013215327752020729493752625140552773392476514337618849183042933805135448024499276417594394785456892349611351748392509164087093024386713419594709520888111042212849855678e-138"),
           e_float("0.023518321779798054717574991220660568032062091417212193809246197779448641491134841832856205323880399388112987749797502740876657126462878359937569642680027304074494421750549639190369854047402009772401957950997473870376829737397405420502613570231284913515260637918328365414155131132597685611457154498629186532338360302283305915462482495150393598012636189994048945060041534718915525241525717010128786286701"),
           e_float("-0.011497757637394593210488554030699082224893781979958076256837376612436945939956272120891879947237227463164544934787873874675287737170144534946994407855846039130849335719336064523721768251291969617507583587481967923659561953626974285042498370548142125714274060053348729391870267041505422020308048060571259976382181629404493360983132640375229803898164090648992808709795357617481422424446655221964291370907"),
           e_float("-0.0019303562825810135020958794829416833783539687751106469785222889195356575255075092887597312741453664564304762844894043830408865477641621807508367446296117415113954525500140349060357799718018618043903801270479899048449515061075470103314755818386292952469519253277290636954838920299082800091646043469088276183915866882346952393946957314391820055730660349025334017807826611378742075926131668786589271200866"),
           e_float("0.008522380687415995957581024292744451755949525260280695121136939137260889606481394531559804404739336647137102674421693901732586369621581108842382998407792149088449233290689105733891050224669788977376799747308323975126608402831811552541684926017502722894047310213599231601174853494183252731402049529228501655098111601821014066392933678568828492770444143767472623361774455715152360254484232302606092003317"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00471_bessel_jn_asymp(const bool b_write_output)
    {
      return TestCase_case_00471_bessel_jn_asymp().execute(b_write_output);
    }
  }
}
