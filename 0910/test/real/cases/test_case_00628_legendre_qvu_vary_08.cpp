
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00628_legendre_qvu_vary_08 : public TestCaseReal
    {
    public:
      TestCase_case_00628_legendre_qvu_vary_08() { }
      virtual ~TestCase_case_00628_legendre_qvu_vary_08() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00628_legendre_qvu_vary_08");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -127 - sqrt_1_3;
          const e_float u  = +127 + sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-2.0630763935878033943688267485548954413225176662060426436162343298757626350432540847701848455682880446235557645590208536394704655176944546608860688715674804944921834691582623754837988280670107557230749611029892465743295034907939653535323659670255993313841684406024547720136438154203721621222408518779078022919874578293765114982973260392464008311277356847878447072062470541316393904143163205382336027902e373"),
           e_float("-2.2381406602145121866725942570611726037350048423986758742756093811524634811848259297070086484712099376645402601033655848037267529993549111964798070375574651947385157306055032008024048559058256944555402164248084739658722573548204432296585722700387835375072770855903945423047572963013786651809843174204719967639001690338215841836325715378942579433896983111752702089415571328888920108138266652975569003206e277"),
           e_float("-7.0046199537531150435777918885331340615321185303548213178317508898924895564564464520713004721212309943524380624984207620982176168656175760769279590555490862473352228766728732131787285597847359620231759920562634335978134858478888165130627960645868118470325302230823378900344461743085773197320383433341596266944403836122789896550463930621811886454737151224703800233069276733113417508417955256320566923368e261"),
           e_float("-3.0845802796574710421157055415735287502468640821059111634352830284712357344212330713258652259338004726666991964234363648555963005537965891617704751541492668741593028308712903833639637990068414038479991628553569136428836695524120935564831274515185129417647118135632142067048395936378746425468087790690010418403123819696796492876516800879719599339192050715602692598888026116027144826983285233033860851435e254"),
           e_float("-8.3586142085213559146800593294007745998311471982029415707901909464849216102760251469369918984592944935127313738463487387052750679399209688316501082228311877677224443091798495942134774289385603778833391221727992602280409731753100014487029231953310551725873195540073830579635039598556510072819329194991808434359741957016332383183609266656474477511426023969930120120627260591311189526978058744276801779352e250"),
           e_float("-7.5804150474830513376470037906542848500281050754646206550473548221961510837062125794416322893114339101467748164119662429252113387565466674800119490355891654756778358007811392058408261183541689629725081318912857198557300472716906249986152101140239328576406777217106036982068381273490701219490987359229529156187337791799380795248873339168402518018559871139931035781392778930054581606723082123322680255224e249"),
           e_float("-5.7401137366451687474314165928354493302609705480102923214432641764750137873706126385276765545577263340427317180747158642450973122703501101022017265380475857266484187422889681626646924260139944234586744541957283177607967785854987141940373357023304253745085577700881775411775547251141825076631384399343102521793703169606879500376719472171231147148271769419461890779214659131981538177729717306258563369768e250"),
           e_float("-2.1161507118985976569156608047712910362612097984369858763378771118005755241656588010832809010720801902503785327967899589393543423587508742998222793179719442594544530459797743184766018832941567521554056044182633078842532030332787590403300352207942489330921530948453232925139630576745109338497946609000659854563526632062060968251939669051042880786317671965253564961029114264696233279831562506734048409705e254"),
           e_float("-4.8054614103924906574686596082215064480983850385038679024358961654057281975812108342414530339594384366960141918425199138672429370283515764046337656765226318609379383781180650498634867860177381900370722280097827960575789165978551576682087164579672534563071919274400885336714740649327233155818432355755332833236059305559764684875077750507719752425351783303294894649637042154830988028994699588819645143321e261"),
           e_float("-1.5354578327876960752524404132477768536309800467387014687052912687305739918252920368189322772069457298419609045103166943829794780270094359183513280080453861697776126472100923131256714773654803887712655594493198834226893644171146673382115017695801635036144803364520276009183995943021555260450336739194507229701851804316075916818856788870963445164482862226098998385617101771327349512347166957014845064327e277"),
           e_float("-1.415356444965426468685032755669877634280106036791486397878909520881147954434557905954799794107273260590716105397014462363959545351789377174864150288196540476556141783559894987868249160316413686904605253587194995865080399783238281911735784702625200555411175075592390836429078845397630546535749391267206047610059681919164746405137868205705666400467714725887880164270351785356826948967906711375077724647e373"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00628_legendre_qvu_vary_08(const bool b_write_output)
    {
      return TestCase_case_00628_legendre_qvu_vary_08().execute(b_write_output);
    }
  }
}
