
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00551_various_bessel : public TestCaseReal
    {
    public:
      TestCase_case_00551_various_bessel() { }
      virtual ~TestCase_case_00551_various_bessel() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00551_various_bessel");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.clear();
        data.push_back(ef::cyl_bessel_i(16600, e_float(1000) + ef::euler_gamma()));
        data.push_back(ef::cyl_bessel_i(16600, e_float(2000) + ef::euler_gamma()));
        data.push_back(ef::cyl_bessel_i(16600, e_float(4000) + ef::euler_gamma()));
        data.push_back(ef::cyl_bessel_k(ef::half() + e_float("1e-20"), 12 + ef::pi()));
        data.push_back(ef::cyl_bessel_k(ef::half() + e_float("1e-50"), 12 + ef::pi()));
        data.push_back(ef::cyl_bessel_y(123, ef::million()));
        data.push_back(ef::cyl_bessel_y( 79, ef::hundred_k()));
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 7u> a =
        {{
           e_float("3.9079235440246888464087845970824989150264382986035144513097731988100815676657563027443492456256364748148567439318887327310430310803960594554377308144167139907826981544680300608967152494927109876792369732834926503715800756962635701724790993109525552173032257329455539280942569386166847999449088896739771278665147137244168163318005728860491083512527765184308241729726633962100007377269674052708117446024e-18034"),
           e_float("1.5628149585741163566830802192131854404447520570272658365722588073986296841721917318061098209722151289743823182809223277179128511858102222282479717439950547600360950915141884062185953303981995665241129493867406608721014969975459590191439207806231687735531614422576401677602329772691309977270949630541156096073118307354781216451073767815988034340519630337930588609162993295412938765629776015470309886391e-13019"),
           e_float("1.1242671500185586090608420303442856668855648820854425517186530378657120068001461065535555637132827363453669093635814573864283163903970321654797400506050146319256060569890506360352073447397039185207984819880882267403929002349587602074424660401970217964008086289720118701992976097273432532829264621801000350284847196943641276463830194816724648026834712875120976904915866341976219453280183835971829678514e-7945"),
           e_float("8.5519277402122050974591209286941194730893927708231102820593827517037212766084230394363301685799201300018764595698521906285647188299411586265770172116160606333771308539660839008297971184508896818097139074581956303314735818681185726223596809875552426640671796748072845723979735592352055160505639472029500700498732404021082387638020519884874082741079407805253450037778760460844243079262400682700823497851e-8"),
           e_float("8.5519277402122050974563845777204294271278875452738990710301232880063519613575785821913803917534557292118003394705225421882440892947220949358428546393715576173472944838282318212890366824008463214347866387461053365133176410668139964722961403250372644089245592989436634404584698077646690045049218411018764083697023209928107531705222029986954486318188663399350025833097052885386142332539572601680907001607e-8"),
           e_float("0.00033652508016370816965192469683883303918707889684907557002658565110767142792618863725090730683006461094017051494180337014743148764062411563468026912415855913110230945860397890785812521800084501157138978414483483763662803849823710576087740342458689464634729539054691992668436066564699224625431256998719946064634126542042204438224408369484327716704405846216270152714413817205632285396482880675870222058339"),
           e_float("-0.0017759834121996312178372345703308595759131619289058272831917391963679264334638078322702785229163171494463742888482324560802939951251997000666514965221780774126488008797648098283062165457130461065130982939347890179069146272509052469244793805542774533040439058040578621004326295963833688447923197784846186767085218315947784968464853554786130463046304428093014033791664853408813397925165702423962973035783"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00551_various_bessel(const bool b_write_output)
    {
      return TestCase_case_00551_various_bessel().execute(b_write_output);
    }
  }
}
