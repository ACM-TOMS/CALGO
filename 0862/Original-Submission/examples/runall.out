runall

% Print our answers in compact format so that more fits on the
% screen. Use set(o,' FormatSpacing', 'loose') to change to back to
% normal. 
set(0, 'FormatSpacing', 'compact');

% Add the directory that contains all the classes to the path. In
% this case, it should be the directory one up.
p = [pwd '/../'];
addpath(p);

echo off
clear
% ----------------------------------------------------------------------
% Example 1: Creating a tensor object from a multidimensional array
% ----------------------------------------------------------------------
% Create a three-dimensional MDA
A = rand(3,4,2)
A(:,:,1) =
    0.0743    0.2764    0.6382    0.9477
    0.1932    0.7709    0.9866    0.8280
    0.3796    0.3139    0.5029    0.9176
A(:,:,2) =
    0.1131    0.1564    0.7218    0.6632
    0.8121    0.1221    0.6516    0.8835
    0.9083    0.7627    0.7540    0.2722

% Convert A to a tensor
T = tensor(A)
T is a tensor of size 3 x 4 x 2
T.data = 
(:,:,1) =
    0.0743    0.2764    0.6382    0.9477
    0.1932    0.7709    0.9866    0.8280
    0.3796    0.3139    0.5029    0.9176
(:,:,2) =
    0.1131    0.1564    0.7218    0.6632
    0.8121    0.1221    0.6516    0.8835
    0.9083    0.7627    0.7540    0.2722

echo off
clear
% ----------------------------------------------------------------------
% Example 2: The tensor class explicitly tracks trailing singleton
% dimensions
% ----------------------------------------------------------------------
% Create an MDA of size 4 x 3 x 1.
A = rand([4 3 1]);

% Trailing singleton dimensions are ignored, so
% the number of reported dimensions is only 2.
ndims(A)
ans =
     2

size(A)
ans =
     4     3

% Explicitly specifying the dimensions with the tensor constructor 
% creates an order-3 tensor of size 4 x 3 x 1.
T = tensor(A,[4 3 1]);

% Now the number of dimensions and size include the trailing
% singleton dimension.
ndims(T)
ans =
     3

size(T)
ans =
     4     3     1

% The WHOS command reports the correct sizes for the tensor
% object 
whos
  Name      Size                           Bytes  Class

  A         4x3                               96  double array
  T         4x3x1                            368  tensor object
  ans       1x3                               24  double array

Grand total is 32 elements using 488 bytes


echo off
clear
% ----------------------------------------------------------------------
% Example 3: The tensor object can explicitly store zero- and
% one-dimensional objects.
% ----------------------------------------------------------------------
% A scalar can be stored as a tensor of order zero.
T0 = tensor(5,[]);

order(T0)
ans =
     0

ndims(T0)
ans =
     1

size(T0)
ans =
     []

% A vector can be stored as a tensor of order one.
T1 = tensor(rand(4,1),[4]);
order(T1)
ans =
     1

ndims(T1)
ans =
     1

size(T1)
ans =
     4

% The WHOS command does not report the correct sizes!
whos
  Name      Size                    Bytes  Class

  T0        1x1                       256  tensor object
  T1        1x1                       288  tensor object
  ans       1x1                         8  double array

Grand total is 11 elements using 552 bytes


echo off
clear
% ----------------------------------------------------------------------
% Example 4: Accessors and assignment for a tensor object work the
% same as they would for a multidimensional array.
% ----------------------------------------------------------------------
% Create a random 2 x 2 x 2 tensor
A = tensor(rand(2,2,2))
A is a tensor of size 2 x 2 x 2
A.data = 
(:,:,1) =
    0.1813    0.4222
    0.5019    0.6604
(:,:,2) =
    0.6737    0.1919
    0.9573    0.1112

% Access the (2,1,1) element
A(2,1,1)
ans =
    0.5019

% Reassign a 2 x 2 submatrix to be
% the 2 x 2 identity matrix
A(:,1,:) = eye(2)
A is a tensor of size 2 x 2 x 2
A.data = 
(:,:,1) =
    1.0000    0.4222
         0    0.6604
(:,:,2) =
         0    0.1919
    1.0000    0.1112

% Access the A(:,1,:) sub-tensor
A(:,1,:)
ans is a tensor of size 2 x 2
ans.data = 
     1     0
     0     1

echo off
clear
% ----------------------------------------------------------------------
% Example 5: Calculating n-mode products
% ----------------------------------------------------------------------
% Create a 4 x 3 x 2 tensor
A = tensor(rand(4,3,2));

% Create a 2 x 4 matrix
U = rand(2,4);

% Create a 3 x 2 matrix
V = rand(3,2);

% Computing A x_1 U x_3 V
B = ttm(A,U,1);
C = ttm(B,V,3)
C is a tensor of size 2 x 3 x 3
C.data = 
(:,:,1) =
    0.3563    0.2066    0.2534
    0.4698    0.2372    0.3254
(:,:,2) =
    0.1352    0.0791    0.0997
    0.1707    0.0808    0.1100
(:,:,3) =
    1.6437    0.9626    1.2137
    2.0732    0.9795    1.3327

% Computing A x_3 V x_1 U
D = ttm(A,V,3);
E = ttm(D,U,1)
E is a tensor of size 2 x 3 x 3
E.data = 
(:,:,1) =
    0.3563    0.2066    0.2534
    0.4698    0.2372    0.3254
(:,:,2) =
    0.1352    0.0791    0.0997
    0.1707    0.0808    0.1100
(:,:,3) =
    1.6437    0.9626    1.2137
    2.0732    0.9795    1.3327

% The answers are the same
norm(C - E)
ans =
  5.5041e-016

echo off

% ----------------------------------------------------------------------
% Example 6: An alternate approach to calculating n-mode products
% ----------------------------------------------------------------------
% (Note: Must run ex5 immediately before this script.)
% Put U and V into a cell array
W{1} = U;
W{2} = V;

% Now compute A x_1 U x_3 V using the cell array
F = ttm(A,W,[1 3])
F is a tensor of size 2 x 3 x 3
F.data = 
(:,:,1) =
    0.3563    0.2066    0.2534
    0.4698    0.2372    0.3254
(:,:,2) =
    0.1352    0.0791    0.0997
    0.1707    0.0808    0.1100
(:,:,3) =
    1.6437    0.9626    1.2137
    2.0732    0.9795    1.3327

% The answers are the same
norm(C - F)
ans =
     0

echo off
clear
% ----------------------------------------------------------------------
% Example 7: Comparison of ttv and ttm
% ----------------------------------------------------------------------
% Create a 3 x 4 x 2 tensor
A = tensor(rand(3,4,2));

% Create a length 3 vector
u = rand(3,1);

% Computing "tensor times vector" (ttv) yields a result of 
% size 4 x 2.
C = ttv(A,u,1)
C is a tensor of size 4 x 2
C.data = 
    0.4756    0.8755
    0.6818    1.3154
    0.7301    1.0372
    0.4829    0.6863

% Computing "tensor times matrix" (ttm) yields same result,
% but of size 1 x 4 x 2.
B = ttm(A,(u'),1)
B is a tensor of size 1 x 4 x 2
B.data = 
(:,:,1) =
    0.4756    0.6818    0.7301    0.4829
(:,:,2) =
    0.8755    1.3154    1.0372    0.6863

echo off
clear
% ----------------------------------------------------------------------
% Example 8: Tensor times a sequence of vectors
% ----------------------------------------------------------------------
% Create a 3 x 4 x 2 tensor
A = tensor(rand(3,4,2));

% Create three vectors in a cell array
U = {rand(3,1), rand(4,1), rand(2,1)};

% A tensor times a sequence of vectors in every
% dimension produces a scalar.
ttv(A,U)
ans is a tensor of order 0 (i.e., a scalar)
ans.data = 
    1.2795

% A tensor times a sequence of vectors in every
% dimension *except one* produces a vector.  Here 
% we neglect the 2nd dimension.
ttv(A,U,-2)
ans is a tensor of size 4
ans.data = 
    0.5430
    0.2772
    0.5456
    0.4798

echo off
clear
% ----------------------------------------------------------------------
% Example 9: Tensor times tensor - outer product
% ----------------------------------------------------------------------
% Create a tensor of size 3 x 4
A = tensor(reshape([1:12],[3,4]))
A is a tensor of size 3 x 4
A.data = 
     1     4     7    10
     2     5     8    11
     3     6     9    12

% Create a tensor of size 2
B = tensor([1;2],2)
B is a tensor of size 2
B.data = 
     1
     2

% Example of tensor outer product
ttt(A,B)
ans is a tensor of size 3 x 4 x 2
ans.data = 
(:,:,1) =
     1     4     7    10
     2     5     8    11
     3     6     9    12
(:,:,2) =
     2     8    14    20
     4    10    16    22
     6    12    18    24

echo off
clear
% ----------------------------------------------------------------------
% Example 10: Computing the contracted product of a tensor times a
% tensor 
% ----------------------------------------------------------------------
% Create a 3 x 4 x 2 tensor
A = tensor(rand(3,4,2))
A is a tensor of size 3 x 4 x 2
A.data = 
(:,:,1) =
    0.1930    0.3087    0.3331    0.5608
    0.4454    0.8754    0.8807    0.6159
    0.0130    0.8353    0.4797    0.6619
(:,:,2) =
    0.6166    0.7140    0.9667    0.5877
    0.6851    0.5152    0.8221    0.1302
    0.5102    0.6059    0.3178    0.2544

% Create a 4 x 3 x 2 tensor
B = tensor(rand(4,3,2))
B is a tensor of size 4 x 3 x 2
B.data = 
(:,:,1) =
    0.8030    0.4546    0.4766
    0.6678    0.9049    0.9837
    0.0136    0.2822    0.9223
    0.5616    0.0650    0.5612
(:,:,2) =
    0.6523    0.5418    0.7871
    0.7727    0.0069    0.6186
    0.1062    0.4513    0.0155
    0.0011    0.1957    0.8909

% Tensor multiplication - matching dimensions 1 & 3 of A with
% dimensions 2 & 3 of B. 
ttt(A,B,[1 3],[2 3])
ans is a tensor of size 4 x 4
ans.data = 
    1.5386    1.3414    0.5229    0.7338
    2.2657    2.7500    1.3393    1.3404
    2.2225    2.4405    1.1741    0.9585
    1.6999    2.1954    0.9170    0.9792

echo off
clear
% ----------------------------------------------------------------------
% Example 11: Computing the inner product with ttt or *
% ----------------------------------------------------------------------
% Create a 3 x 4 x 2 tensor
A = tensor(rand(3,4,2))
A is a tensor of size 3 x 4 x 2
A.data = 
(:,:,1) =
    0.7617    0.3807    0.5646    0.4841
    0.9070    0.3311    0.7672    0.8022
    0.7586    0.5041    0.7799    0.4710
(:,:,2) =
    0.2028    0.6768    0.7374    0.5039
    0.5796    0.9425    0.8663    0.6291
    0.6665    0.7701    0.9909    0.7926

% Create a 3 x 4 x 2 tensor
B = tensor(rand(3,4,2))
B is a tensor of size 3 x 4 x 2
B.data = 
(:,:,1) =
    0.4486    0.1307    0.1414    0.2811
    0.5244    0.2188    0.4570    0.2248
    0.1715    0.1055    0.7881    0.9089
(:,:,2) =
    0.0073    0.6535    0.4161    0.9383
    0.5887    0.3134    0.2988    0.3431
    0.5421    0.2312    0.6724    0.5630

% Tensor inner product of same-sized tensors
C = ttt(A,B,[1:3])
C is a tensor of order 0 (i.e., a scalar)
C.data = 
    6.8990

% Can also be computed using '*' notation
D = A * B;

% Results are equal
norm(C - D)
ans =
     0

echo off
clear
% ----------------------------------------------------------------------
% Example 12: Matricizing a tensor using the tensor_as_matrix class.
% ----------------------------------------------------------------------
% Create a 4 x 3 x 2 tensor with the elements 1 thru 24.
T = tensor(reshape(1:24,[4 3 2]))
T is a tensor of size 4 x 3 x 2
T.data = 
(:,:,1) =
     1     5     9
     2     6    10
     3     7    11
     4     8    12
(:,:,2) =
    13    17    21
    14    18    22
    15    19    23
    16    20    24

% Matricize T by putting its first dimension into the rows
tensor_as_matrix(T,[1])
ans is a matrix corresponding to a tensor of size 4 x 3 x 2
ans.rindices = [1] (modes of tensor corresponding to rows)
ans.cindices = [2, 3] (modes of tensor corresponding to columns)
ans.data = 
     1     5     9    13    17    21
     2     6    10    14    18    22
     3     7    11    15    19    23
     4     8    12    16    20    24

% Matricize T by putting its second dimension into the rows
tensor_as_matrix(T,[2])
ans is a matrix corresponding to a tensor of size 4 x 3 x 2
ans.rindices = [2] (modes of tensor corresponding to rows)
ans.cindices = [1, 3] (modes of tensor corresponding to columns)
ans.data = 
     1     2     3     4    13    14    15    16
     5     6     7     8    17    18    19    20
     9    10    11    12    21    22    23    24

% Matricize T by putting its second dimension into the rows and
% specifying the order of the dimensions spanning the columns
tensor_as_matrix(T,[2],[3 1])
ans is a matrix corresponding to a tensor of size 4 x 3 x 2
ans.rindices = [2] (modes of tensor corresponding to rows)
ans.cindices = [3, 1] (modes of tensor corresponding to columns)
ans.data = 
     1    13     2    14     3    15     4    16
     5    17     6    18     7    19     8    20
     9    21    10    22    11    23    12    24

echo off
clear
% ----------------------------------------------------------------------
% Example 13: Tensor-tensor multiplication using tensor_as_matrix
% objects.
% ----------------------------------------------------------------------
% Create a 3 x 4 x 2 tensor
T = tensor(rand(3,4,2));

% Convert to a matrix
A = tensor_as_matrix(T,2)
A is a matrix corresponding to a tensor of size 3 x 4 x 2
A.rindices = [2] (modes of tensor corresponding to rows)
A.cindices = [1, 3] (modes of tensor corresponding to columns)
A.data = 
    0.1189    0.1690    0.2789    0.9222    0.0133    0.7675
    0.5568    0.4856    0.9522    0.9473    0.8133    0.9238
    0.2319    0.4787    0.5265    0.1990    0.6743    0.9271
    0.7927    0.1930    0.9096    0.3438    0.5945    0.6155

% Compute the product of two matricized tensors
B = A' * A
B is a matrix corresponding to a tensor of size 3 x 2 x 3 x 2
B.rindices = [1, 2] (modes of tensor corresponding to rows)
B.cindices = [3, 4] (modes of tensor corresponding to columns)
B.data = 
    1.0064    0.5545    1.4065    0.9558    1.0821    1.3086
    0.5545    0.5307    0.9371    0.7775    0.8347    1.1409
    1.4065    0.9371    2.0891    1.5768    1.6739    2.1417
    0.9558    0.7775    1.5768    1.9057    1.1213    1.9791
    1.0821    0.8347    1.6739    1.1213    1.4697    1.7526
    1.3086    1.1409    2.1417    1.9791    1.7526    2.6809

% Or do the multiplication using ttt instead
C = ttt(T,T,2,2)
C is a tensor of size 3 x 2 x 3 x 2
C.data = 
(:,:,1,1) =
    1.0064    0.9558
    0.5545    1.0821
    1.4065    1.3086
(:,:,2,1) =
    0.5545    0.7775
    0.5307    0.8347
    0.9371    1.1409
(:,:,3,1) =
    1.4065    1.5768
    0.9371    1.6739
    2.0891    2.1417
(:,:,1,2) =
    0.9558    1.9057
    0.7775    1.1213
    1.5768    1.9791
(:,:,2,2) =
    1.0821    1.1213
    0.8347    1.4697
    1.6739    1.7526
(:,:,3,2) =
    1.3086    1.9791
    1.1409    1.7526
    2.1417    2.6809

echo off
% ----------------------------------------------------------------------
% Example 14: Constructing a tensor by converting a
% tensor_as_matrix object.
% ----------------------------------------------------------------------
% (Note: Must run ex13 immediately before this script.)
% Convert the tensor_as_matrix object from the previous example
% into a tensor
D = tensor(B)
D is a tensor of size 3 x 2 x 3 x 2
D.data = 
(:,:,1,1) =
    1.0064    0.9558
    0.5545    1.0821
    1.4065    1.3086
(:,:,2,1) =
    0.5545    0.7775
    0.5307    0.8347
    0.9371    1.1409
(:,:,3,1) =
    1.4065    1.5768
    0.9371    1.6739
    2.0891    2.1417
(:,:,1,2) =
    0.9558    1.9057
    0.7775    1.1213
    1.5768    1.9791
(:,:,2,2) =
    1.0821    1.1213
    0.8347    1.4697
    1.6739    1.7526
(:,:,3,2) =
    1.3086    1.9791
    1.1409    1.7526
    2.1417    2.6809

% They are the same
norm(C-D)
ans =
     0

echo off
clear
% ----------------------------------------------------------------------
% Example 15: Two choices for converting a tensor to a matrix.
% ----------------------------------------------------------------------
% Let T be a 3 x 4 x 2 tensor
T = tensor(rand(3,4,2))
T is a tensor of size 3 x 4 x 2
T.data = 
(:,:,1) =
    0.0034    0.6928    0.6097    0.1121
    0.9820    0.4397    0.2999    0.2916
    0.8995    0.7010    0.8560    0.0974
(:,:,2) =
    0.3974    0.8386    0.0059    0.8068
    0.3333    0.2584    0.5744    0.6376
    0.9442    0.0429    0.7439    0.2513

% Backward cyclic
A1 = tensor_as_matrix(T,2,'bc')
A1 is a matrix corresponding to a tensor of size 3 x 4 x 2
A1.rindices = [2] (modes of tensor corresponding to rows)
A1.cindices = [1, 3] (modes of tensor corresponding to columns)
A1.data = 
    0.0034    0.9820    0.8995    0.3974    0.3333    0.9442
    0.6928    0.4397    0.7010    0.8386    0.2584    0.0429
    0.6097    0.2999    0.8560    0.0059    0.5744    0.7439
    0.1121    0.2916    0.0974    0.8068    0.6376    0.2513

% Forward cyclic
A2 = tensor_as_matrix(T,2,'fc')
A2 is a matrix corresponding to a tensor of size 3 x 4 x 2
A2.rindices = [2] (modes of tensor corresponding to rows)
A2.cindices = [3, 1] (modes of tensor corresponding to columns)
A2.data = 
    0.0034    0.3974    0.9820    0.3333    0.8995    0.9442
    0.6928    0.8386    0.4397    0.2584    0.7010    0.0429
    0.6097    0.0059    0.2999    0.5744    0.8560    0.7439
    0.1121    0.8068    0.2916    0.6376    0.0974    0.2513

echo off
clear
% ----------------------------------------------------------------------
% Example 16: Example of computing the series of n-mode products
% using tensor_as_matrix
% ----------------------------------------------------------------------
% Compute a random tensor T 
sizeT = [5,4,3,2];
T = tensor(rand(sizeT));

% Compute corresponding matrices
for n = 1:ndims(T)
    U{n} = rand(size(T,n),size(T,n));
    U{n} = rand(size(T,n),size(T,n));
    U{n} = rand(size(T,n),size(T,n));
    U{n} = rand(size(T,n),size(T,n));
end
% Use a tensor command to compute the
% tensor times the sequence of matrices
A = ttm(T,U);

% Manipulate the tensor instead in matrix form
% to compute the same result.
rdim = 2;
M = tensor_as_matrix(T, rdim, 'fc');
cdims = M.cindices;
B = U{rdim} * double(M);
B = B * kron(kron(U{cdims(3)},U{cdims(2)}),U{cdims(1)})';

% Reshape result to match A
B = reshape(B, [sizeT(rdim) sizeT(cdims)] );
[sdims sindx] = sort([rdim cdims]);
B = permute(B,sindx);

% Compare the results
dif = norm(A - tensor(B)) / norm(A)
dif =
  1.7698e-016

echo off
clear
% ----------------------------------------------------------------------
% Example 17: Creating a CP tensor
% ----------------------------------------------------------------------
% Create a CP tensor of size 3 x 2 x 3
A = cp_tensor(5, [2 3 4]', [1 2]', [5 4 3]')
A is a CP tensor of size 3 x 2 x 3 
A.lambda = 
     5
A.U{1} = 
     2
     3
     4
A.U{2} = 
     1
     2
A.U{3} = 
     5
     4
     3

% The size of A
size(A)
ans =
     3     2     3

% The number of factors of A
length(A.lambda)
ans =
     1

% Convert to a (dense) tensor
B = full(A)
B is a tensor of size 3 x 2 x 3
B.data = 
(:,:,1) =
    50   100
    75   150
   100   200
(:,:,2) =
    40    80
    60   120
    80   160
(:,:,3) =
    30    60
    45    90
    60   120

echo off
clear
% ----------------------------------------------------------------------
% Example 18: Adding two CP tensors
% ----------------------------------------------------------------------
% Create a CP tensor with one factor
A = cp_tensor(5, [2 3 4]', [1 2]', [5 4 3]');

% Add the two CP tensors, and the result has two factors
B = A + A
B is a CP tensor of size 3 x 2 x 3 
B.lambda = 
     5
     5
B.U{1} = 
     2     2
     3     3
     4     4
B.U{2} = 
     1     1
     2     2
B.U{3} = 
     5     5
     4     4
     3     3

% Convert to a dense tensor
C = full(B)
C is a tensor of size 3 x 2 x 3
C.data = 
(:,:,1) =
   100   200
   150   300
   200   400
(:,:,2) =
    80   160
   120   240
   160   320
(:,:,3) =
    60   120
    90   180
   120   240

echo off
clear
% ----------------------------------------------------------------------
% Example 19: Creating a Tucker tensor
% ----------------------------------------------------------------------
% Create a core array
lambda = tensor(rand(4,3,1),[4 3 1]);

% Create the factors
for n = 1 : 3
    U{n} = rand(5,size(lambda,n));
    U{n} = rand(5,size(lambda,n));
    U{n} = rand(5,size(lambda,n));
end
% Assemble into a Tucker tensor
A = tucker_tensor(lambda,U)
A is a Tucker tensor of size 5 x 5 x 5 
A.lambda is a tensor of size 4 x 3 x 1
A.lambda.data = 
    0.8692    0.7430    0.4700
    0.3916    0.6508    0.6299
    0.2528    0.9398    0.0582
    0.3544    0.8328    0.5422
A.U{1} = 
    0.4557    0.6560    0.2274    0.4330
    0.8631    0.0000    0.3279    0.8424
    0.8552    0.1312    0.8995    0.1845
    0.4723    0.4949    0.3137    0.5082
    0.7869    0.0383    0.2517    0.4522
A.U{2} = 
    0.3256    0.4574    0.3735
    0.3801    0.7992    0.4840
    0.8865    0.1341    0.9695
    0.7613    0.0653    0.3421
    0.8838    0.3751    0.2527
A.U{3} = 
    0.5849
    0.5237
    0.1634
    0.4864
    0.4961

% The size of A
size(A)
ans =
     5     5     5

% The size of the core array
size(A.lambda)
ans =
     4     3     1

echo off
clear
% ----------------------------------------------------------------------
% Example 20: Higher-order power method for approximation
% ----------------------------------------------------------------------
% Create a tensor
T = tensor(rand(3,4,2))
T is a tensor of size 3 x 4 x 2
T.data = 
(:,:,1) =
    0.8432    0.6098    0.1030    0.5604
    0.8062    0.5657    0.1583    0.2687
    0.8578    0.6119    0.4136    0.7843
(:,:,2) =
    0.3879    0.5586    0.9332    0.0492
    0.0310    0.2007    0.2594    0.6062
    0.5855    0.0874    0.2042    0.5463

% Compute an approximation with one factor
T1 = hopm(T)
T1 is a CP tensor of size 3 x 4 x 2 
T1.lambda = 
    2.3820
T1.U{1} = 
   -0.5963
   -0.4600
   -0.6579
T1.U{2} = 
    0.6536
    0.4736
    0.3219
    0.4948
T1.U{3} = 
   -0.8558
   -0.5173

% Convert T1 to a densor tensor
T1f = full(T1)
T1f is a tensor of size 3 x 4 x 2
T1f.data = 
(:,:,1) =
    0.7946    0.5758    0.3914    0.6015
    0.6129    0.4441    0.3019    0.4640
    0.8766    0.6352    0.4318    0.6636
(:,:,2) =
    0.4802    0.3480    0.2365    0.3636
    0.3704    0.2684    0.1824    0.2804
    0.5298    0.3839    0.2609    0.4011

% How good is the approximation?
diff1 = norm(T - T1f) / norm(T)
diff1 =
    0.4177

echo off
% ----------------------------------------------------------------------
% Example 21: Example of the higher-order orthogonal iteration to
% compute a Tucker approximation with a 1 x 1 x 1 core array
% ----------------------------------------------------------------------
% (Note: Must run ex20 immediately before this script.)
% Compute a Tucker approximation with a core array of size 1 x 1 x 1
% using HOOI.
T2 = hooi(T,[1 1 1])
T2 is a Tucker tensor of size 3 x 4 x 2 
T2.lambda is a tensor of size 1 x 1 x 1
T2.lambda.data = 
    2.3820
T2.U{1} = 
   -0.5963
   -0.4600
   -0.6579
T2.U{2} = 
   -0.6536
   -0.4736
   -0.3219
   -0.4948
T2.U{3} = 
    0.8558
    0.5173

% Convert to a dense tensor
T2f = full(T2)
T2f is a tensor of size 3 x 4 x 2
T2f.data = 
(:,:,1) =
    0.7946    0.5758    0.3914    0.6015
    0.6129    0.4441    0.3019    0.4640
    0.8766    0.6352    0.4318    0.6636
(:,:,2) =
    0.4802    0.3480    0.2365    0.3636
    0.3704    0.2684    0.1824    0.2804
    0.5298    0.3839    0.2609    0.4011

% How good is the answer?
diff2 = norm(T - T2f) / norm(T)
diff2 =
    0.4177

echo off
% ----------------------------------------------------------------------
% Example 22: Example of the higher-order orthogonal iteration to
% compute a Tucker approximation with a 2 x 2 x 1 core array
% ----------------------------------------------------------------------
% (Note: Must run ex20 immediately before this script.)
% Compute a Tucker approximation with a core array of size 2 x 2 x 1
% using HOOI.
T3 = hooi(T,[2 2 1])
T3 is a Tucker tensor of size 3 x 4 x 2 
T3.lambda is a tensor of size 2 x 2 x 1
T3.lambda.data = 
    2.3805    0.0000
   -0.0000   -0.3830
T3.U{1} = 
   -0.5986   -0.7398
   -0.4584    0.0017
   -0.6569    0.6729
T3.U{2} = 
    0.6503    0.0549
    0.4719   -0.5913
    0.3298   -0.3505
    0.4956    0.7242
T3.U{3} = 
   -0.8357
   -0.5491

% Convert to a dense tensor
T3f = full(T3)
T3f is a tensor of size 3 x 4 x 2
T3f.data = 
(:,:,1) =
    0.7615    0.7020    0.4757    0.4187
    0.5931    0.4300    0.3005    0.4524
    0.8618    0.4894    0.3555    0.8037
(:,:,2) =
    0.5003    0.4613    0.3126    0.2751
    0.3897    0.2826    0.1975    0.2972
    0.5662    0.3216    0.2336    0.5281

% How good is the answer?
diff3 = norm(T - T3f) / norm(T)
diff3 =
    0.3927

echo off
% ----------------------------------------------------------------------
% Example 23: Example of the higher-order orthogonal iteration to
% compute a Tucker approximation with a 3 x 4 x 2 core array
% ----------------------------------------------------------------------
% (Note: Must run ex20 immediately before this script.)
% Compute a Tucker approximation with a core array of size 3 x 4 x 2
% using HOOI.
T4 = hooi(T,[3 4 2])
T4 is a Tucker tensor of size 3 x 4 x 2 
T4.lambda is a tensor of size 3 x 4 x 2
T4.lambda.data = 
(:,:,1) =
   -2.3775   -0.0217   -0.0218   -0.0029
    0.0844    0.3013    0.1924   -0.0854
    0.0583    0.0354    0.0960   -0.1401
(:,:,2) =
    0.0859    0.4227   -0.3521    0.1296
   -0.1745    0.6675    0.1484   -0.0282
    0.0409    0.0285   -0.4256   -0.1871
T4.U{1} = 
    0.6277    0.7760   -0.0623
    0.4677   -0.3119    0.8270
    0.6223   -0.5483   -0.5588
T4.U{2} = 
   -0.6527   -0.2452    0.5143    0.4994
   -0.4799    0.2148    0.2750   -0.8050
   -0.3374    0.8249   -0.3334    0.3074
   -0.4794   -0.4618   -0.7407   -0.0904
T4.U{3} = 
    0.8338   -0.5520
    0.5520    0.8338

% Convert to a dense tensor
T4f = full(T4)
T4f is a tensor of size 3 x 4 x 2
T4f.data = 
(:,:,1) =
    0.8432    0.6098    0.1030    0.5604
    0.8062    0.5657    0.1583    0.2687
    0.8578    0.6119    0.4136    0.7843
(:,:,2) =
    0.3879    0.5586    0.9332    0.0492
    0.0310    0.2007    0.2594    0.6062
    0.5855    0.0874    0.2042    0.5463

% How good is the answer?
diff3 = norm(T - T4f) / norm(T)
diff3 =
  2.5331e-015

echo off
diary off
