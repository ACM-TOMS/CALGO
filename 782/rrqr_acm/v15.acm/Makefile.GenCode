#######################################################################
#
# Makefile for generating COMPLEX single and double precision source.
#
# Authors:  C.H.Bischof  and  G.Quintana-Orti
#
#######################################################################


#######################################################################
#
# The user must set this options:
#

CPP      = /lib/cpp
CPPFLAGS = "-DHP -I../../v15"

REAL_SOURCES = ../../v15
GENERATE = ../generate

#
#######################################################################


#######################################################################
#  
#  Modules for Rank-Revealing QR:
#  

S_RRQR_MODULES = \
   sgeqpb.f sgeqpw.f sgeqpc.f \
   sgeqpx.f strqpx.f strqxc.f \
   sgeqpy.f strqpy.f strqyc.f \
   strrnk.f slauc1.f slasmx.f \
   smylap.f

D_RRQR_MODULES = \
   dgeqpb.f dgeqpw.f dgeqpc.f \
   dgeqpx.f dtrqpx.f dtrqxc.f \
   dgeqpy.f dtrqpy.f dtrqyc.f \
   dtrrnk.f dlauc1.f dlasmx.f \
   dmylap.f

S_PROGRRQR_MODULES = \
   sqr.f esm.f sutils.f sgntst.f sqrmtx.f

D_PROGRRQR_MODULES = \
   dqr.f dutils.f dgntst.f dqrmtx.f

COMMON_FILES = \
   ilaenv.f

#  
#  
#######################################################################


source:  single double

single: $(S_PROGRRQR_MODULES) $(S_RRQR_MODULES) $(H_FILES) $(COMMON_FILES)

double: $(D_PROGRRQR_MODULES) $(D_RRQR_MODULES) $(H_FILES) $(COMMON_FILES)


ilaenv.f: $(REAL_SOURCES)/ilaenv.F
	cp $(REAL_SOURCES)/ilaenv.F ilaenv.f

#
# Rules for REAL SINGLE PRECISION RRQR code.
#

sqr.f: $(REAL_SOURCES)/xqr.F
	$(GENERATE) s $(REAL_SOURCES)/xqr.F $@ $(CPP) $(CPPFLAGS)

sgntst.f: $(REAL_SOURCES)/xgntst.F
	$(GENERATE) s $(REAL_SOURCES)/xgntst.F $@ $(CPP) $(CPPFLAGS)

sqrmtx.f: $(REAL_SOURCES)/xqrmtx.F
	$(GENERATE) s $(REAL_SOURCES)/xqrmtx.F $@ $(CPP) $(CPPFLAGS)

sutils.f: $(REAL_SOURCES)/xutils.F
	$(GENERATE) s $(REAL_SOURCES)/xutils.F $@ $(CPP) $(CPPFLAGS)

esm.f: $(REAL_SOURCES)/esm.F
	cp $(REAL_SOURCES)/esm.F esm.f

sgeqpb.f: $(REAL_SOURCES)/xgeqpb.F
	$(GENERATE) s $(REAL_SOURCES)/xgeqpb.F $@ $(CPP) $(CPPFLAGS)

sgeqpw.f: $(REAL_SOURCES)/xgeqpw.F
	$(GENERATE) s $(REAL_SOURCES)/xgeqpw.F $@ $(CPP) $(CPPFLAGS)

sgeqpc.f: $(REAL_SOURCES)/xgeqpc.F
	$(GENERATE) s $(REAL_SOURCES)/xgeqpc.F $@ $(CPP) $(CPPFLAGS)

sgeqpx.f: $(REAL_SOURCES)/xgeqpx.F
	$(GENERATE) s $(REAL_SOURCES)/xgeqpx.F $@ $(CPP) $(CPPFLAGS)

strqpx.f: $(REAL_SOURCES)/xtrqpx.F
	$(GENERATE) s $(REAL_SOURCES)/xtrqpx.F $@ $(CPP) $(CPPFLAGS)

strqxc.f: $(REAL_SOURCES)/xtrqxc.F
	$(GENERATE) s $(REAL_SOURCES)/xtrqxc.F $@ $(CPP) $(CPPFLAGS)

sgeqpy.f: $(REAL_SOURCES)/xgeqpy.F
	$(GENERATE) s $(REAL_SOURCES)/xgeqpy.F $@ $(CPP) $(CPPFLAGS)

strqpy.f: $(REAL_SOURCES)/xtrqpy.F
	$(GENERATE) s $(REAL_SOURCES)/xtrqpy.F $@ $(CPP) $(CPPFLAGS)

strqyc.f: $(REAL_SOURCES)/xtrqyc.F
	$(GENERATE) s $(REAL_SOURCES)/xtrqyc.F $@ $(CPP) $(CPPFLAGS)

strrnk.f: $(REAL_SOURCES)/xtrrnk.F
	$(GENERATE) s $(REAL_SOURCES)/xtrrnk.F $@ $(CPP) $(CPPFLAGS)

slauc1.f: $(REAL_SOURCES)/xlauc1.F
	$(GENERATE) s $(REAL_SOURCES)/xlauc1.F $@ $(CPP) $(CPPFLAGS)

slasmx.f: $(REAL_SOURCES)/xlasmx.F
	$(GENERATE) s $(REAL_SOURCES)/xlasmx.F $@ $(CPP) $(CPPFLAGS)

smylap.f: $(REAL_SOURCES)/smylap.f
	cp $(REAL_SOURCES)/smylap.f .

#
# Rules for REAL DOUBLE PRECISION RRQR code.
#

dqr.f: $(REAL_SOURCES)/xqr.F
	$(GENERATE) d $(REAL_SOURCES)/xqr.F $@ $(CPP) $(CPPFLAGS)

dgntst.f: $(REAL_SOURCES)/xgntst.F
	$(GENERATE) d $(REAL_SOURCES)/xgntst.F $@ $(CPP) $(CPPFLAGS)

dqrmtx.f: $(REAL_SOURCES)/xqrmtx.F
	$(GENERATE) d $(REAL_SOURCES)/xqrmtx.F $@ $(CPP) $(CPPFLAGS)

dutils.f: $(REAL_SOURCES)/xutils.F
	$(GENERATE) d $(REAL_SOURCES)/xutils.F $@ $(CPP) $(CPPFLAGS)

dgeqpb.f: $(REAL_SOURCES)/xgeqpb.F
	$(GENERATE) d $(REAL_SOURCES)/xgeqpb.F $@ $(CPP) $(CPPFLAGS)

dgeqpw.f: $(REAL_SOURCES)/xgeqpw.F
	$(GENERATE) d $(REAL_SOURCES)/xgeqpw.F $@ $(CPP) $(CPPFLAGS)

dgeqpc.f: $(REAL_SOURCES)/xgeqpc.F
	$(GENERATE) d $(REAL_SOURCES)/xgeqpc.F $@ $(CPP) $(CPPFLAGS)

dgeqpx.f: $(REAL_SOURCES)/xgeqpx.F
	$(GENERATE) d $(REAL_SOURCES)/xgeqpx.F $@ $(CPP) $(CPPFLAGS)

dtrqpx.f: $(REAL_SOURCES)/xtrqpx.F
	$(GENERATE) d $(REAL_SOURCES)/xtrqpx.F $@ $(CPP) $(CPPFLAGS)

dtrqxc.f: $(REAL_SOURCES)/xtrqxc.F
	$(GENERATE) d $(REAL_SOURCES)/xtrqxc.F $@ $(CPP) $(CPPFLAGS)

dgeqpy.f: $(REAL_SOURCES)/xgeqpy.F
	$(GENERATE) d $(REAL_SOURCES)/xgeqpy.F $@ $(CPP) $(CPPFLAGS)

dtrqpy.f: $(REAL_SOURCES)/xtrqpy.F
	$(GENERATE) d $(REAL_SOURCES)/xtrqpy.F $@ $(CPP) $(CPPFLAGS)

dtrqyc.f: $(REAL_SOURCES)/xtrqyc.F
	$(GENERATE) d $(REAL_SOURCES)/xtrqyc.F $@ $(CPP) $(CPPFLAGS)

dtrrnk.f: $(REAL_SOURCES)/xtrrnk.F
	$(GENERATE) d $(REAL_SOURCES)/xtrrnk.F $@ $(CPP) $(CPPFLAGS)

dlauc1.f: $(REAL_SOURCES)/xlauc1.F
	$(GENERATE) d $(REAL_SOURCES)/xlauc1.F $@ $(CPP) $(CPPFLAGS)

dlasmx.f: $(REAL_SOURCES)/xlasmx.F
	$(GENERATE) d $(REAL_SOURCES)/xlasmx.F $@ $(CPP) $(CPPFLAGS)

dmylap.f: $(REAL_SOURCES)/dmylap.f
	cp $(REAL_SOURCES)/dmylap.f .

#
# Clean rules.
#

clean:
	- rm -f *.f *.h *.o
