#######################################################################
#
# Makefile for generating COMPLEX single and double precision source.
#
# Authors:  C.H.Bischof  and  G.Quintana-Orti
#
#######################################################################


#######################################################################
#
# The user must set this options:
#

REAL_SOURCES = ../../v15
COMPLEX_SOURCES = ../../cv15
GENERATE = ../generate

CPP      = /lib/cpp
CPPFLAGS = "-I$(REAL_SOURCES)"

#
#######################################################################

#######################################################################
#  
#  Modules for Rank-Revealing QR:
#  

C_RRQR_MODULES = \
   cgeqpb.f cgeqpw.f cgeqpc.f \
   cgeqpx.f ctrqpx.f ctrqxc.f \
   cgeqpy.f ctrqpy.f ctrqyc.f \
   ctrrnk.f clauc1.f clasmx.f \
   cmylap.f

Z_RRQR_MODULES = \
   zgeqpb.f zgeqpw.f zgeqpc.f \
   zgeqpx.f ztrqpx.f ztrqxc.f \
   zgeqpy.f ztrqpy.f ztrqyc.f \
   ztrrnk.f zlauc1.f zlasmx.f \
   zmylap.f

#  
#  
#######################################################################


source:  complex complex16

complex: $(C_RRQR_MODULES)

complex16: $(Z_RRQR_MODULES)

clean:
	- rm -f  *.f

#
# Rules for the source modules of RRQR.
#

cgeqpb.f: $(COMPLEX_SOURCES)/ygeqpb.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ygeqpb.F $@ $(CPP) $(CPPFLAGS)

cgeqpw.f: $(COMPLEX_SOURCES)/ygeqpw.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ygeqpw.F $@ $(CPP) $(CPPFLAGS)

cgeqpc.f: $(COMPLEX_SOURCES)/ygeqpc.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ygeqpc.F $@ $(CPP) $(CPPFLAGS)

cgeqpx.f: $(COMPLEX_SOURCES)/ygeqpx.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ygeqpx.F $@ $(CPP) $(CPPFLAGS)

ctrqpx.f: $(COMPLEX_SOURCES)/ytrqpx.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ytrqpx.F $@ $(CPP) $(CPPFLAGS)

ctrqxc.f: $(COMPLEX_SOURCES)/ytrqxc.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ytrqxc.F $@ $(CPP) $(CPPFLAGS)

cgeqpy.f: $(COMPLEX_SOURCES)/ygeqpy.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ygeqpy.F $@ $(CPP) $(CPPFLAGS)

ctrqpy.f: $(COMPLEX_SOURCES)/ytrqpy.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ytrqpy.F $@ $(CPP) $(CPPFLAGS)

ctrqyc.f: $(COMPLEX_SOURCES)/ytrqyc.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ytrqyc.F $@ $(CPP) $(CPPFLAGS)

ctrrnk.f: $(COMPLEX_SOURCES)/ytrrnk.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ytrrnk.F $@ $(CPP) $(CPPFLAGS)

clauc1.f: $(COMPLEX_SOURCES)/ylauc1.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ylauc1.F $@ $(CPP) $(CPPFLAGS)

clasmx.f: $(COMPLEX_SOURCES)/ylasmx.F
	$(GENERATE) c $(COMPLEX_SOURCES)/ylasmx.F $@ $(CPP) $(CPPFLAGS)

cmylap.f: $(COMPLEX_SOURCES)/cmylap.f
	cp $(COMPLEX_SOURCES)/cmylap.f .



zgeqpb.f: $(COMPLEX_SOURCES)/ygeqpb.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ygeqpb.F $@ $(CPP) $(CPPFLAGS)

zgeqpw.f: $(COMPLEX_SOURCES)/ygeqpw.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ygeqpw.F $@ $(CPP) $(CPPFLAGS)

zgeqpc.f: $(COMPLEX_SOURCES)/ygeqpc.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ygeqpc.F $@ $(CPP) $(CPPFLAGS)

zgeqpx.f: $(COMPLEX_SOURCES)/ygeqpx.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ygeqpx.F $@ $(CPP) $(CPPFLAGS)

ztrqpx.f: $(COMPLEX_SOURCES)/ytrqpx.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ytrqpx.F $@ $(CPP) $(CPPFLAGS)

ztrqxc.f: $(COMPLEX_SOURCES)/ytrqxc.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ytrqxc.F $@ $(CPP) $(CPPFLAGS)

zgeqpy.f: $(COMPLEX_SOURCES)/ygeqpy.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ygeqpy.F $@ $(CPP) $(CPPFLAGS)

ztrqpy.f: $(COMPLEX_SOURCES)/ytrqpy.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ytrqpy.F $@ $(CPP) $(CPPFLAGS)

ztrqyc.f: $(COMPLEX_SOURCES)/ytrqyc.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ytrqyc.F $@ $(CPP) $(CPPFLAGS)

ztrrnk.f: $(COMPLEX_SOURCES)/ytrrnk.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ytrrnk.F $@ $(CPP) $(CPPFLAGS)

zlauc1.f: $(COMPLEX_SOURCES)/ylauc1.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ylauc1.F $@ $(CPP) $(CPPFLAGS)

zlasmx.f: $(COMPLEX_SOURCES)/ylasmx.F
	$(GENERATE) z $(COMPLEX_SOURCES)/ylasmx.F $@ $(CPP) $(CPPFLAGS)

zmylap.f: $(COMPLEX_SOURCES)/zmylap.f
	cp $(COMPLEX_SOURCES)/zmylap.f .
