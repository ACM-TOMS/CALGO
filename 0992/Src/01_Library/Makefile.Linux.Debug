SHELL                          = /bin/bash

BIT                            = $(shell getconf LONG_BIT)

ifeq ($(BIT), 64)
ARCHITECTURE                   = x$(BIT)
else
ARCHITECTURE                   = x86
endif

BUILD                          = debug

DEL_FILE                       = rm -f
MAKE_DIR                       = mkdir -p
COPY_FILE                      = cp -f -R
COPY_DIR                       = cp -f -R
MOVE                           = move
REMOVE_DIR                     = rm -f -r

PAUSE                          = read -n1 -r -p "Press any key to continue..." && echo -en '\n'

DIR_BIN                        = binaries
DIR_BIN_DEBUG                  = $(DIR_BIN)/debug
DIR_BIN_DEBUG_ARCHITECTURE     = $(DIR_BIN_DEBUG)/$(ARCHITECTURE)
BINARY_OUTPUT_DIR              = $(DIR_BIN_DEBUG_ARCHITECTURE)
BINARY_OUTPUT_FILE_NAME        = libcagd$(BIT)d.a
BINARY_OUTPUT_RELATIVE_PATH    = $(BINARY_OUTPUT_DIR)/$(BINARY_OUTPUT_FILE_NAME)

TARGET                         = cagd$(BIT)

DIR_INCLUDE                    = include
INCLUDE_OUTPUT_DIR             = $(DIR_INCLUDE)/CAGD

CXX                            = gcc
CXXFLAGS                       = -m$(BIT) -std=c++11 -g -O0 -fopenmp

PREFIX                         = /usr/local
INSTALL_DESTINATION_DIR        = 

#Core
EXCEPTIONS_H                   = cagd/Core/Exceptions.h

UTILITIES_H                    = cagd/Core/Utilities.h
UTILITIES_CPP                  = cagd/Core/Utilities.cpp

# cagd/Core/Geometry/Coordinates

CARTESIANS_H                   = cagd/Core/Geometry/Coordinates/Cartesians3.h
HOMOGENEOUS_H                  = cagd/Core/Geometry/Coordinates/Homogeneous3.h
COLORS_H                       = cagd/Core/Geometry/Coordinates/Colors4.h
TEXTURES_H                     = cagd/Core/Geometry/Coordinates/TCoordinates4.h

# cagd/Core/Geometry/Curves

GENERIC_CURVES_H               = cagd/Core/Geometry/Curves/GenericCurves3.h
GENERIC_CURVES_CPP             = cagd/Core/Geometry/Curves/GenericCurves3.cpp

LINEAR_COMBINATIONS_H          = cagd/Core/Geometry/Curves/LinearCombinations3.h
LINEAR_COMBINATIONS_CPP        = cagd/Core/Geometry/Curves/LinearCombinations3.cpp

# cagd/Core/Geometry/Surfaces

LIGHTS_H                       = cagd/Core/Geometry/Surfaces/Lights.h
LIGHTS_CPP                     = cagd/Core/Geometry/Surfaces/Lights.cpp

MATERIALS_H                    = cagd/Core/Geometry/Surfaces/Materials.h
MATERIALS_CPP                  = cagd/Core/Geometry/Surfaces/Materials.cpp

TRIANGULAR_FACES_H             = cagd/Core/Geometry/Surfaces/TriangleMeshes3.h

TRIANGLE_MESHES_H              = cagd/Core/Geometry/Surfaces/TriangleMeshes3.h
TRIANGLE_MESHES_CPP            = cagd/Core/Geometry/Surfaces/TriangleMeshes3.cpp

TENSOR_PRODUCT_SURFACES_H      = cagd/Core/Geometry/Surfaces/TensorProductSurfaces3.h
TENSOR_PRODUCT_SURFACES_CPP    = cagd/Core/Geometry/Surfaces/TensorProductSurfaces3.cpp

# cagd/Core/Math
CONSTANTS_H                    = cagd/Core/Math/Constants.h

MATRICES_H                     = cagd/Core/Math/Matrices.h

GENERIC_GL_TRANSFORMATIONS_H   = cagd/Core/Math/GenericGLTransformations.h
GENERIC_GL_TRANSFORMATIONS_CPP = cagd/Core/Math/GenericGLTransformations.cpp

SPECIAL_GL_TRANSFORMATIONS_H   = cagd/Core/Math/SpecialGLTransformations.h
SPECIAL_GL_TRANSFORMATIONS_CPP = cagd/Core/Math/SpecialGLTransformations.cpp

REAL_MATRICES_H                = cagd/Core/Math/RealMatrices.h
REAL_MATRICES_CPP              = cagd/Core/Math/RealMatrices.cpp

REAL_MATRIX_DECOMPOSITIONS_H   = cagd/Core/Math/RealMatrixDecompositions.h
REAL_MATRIX_DECOMPOSITIONS_CPP = cagd/Core/Math/RealMatrixDecompositions.cpp

PASCAL_TRIANGLES_H             = cagd/Core/Math/PascalTriangles.h
PASCAL_TRIANGLES_CPP           = cagd/Core/Math/PascalTriangles.cpp

# cagd/Core/Shaders

SHADER_PROGRAMS_H              = cagd/Core/Shaders/ShaderPrograms.h
SHADER_PROGRAMS_CPP            = cagd/Core/Shaders/ShaderPrograms.cpp

# cagd/Core/SmartPointers

SPECIALIZED_SMART_POINTERS_H   = cagd/Core/SmartPointers/SpecializedSmartPointers.h

# EC

CHARACTERISTIC_POLYNOMIALS_H   = cagd/EC/CharacteristicPolynomials.h
CHARACTERISTIC_POLYNOMIALS_CPP = cagd/EC/CharacteristicPolynomials.cpp

EC_SPACES_H                    = cagd/EC/ECSpaces.h
EC_SPACES_CPP                  = cagd/EC/ECSpaces.cpp

B_CURVES_H                     = cagd/EC/BCurves3.h
B_CURVES_CPP                   = cagd/EC/BCurves3.cpp

B_SURFACES_H                   = cagd/EC/BSurfaces3.h
B_SURFACES_CPP                 = cagd/EC/BSurfaces3.cpp

all: clean print_bibliography_data create_output_directories $(TARGET)

# print bibliography data
print_bibliography_data:
	@ echo --------------------------------------------------------
	@ echo Generating the $(BUILD) $(BIT)-bit variant of the function library proposed in the article:
	@ echo 
	@ echo Agoston Roth, 2019. Algorithm 992: An OpenGL- and C++-based function library for curve and surface modeling in a large class of extended Chebyshev spaces, ACM Transactions on Mathematical Software, Vol. 45, No. 1, Article 13.
	@ echo https://doi.org/10.1145/3284979
	@ echo --------------------------------------------------------
	@ $(PAUSE)

# create output directories
create_output_directories:
	@ $(MAKE_DIR) $(BINARY_OUTPUT_DIR)
	@ echo --------------------------------------------------------
	@ echo The folder '$(BINARY_OUTPUT_DIR)' has been created. After successful compilation your $(BUILD) '$(BINARY_OUTPUT_FILE_NAME)' will be here.
	@ echo --------------------------------------------------------
	@ echo
	@ $(PAUSE)
	@ $(MAKE_DIR) $(INCLUDE_OUTPUT_DIR)
	@ rsync -ar --exclude='*.cpp' cagd/Core $(INCLUDE_OUTPUT_DIR)
	@ rsync -ar --exclude='*.cpp' cagd/EC $(INCLUDE_OUTPUT_DIR)
	@ echo --------------------------------------------------------
	@ echo The folder '$(INCLUDE_OUTPUT_DIR)' has been created. Here you will find all the header files that can be included into your application.
	@ echo --------------------------------------------------------
	@ $(PAUSE)
	@ echo
	@ echo --------------------------------------------------------
	@ echo Compiling and creating $(BUILD) $(BIT)-bit objects files for $(ARCHITECTURE) architecture...
	@ echo --------------------------------------------------------
	@ sleep 2s
	@ echo	

$(TARGET): Utilities.o \
        GenericGLTransformations.o \
	SpecialGLTransformations.o \
	RealMatrices.o \
	RealMatrixDecompositions.o \
	PascalTriangles.o \
	ShaderPrograms.o \
        GenericCurves3.o \
	LinearCombinations3.o \
        Lights.o \
	Materials.o \
	TriangleMeshes3.o \
	TensorProductSurfaces3.o \
	CharacteristicPolynomials.o \
	ECSpaces.o \
	BCurves3.o \
	BSurfaces3.o
	@ echo
	@ echo --------------------------------------------------------
	@ echo Creating the $(BUILD) library '$(BINARY_OUTPUT_DIR)/$(BINARY_OUTPUT_FILE_NAME)'...
	@ echo
	@ ar -cq $(BINARY_OUTPUT_DIR)/$(BINARY_OUTPUT_FILE_NAME) $(BINARY_OUTPUT_DIR)/*.o
	@ $(DEL_FILE) $(BINARY_OUTPUT_DIR)/*.o
	@ echo Successful. Check the folders '$(BINARY_OUTPUT_DIR)' and '$(INCLUDE_OUTPUT_DIR)'.
	@ echo
	@ echo If you want to install the $(BUILD) $(BIT)-bit library and its include files into the folders $(INSTALL_DESTINATION_DIR)$(PREFIX)/lib and $(INSTALL_DESTINATION_DIR)$(PREFIX)/include/CAGD, respectively, call the command
	@ echo
	@ echo make -f Makefile.Linux.Debug install
	@ echo
	@ echo as a super user. \(In $(BUILD) mode, all examples assume the latter library and include paths.\)
	@ echo --------------------------------------------------------

# Core
	
Utilities.o: $(UTILITIES_CPP) $(UTILITIES_H) \
               $(COLORS_H)
	$(CXX) -c $(CXXFLAGS) $(UTILITIES_CPP) -o $(BINARY_OUTPUT_DIR)/Utilities.o
	@ echo --------------------------------------------------------

# cagd/Core/Geometry/Curves

GenericCurves3.o: $(GENERIC_CURVES_CPP) $(GENERIC_CURVES_H) \
                    $(CARTESIANS_H) $(COLORS_H) $(MATRICES_H) $(SHADER_PROGRAMS_H)
	$(CXX) -c $(CXXFLAGS) $(GENERIC_CURVES_CPP) -o $(BINARY_OUTPUT_DIR)/GenericCurves3.o
	@ echo --------------------------------------------------------

LinearCombinations3.o: $(LINEAR_COMBINATIONS_CPP) $(LINEAR_COMBINATIONS_H) \
                         $(CARTESIANS_H) $(GENERIC_CURVES_H) $(MATRICES_H) $(REAL_MATRICES_H) $(SHADER_PROGRAMS_H)
	$(CXX) -c $(CXXFLAGS) $(LINEAR_COMBINATIONS_CPP) -o $(BINARY_OUTPUT_DIR)/LinearCombinations3.o
	@ echo --------------------------------------------------------
	
# cagd/Core/Geometry/Surfaces

Lights.o: $(LIGHTS_CPP) $(LIGHTS_H) \
            $(CARTESIANS_H) $(COLORS_H) $(HOMOGENEOUS_H) $(EXCEPTIONS_H)
	$(CXX) -c $(CXXFLAGS) $(LIGHTS_CPP) -o $(BINARY_OUTPUT_DIR)/Lights.o
	@ echo --------------------------------------------------------

Materials.o: $(MATERIALS_CPP) $(MATERIALS_H) \
               $(COLORS_H)
	$(CXX) -c $(CXXFLAGS) $(MATERIALS_CPP) -o $(BINARY_OUTPUT_DIR)/Materials.o
	@ echo --------------------------------------------------------

TriangleMeshes3.o: $(TRIANGLE_MESHES_CPP) $(TRIANGLE_MESHES_H) \
                     $(CARTESIANS_H) $(COLORS_H) $(TEXTURES_H) $(TRIANGULAR_FACES_H) $(SHADER_PROGRAMS_H)
	$(CXX) -c $(CXXFLAGS) $(TRIANGLE_MESHES_CPP) -o $(BINARY_OUTPUT_DIR)/TriangleMeshes3.o
	@ echo --------------------------------------------------------

TensorProductSurfaces3.o: $(TENSOR_PRODUCT_SURFACES_CPP) $(TENSOR_PRODUCT_SURFACES_H) \
                     $(CARTESIANS_H) $(COLORS_H) $(TEXTURES_H) $(TRIANGULAR_FACES_H) $(SHADER_PROGRAMS_H) $(REAL_MATRICES_H) $(REAL_MATRIX_DECOMPOSITIONS_H)
	$(CXX) -c $(CXXFLAGS) $(TENSOR_PRODUCT_SURFACES_CPP) -o $(BINARY_OUTPUT_DIR)/TensorProductSurfaces3.o
	@ echo --------------------------------------------------------

# cagd/Core/Math

GenericGLTransformations.o: $(GENERIC_GL_TRANSFORMATIONS_CPP) $(GENERIC_GL_TRANSFORMATIONS_H) \
                              $(CARTESIANS_H) $(HOMOGENEOUS_H)
	$(CXX) -c $(CXXFLAGS) $(GENERIC_GL_TRANSFORMATIONS_CPP) -o $(BINARY_OUTPUT_DIR)/GenericGLTransformations.o
	@ echo --------------------------------------------------------
	
SpecialGLTransformations.o: $(SPECIAL_GL_TRANSFORMATIONS_CPP) $(SPECIAL_GL_TRANSFORMATIONS_H) \
                              $(GENERIC_GL_TRANSFORMATIONS_H) $(CONSTANTS_H)
	$(CXX) -c $(CXXFLAGS) $(SPECIAL_GL_TRANSFORMATIONS_CPP) -o $(BINARY_OUTPUT_DIR)/SpecialGLTransformations.o
	@ echo --------------------------------------------------------
	
RealMatrices.o: $(REAL_MATRICES_CPP) $(REAL_MATRICES_H) \
		  $(MATRICES_H) $(EXCEPTIONS_H)
	$(CXX) -c $(CXXFLAGS) $(REAL_MATRICES_CPP) -o $(BINARY_OUTPUT_DIR)/RealMatrices.o
	@ echo --------------------------------------------------------
	
RealMatrixDecompositions.o: $(REAL_MATRIX_DECOMPOSITIONS_CPP) $(REAL_MATRIX_DECOMPOSITIONS_H) \
		  $(MATRICES_H) $(REAL_MATRICES_H) $(CONSTANTS_H) $(EXCEPTIONS_H)
	$(CXX) -c $(CXXFLAGS) $(REAL_MATRIX_DECOMPOSITIONS_CPP) -o $(BINARY_OUTPUT_DIR)/RealMatrixDecompositions.o
	@ echo --------------------------------------------------------
	
PascalTriangles.o: $(PASCAL_TRIANGLES_CPP) $(PASCAL_TRIANGLES_H) \
		  $(MATRICES_H)
	$(CXX) -c $(CXXFLAGS) $(PASCAL_TRIANGLES_CPP) -o $(BINARY_OUTPUT_DIR)/PascalTriangles.o
	@ echo --------------------------------------------------------
	
# cagd/Core/Shaders

ShaderPrograms.o: $(SHADER_PROGRAMS_CPP) $(SHADER_PROGRAMS_H) \
                    $(LIGHTS_H) $(MATERIALS_H)
	$(CXX) -c $(CXXFLAGS) $(SHADER_PROGRAMS_CPP) -o $(BINARY_OUTPUT_DIR)/ShaderPrograms.o
	@ echo --------------------------------------------------------
	
# EC

CharacteristicPolynomials.o: $(CHARACTERISTIC_POLYNOMIALS_CPP) $(CHARACTERISTIC_POLYNOMIALS_H) \
                               $(CONSTANTS_H)
	$(CXX) -c $(CXXFLAGS) $(CHARACTERISTIC_POLYNOMIALS_CPP) -o $(BINARY_OUTPUT_DIR)/CharacteristicPolynomials.o
	@ echo --------------------------------------------------------
	
ECSpaces.o: $(EC_SPACES_CPP) $(EC_SPACES_H) \
              $(CHARACTERISTIC_POLYNOMIALS_H) $(REAL_MATRICES_H) $(SPECIALIZED_SMART_POINTERS_H) $(GENERIC_CURVES_H)
	$(CXX) -c $(CXXFLAGS) $(EC_SPACES_CPP) -o $(BINARY_OUTPUT_DIR)/ECSpaces.o
	@ echo --------------------------------------------------------
	
BCurves3.o: $(B_CURVES_CPP) $(B_CURVES_H) \
              $(SPECIALIZED_SMART_POINTERS_H) $(LINEAR_COMBINATIONS_H) $(EC_SPACES_H) $(EXCEPTIONS_H)
	$(CXX) -c $(CXXFLAGS) $(B_CURVES_CPP) -o $(BINARY_OUTPUT_DIR)/BCurves3.o
	@ echo --------------------------------------------------------
	
BSurfaces3.o: $(B_SURFACES_CPP) $(B_SURFACES_H) \
              $(SPECIALIZED_SMART_POINTERS_H) $(TENSOR_PRODUCT_SURFACES_H) $(CONSTANTS_H) $(MATRICES_H) $(EC_SPACES_H) $(B_CURVES_H)
	$(CXX) -c $(CXXFLAGS) $(B_SURFACES_CPP) -o $(BINARY_OUTPUT_DIR)/BSurfaces3.o
	@ echo --------------------------------------------------------
	

clean:
	@ $(REMOVE_DIR) $(BINARY_OUTPUT_DIR)
	@ $(REMOVE_DIR) $(DIR_INCLUDE)


install:
	@ echo --------------------------------------------------------
	@ $(MAKE_DIR) $(INSTALL_DESTINATION_DIR)$(PREFIX)/lib
	@ $(MAKE_DIR) $(INSTALL_DESTINATION_DIR)$(PREFIX)/include/CAGD
	@ $(COPY_FILE) $(BINARY_OUTPUT_RELATIVE_PATH) $(INSTALL_DESTINATION_DIR)$(PREFIX)/lib/$(BINARY_OUTPUT_FILE_NAME)
	@ $(COPY_DIR) $(INCLUDE_OUTPUT_DIR) $(INSTALL_DESTINATION_DIR)$(PREFIX)/include/
	@ echo The $(BUILD) $(BIT)-bit library $(BINARY_OUTPUT_RELATIVE_PATH) and the contents of its include folder $(INCLUDE_OUTPUT_DIR) were installed to the folders $(INSTALL_DESTINATION_DIR)$(PREFIX)/lib and $(INSTALL_DESTINATION_DIR)$(PREFIX)/include/CAGD, respectively.
	@ echo
	@ echo Later you can uninstall the library $(INSTALL_DESTINATION_DIR)$(PREFIX)/lib/$(BINARY_OUTPUT_FILE_NAME) and its include folder $(INSTALL_DESTINATION_DIR)$(PREFIX)/include/CAGD by calling the command
	@ echo
	@ echo make -f Makefile.Linux.Debug uninstall
	@ echo
	@ echo as a super user.
	@ echo --------------------------------------------------------

uninstall:
	@ echo --------------------------------------------------------
	@ $(DEL_FILE) $(INSTALL_DESTINATION_DIR)$(PREFIX)/lib/$(BINARY_OUTPUT_FILE_NAME)
	@ $(REMOVE_DIR) $(INSTALL_DESTINATION_DIR)$(PREFIX)/include/CAGD
	@ echo The $(BUILD) $(BIT)-bit library $(INSTALL_DESTINATION_DIR)$(PREFIX)/lib/$(BINARY_OUTPUT_FILE_NAME) and its include folder $(INSTALL_DESTINATION_DIR)$(PREFIX)/include/CAGD have been uninstalled.
	@ echo --------------------------------------------------------

