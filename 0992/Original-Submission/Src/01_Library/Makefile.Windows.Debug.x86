ARCHITECTURE                  = x86
BIT                           = 32
BUILD                         = debug

DEL_FILE                      = del

IF_EXISTS                     = if exist
IF_NOT_EXISTS                 = if not exist

MAKE_DIR                      = mkdir
COPY_FILE                     = copy /y
COPY_DIR                      = xcopy /s /q /y /i /e
MOVE                          = move
REMOVE_DIR                    = rmdir /s /q

DIR_BIN                       = binaries
DIR_BIN_DEBUG                 = $(DIR_BIN)\debug
DIR_BIN_DEBUG_X86             = $(DIR_BIN_DEBUG)\x86
BINARY_OUTPUT_DIR             = $(DIR_BIN_DEBUG_X86)
BINARY_OUTPUT_FILE_NAME       = cagd$(BIT)d.lib
PDB_OUTPUT_FILE_NAME          = cagd$(BIT)d.pdb
DIR_INCLUDE                   = include
INCLUDE_OUTPUT_DIR            = $(DIR_INCLUDE)\CAGD

TARGET                         = cagd$(BIT)

DEFINES                       = -DUNICODE -DWIN32

GLEW_INCLUDE_PATH             = -I"../00_Dependencies/Include"

CXX                           = cl
CXXFLAGS                      = -nologo -Zc:wchar_t -FS -Zc:rvalueCast -Zc:inline -Zc:strictStrings -Zc:throwingNew -Zc:referenceBinding -openmp -arch:AVX -D _CRT_SECURE_NO_WARNINGS -Zi -MDd -W3 -w34100 -w34189 -w44996 -w44456 -w44457 -w44458 -wd4577 -wd4467 -EHsc /Fd$(BINARY_OUTPUT_DIR)\$(PDB_OUTPUT_FILE_NAME) $(DEFINES) $(GLEW_INCLUDE_PATH)

LIBAPP                        = lib /NOLOGO
LIBFLAGS                      =

#Core
EXCEPTIONS_H                  = cagd/Core/Exceptions.h

UTILITIES_H                   = cagd/Core/Utilities.h
UTILITIES_CPP                 = cagd/Core/Utilities.cpp

# cagd/Core/Geometry/Coordinates

CARTESIANS_H                  = cagd/Core/Geometry/Coordinates/Cartesians3.h
HOMOGENEOUS_H                 = cagd/Core/Geometry/Coordinates/Homogeneous3.h
COLORS_H                      = cagd/Core/Geometry/Coordinates/Colors4.h
TEXTURES_H                    = cagd/Core/Geometry/Coordinates/TCoordinates4.h

# cagd/Core/Geometry/Curves

GENERIC_CURVES_H              = cagd/Core/Geometry/Curves/GenericCurves3.h
GENERIC_CURVES_CPP            = cagd/Core/Geometry/Curves/GenericCurves3.cpp

LINEAR_COMBINATIONS_H         = cagd/Core/Geometry/Curves/LinearCombinations3.h
LINEAR_COMBINATIONS_CPP       = cagd/Core/Geometry/Curves/LinearCombinations3.cpp

# cagd/Core/Geometry/Surfaces

LIGHTS_H                      = cagd/Core/Geometry/Surfaces/Lights.h
LIGHTS_CPP                    = cagd/Core/Geometry/Surfaces/Lights.cpp

MATERIALS_H                   = cagd/Core/Geometry/Surfaces/Materials.h
MATERIALS_CPP                 = cagd/Core/Geometry/Surfaces/Materials.cpp

TRIANGULAR_FACES_H             = cagd/Core/Geometry/Surfaces/TriangleMeshes3.h

TRIANGLE_MESHES_H              = cagd/Core/Geometry/Surfaces/TriangleMeshes3.h
TRIANGLE_MESHES_CPP            = cagd/Core/Geometry/Surfaces/TriangleMeshes3.cpp

TENSOR_PRODUCT_SURFACES_H      = cagd/Core/Geometry/Surfaces/TensorProductSurfaces3.h
TENSOR_PRODUCT_SURFACES_CPP    = cagd/Core/Geometry/Surfaces/TensorProductSurfaces3.cpp

# cagd/Core/Math
CONSTANTS_H                    = cagd/Core/Math/Constants.h

MATRICES_H                     = cagd/Core/Math/Matrices.h

GENERIC_GL_TRANSFORMATIONS_H   = cagd/Core/Math/GenericGLTransformations.h
GENERIC_GL_TRANSFORMATIONS_CPP = cagd/Core/Math/GenericGLTransformations.cpp

SPECIAL_GL_TRANSFORMATIONS_H   = cagd/Core/Math/SpecialGLTransformations.h
SPECIAL_GL_TRANSFORMATIONS_CPP = cagd/Core/Math/SpecialGLTransformations.cpp

REAL_MATRICES_H                = cagd/Core/Math/RealMatrices.h
REAL_MATRICES_CPP              = cagd/Core/Math/RealMatrices.cpp

REAL_MATRIX_DECOMPOSITIONS_H   = cagd/Core/Math/RealMatrixDecompositions.h
REAL_MATRIX_DECOMPOSITIONS_CPP = cagd/Core/Math/RealMatrixDecompositions.cpp

PASCAL_TRIANGLES_H             = cagd/Core/Math/PascalTriangles.h
PASCAL_TRIANGLES_CPP           = cagd/Core/Math/PascalTriangles.cpp

# cagd/Core/Shaders

SHADER_PROGRAMS_H              = cagd/Core/Shaders/ShaderPrograms.h
SHADER_PROGRAMS_CPP            = cagd/Core/Shaders/ShaderPrograms.cpp

# cagd/Core/SmartPointers

SPECIALIZED_SMART_POINTERS_H   = cagd/Core/SmartPointers/SpecializedSmartPointers.h

# EC

CHARACTERISTIC_POLYNOMIALS_H   = cagd/EC/CharacteristicPolynomials.h
CHARACTERISTIC_POLYNOMIALS_CPP = cagd/EC/CharacteristicPolynomials.cpp

EC_SPACES_H                    = cagd/EC/ECSpaces.h
EC_SPACES_CPP                  = cagd/EC/ECSpaces.cpp

B_CURVES_H                     = cagd/EC/BCurves3.h
B_CURVES_CPP                   = cagd/EC/BCurves3.cpp

B_SURFACES_H                   = cagd/EC/BSurfaces3.h
B_SURFACES_CPP                 = cagd/EC/BSurfaces3.cpp


all: clean print_bibliography_data create_output_directories $(TARGET)

# print bibliography data
print_bibliography_data:
	@ echo --------------------------------------------------------
	@ echo Generating the $(BUILD) $(BIT)-bit variant of the function library proposed in the article:
	@ echo. 
	@ echo Agoston Roth, 2019. Algorithm 992: An OpenGL- and C++-based function library for curve and surface modeling in a large class of extended Chebyshev spaces, ACM Transactions on Mathematical Software, Vol. 45, No. 1, Article 13.
	@ echo https://doi.org/10.1145/3284979
	@ echo --------------------------------------------------------
	@ echo.
	@ pause

# create output directories
create_output_directories:
	@ $(IF_NOT_EXISTS) $(DIR_BIN) ($(MAKE_DIR) $(DIR_BIN))
	@ $(IF_NOT_EXISTS) $(DIR_BIN_DEBUG) ($(MAKE_DIR) $(DIR_BIN_DEBUG))
	@ $(IF_NOT_EXISTS) $(BINARY_OUTPUT_DIR) ($(MAKE_DIR) $(BINARY_OUTPUT_DIR))
	@ echo --------------------------------------------------------
	@ echo The folder '$(BINARY_OUTPUT_DIR)' has been created. After successful compilation your $(BUILD) '$(BINARY_OUTPUT_FILE_NAME)' and '$(PDB_OUTPUT_FILE_NAME)' files will be here.
	@ echo --------------------------------------------------------
	@ echo.
	@ pause
	@ $(IF_NOT_EXISTS) $(DIR_INCLUDE) ($(MAKE_DIR) $(DIR_INCLUDE))
	@ $(IF_NOT_EXISTS) $(INCLUDE_OUTPUT_DIR) ($(MAKE_DIR) $(INCLUDE_OUTPUT_DIR))
	@ echo .cpp > exclude_file_list.txt
	@ $(COPY_DIR) /exclude:exclude_file_list.txt cagd\Core $(INCLUDE_OUTPUT_DIR)\Core > nul
	@ $(COPY_DIR) /exclude:exclude_file_list.txt cagd\EC $(INCLUDE_OUTPUT_DIR)\EC > nul
	@ $(DEL_FILE) exclude_file_list.txt
	@ $(COPY_DIR) $(DIR_INCLUDE) ..\00_Dependencies\Include > nul
	@ echo --------------------------------------------------------
	@ echo The folder '$(INCLUDE_OUTPUT_DIR)' has been created. Here you will find all the header files that can be included into your application.
	@ echo The directory '$(INCLUDE_OUTPUT_DIR)' has been also copied to the folder '..\00_Dependencies\Include' which is required by all test applications.
	@ echo --------------------------------------------------------
	@ pause
	@ echo.
	@ echo --------------------------------------------------------
	@ echo Compiling and creating $(BUILD) $(BIT)-bit objects files for $(ARCHITECTURE) architecture...
	@ echo --------------------------------------------------------
	@ timeout 2
	@ echo.

$(TARGET): Utilities.obj \
        GenericGLTransformations.obj \
	SpecialGLTransformations.obj \
	RealMatrices.obj \
	RealMatrixDecompositions.obj \
	PascalTriangles.obj \
	ShaderPrograms.obj \
        GenericCurves3.obj \
	LinearCombinations3.obj	\
        Lights.obj \
	Materials.obj \
	TriangleMeshes3.obj \
	TensorProductSurfaces3.obj \
	CharacteristicPolynomials.obj \
	ECSpaces.obj \
	BCurves3.obj \
	BSurfaces3.obj
	@ echo.
	@ echo --------------------------------------------------------
	@ echo Creating both the $(BUILD) library '$(BINARY_OUTPUT_DIR)\$(BINARY_OUTPUT_FILE_NAME)' and the pdb-file '$(BINARY_OUTPUT_DIR)\$(PDB_OUTPUT_FILE_NAME)'...
	@ echo.
	@ timeout 2
	$(LIBAPP) $(LIBFLAGS) \
	$(BINARY_OUTPUT_DIR)\Utilities.obj \
	$(BINARY_OUTPUT_DIR)\GenericGLTransformations.obj \
	$(BINARY_OUTPUT_DIR)\SpecialGLTransformations.obj \
	$(BINARY_OUTPUT_DIR)\RealMatrices.obj \
	$(BINARY_OUTPUT_DIR)\RealMatrixDecompositions.obj \
	$(BINARY_OUTPUT_DIR)\PascalTriangles.obj \
	$(BINARY_OUTPUT_DIR)\ShaderPrograms.obj \
        $(BINARY_OUTPUT_DIR)\GenericCurves3.obj \
        $(BINARY_OUTPUT_DIR)\LinearCombinations3.obj \
        $(BINARY_OUTPUT_DIR)\Lights.obj \
        $(BINARY_OUTPUT_DIR)\Materials.obj \
	$(BINARY_OUTPUT_DIR)\TriangleMeshes3.obj \
	$(BINARY_OUTPUT_DIR)\TensorProductSurfaces3.obj \
	$(BINARY_OUTPUT_DIR)\CharacteristicPolynomials.obj \
	$(BINARY_OUTPUT_DIR)\ECSpaces.obj \
	$(BINARY_OUTPUT_DIR)\BCurves3.obj \
	$(BINARY_OUTPUT_DIR)\BSurfaces3.obj \
        /OUT:$(BINARY_OUTPUT_DIR)\$(BINARY_OUTPUT_FILE_NAME)
	$(DEL_FILE) $(BINARY_OUTPUT_DIR)\*.obj
	@ echo.
	@ echo Successful. Check the folders '$(BINARY_OUTPUT_DIR)' and '$(INCLUDE_OUTPUT_DIR)'.
	@ $(IF_NOT_EXISTS) ..\00_Dependencies\Lib\CAGD $(MAKE_DIR) ..\00_Dependencies\Lib\CAGD
	@ $(COPY_FILE) $(BINARY_OUTPUT_DIR)\$(BINARY_OUTPUT_FILE_NAME) ..\00_Dependencies\Lib\CAGD\$(BINARY_OUTPUT_FILE_NAME) > nul
	@ $(COPY_FILE) $(BINARY_OUTPUT_DIR)\$(PDB_OUTPUT_FILE_NAME) ..\00_Dependencies\Lib\CAGD\$(PDB_OUTPUT_FILE_NAME) > nul
	@ echo.
	@ echo The $(BUILD) $(BIT)-bit library $(BINARY_OUTPUT_DIR)\$(BINARY_OUTPUT_FILE_NAME) and its pdb-file $(BINARY_OUTPUT_DIR)\$(PDB_OUTPUT_FILE_NAME) have also been copied to the folder ..\00_Dependencies\Lib\CAGD. In $(BUILD) mode, these dependencies are required by all test applications.
	@ echo --------------------------------------------------------

# Core
	
Utilities.obj: $(UTILITIES_CPP) $(UTILITIES_H) \
               $(COLORS_H)
	$(CXX) -c $(CXXFLAGS) $(UTILITIES_CPP) /Fo$(BINARY_OUTPUT_DIR)\Utilities.obj
	@ echo --------------------------------------------------------

# cagd/Core/Geometry/Curves

GenericCurves3.obj: $(GENERIC_CURVES_CPP) $(GENERIC_CURVES_H) \
                    $(CARTESIANS_H) $(COLORS_H) $(MATRICES_H) $(SHADER_PROGRAMS_H)
	$(CXX) -c $(CXXFLAGS) $(GENERIC_CURVES_CPP) /Fo$(BINARY_OUTPUT_DIR)\GenericCurves3.obj
	@ echo --------------------------------------------------------

LinearCombinations3.obj: $(LINEAR_COMBINATIONS_CPP) $(LINEAR_COMBINATIONS_H) \
                         $(CARTESIANS_H) $(GENERIC_CURVES_H) $(MATRICES_H) $(REAL_MATRICES_H) $(SHADER_PROGRAMS_H)
	$(CXX) -c $(CXXFLAGS) $(LINEAR_COMBINATIONS_CPP) /Fo$(BINARY_OUTPUT_DIR)\LinearCombinations3.obj
	@ echo --------------------------------------------------------
	
# cagd/Core/Geometry/Surfaces

Lights.obj: $(LIGHTS_CPP) $(LIGHTS_H) \
            $(CARTESIANS_H) $(COLORS_H) $(HOMOGENEOUS_H) $(EXCEPTIONS_H)
	$(CXX) -c $(CXXFLAGS) $(LIGHTS_CPP) /Fo$(BINARY_OUTPUT_DIR)\Lights.obj
	@ echo --------------------------------------------------------

Materials.obj: $(MATERIALS_CPP) $(MATERIALS_H) \
               $(COLORS_H)
	$(CXX) -c $(CXXFLAGS) $(MATERIALS_CPP) /Fo$(BINARY_OUTPUT_DIR)\Materials.obj
	@ echo --------------------------------------------------------

TriangleMeshes3.obj: $(TRIANGLE_MESHES_CPP) $(TRIANGLE_MESHES_H) \
                     $(CARTESIANS_H) $(COLORS_H) $(TEXTURES_H) $(TRIANGULAR_FACES_H) $(SHADER_PROGRAMS_H)
	$(CXX) -c $(CXXFLAGS) $(TRIANGLE_MESHES_CPP) /Fo$(BINARY_OUTPUT_DIR)\TriangleMeshes3.obj
	@ echo --------------------------------------------------------

TensorProductSurfaces3.obj: $(TENSOR_PRODUCT_SURFACES_CPP) $(TENSOR_PRODUCT_SURFACES_H) \
                     $(CARTESIANS_H) $(COLORS_H) $(TEXTURES_H) $(TRIANGULAR_FACES_H) $(SHADER_PROGRAMS_H) $(REAL_MATRICES_H) $(REAL_MATRIX_DECOMPOSITIONS_H)
	$(CXX) -c $(CXXFLAGS) $(TENSOR_PRODUCT_SURFACES_CPP) /Fo$(BINARY_OUTPUT_DIR)\TensorProductSurfaces3.obj
	@ echo --------------------------------------------------------

# cagd/Core/Math

GenericGLTransformations.obj: $(GENERIC_GL_TRANSFORMATIONS_CPP) $(GENERIC_GL_TRANSFORMATIONS_H) \
                              $(CARTESIANS_H) $(HOMOGENEOUS_H)
	$(CXX) -c $(CXXFLAGS) $(GENERIC_GL_TRANSFORMATIONS_CPP) /Fo$(BINARY_OUTPUT_DIR)\GenericGLTransformations.obj
	@ echo --------------------------------------------------------
	
SpecialGLTransformations.obj: $(SPECIAL_GL_TRANSFORMATIONS_CPP) $(SPECIAL_GL_TRANSFORMATIONS_H) \
                              $(GENERIC_GL_TRANSFORMATIONS_H) $(CONSTANTS_H)
	$(CXX) -c $(CXXFLAGS) $(SPECIAL_GL_TRANSFORMATIONS_CPP) /Fo$(BINARY_OUTPUT_DIR)\SpecialGLTransformations.obj
	@ echo --------------------------------------------------------
	
RealMatrices.obj: $(REAL_MATRICES_CPP) $(REAL_MATRICES_H) \
		  $(MATRICES_H) $(EXCEPTIONS_H)
	$(CXX) -c $(CXXFLAGS) $(REAL_MATRICES_CPP) /Fo$(BINARY_OUTPUT_DIR)\RealMatrices.obj
	@ echo --------------------------------------------------------
	
RealMatrixDecompositions.obj: $(REAL_MATRIX_DECOMPOSITIONS_CPP) $(REAL_MATRIX_DECOMPOSITIONS_H) \
		  $(MATRICES_H) $(REAL_MATRICES_H) $(CONSTANTS_H) $(EXCEPTIONS_H)
	$(CXX) -c $(CXXFLAGS) $(REAL_MATRIX_DECOMPOSITIONS_CPP) /Fo$(BINARY_OUTPUT_DIR)\RealMatrixDecompositions.obj
	@ echo --------------------------------------------------------
	
PascalTriangles.obj: $(PASCAL_TRIANGLES_CPP) $(PASCAL_TRIANGLES_H) \
		  $(MATRICES_H)
	$(CXX) -c $(CXXFLAGS) $(PASCAL_TRIANGLES_CPP) /Fo$(BINARY_OUTPUT_DIR)\PascalTriangles.obj
	@ echo --------------------------------------------------------
	
# cagd/Core/Shaders

ShaderPrograms.obj: $(SHADER_PROGRAMS_CPP) $(SHADER_PROGRAMS_H) \
                    $(LIGHTS_H) $(MATERIALS_H)
	$(CXX) -c $(CXXFLAGS) $(SHADER_PROGRAMS_CPP) /Fo$(BINARY_OUTPUT_DIR)\ShaderPrograms.obj
	@ echo --------------------------------------------------------
	
# EC

CharacteristicPolynomials.obj: $(CHARACTERISTIC_POLYNOMIALS_CPP) $(CHARACTERISTIC_POLYNOMIALS_H) \
                               $(CONSTANTS_H)
	$(CXX) -c $(CXXFLAGS) $(CHARACTERISTIC_POLYNOMIALS_CPP) /Fo$(BINARY_OUTPUT_DIR)\CharacteristicPolynomials.obj
	@ echo --------------------------------------------------------
	
ECSpaces.obj: $(EC_SPACES_CPP) $(EC_SPACES_H) \
              $(CHARACTERISTIC_POLYNOMIALS_H) $(REAL_MATRICES_H) $(SPECIALIZED_SMART_POINTERS_H) $(GENERIC_CURVES_H)
	$(CXX) -c $(CXXFLAGS) $(EC_SPACES_CPP) /Fo$(BINARY_OUTPUT_DIR)\ECSpaces.obj
	@ echo --------------------------------------------------------
	
BCurves3.obj: $(B_CURVES_CPP) $(B_CURVES_H) \
              $(SPECIALIZED_SMART_POINTERS_H) $(LINEAR_COMBINATIONS_H) $(EC_SPACES_H) $(EXCEPTIONS_H)
	$(CXX) -c $(CXXFLAGS) $(B_CURVES_CPP) /Fo$(BINARY_OUTPUT_DIR)\BCurves3.obj
	@ echo --------------------------------------------------------
	
BSurfaces3.obj: $(B_SURFACES_CPP) $(B_SURFACES_H) \
              $(SPECIALIZED_SMART_POINTERS_H) $(TENSOR_PRODUCT_SURFACES_H) $(CONSTANTS_H) $(MATRICES_H) $(EC_SPACES_H) $(B_CURVES_H)
	$(CXX) -c $(CXXFLAGS) $(B_SURFACES_CPP) /Fo$(BINARY_OUTPUT_DIR)\BSurfaces3.obj
	@ echo --------------------------------------------------------
	

clean:
	@ $(IF_EXISTS) $(BINARY_OUTPUT_DIR) $(REMOVE_DIR) $(BINARY_OUTPUT_DIR)
	@ $(IF_EXISTS) $(DIR_INCLUDE) $(REMOVE_DIR) $(DIR_INCLUDE)
