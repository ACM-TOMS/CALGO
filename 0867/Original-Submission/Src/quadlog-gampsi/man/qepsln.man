.TH QEPSLN 3 "31 December 2000" "Version 1.00"
.if n .ds Ep epsilon
.if t .ds Ep \(*e
.\" WARNING: This file was produced automatically from file common/qepsln.f
.\" by fortran-to-man-page.awk on Sun Dec 31 09:02:19 MST 2000.
.\" Any manual changes will be lost if this file is regenerated!
.SH NAME
qepsln \- Quadruple-precision epsilon
.\"=====================================================================
.SH SYNOPSIS
Fortran (77, 90, 95, HPF):
.RS
.B f77
.I "[ flags ] file(s) .\|.\|. -L/usr/local/lib -lgjl"
.RS
.nf
.B "REAL*16 FUNCTION QEPSLN (X)"
.B "REAL*16 X"
.fi
.RE
.RE
C (K&R, 89, 99), C++ (98):
.RS
.B cc
.I "[ flags ] -I/usr/local/include file(s) .\|.\|. -L/usr/local/lib -lgjl"
.br
Use
.RS
.B "#include <gampsi.h>"
.RE
to get this prototype:
.RS
.nf
.B "fortran_quadruple_precision qepsln(const fortran_quadruple_precision *x_);"
.fi
.RE
.RE
.PP
NB: The definition of C/C++ data types
.B fortran_
.IR xxx ,
and the mapping of Fortran external names to C/C++ external names,
is handled by the C/C++ header file.  That way, the same function
or subroutine name can be used in C, C++, and Fortran code,
independent of compiler conventions for mangling of external
names in these programming languages.
.\"=====================================================================
.SH DESCRIPTION
Return the smallest representable number, \*(Ep\&, such that (\fBx\fP\&
+ \*(Ep\&) differs from \fBx\fP\&.
.PP
This function is borrowed from a quadruple-precision version of the
EISPACK library.
.\"==============================[The End]==============================
.\"=====================================================================
.\" This is for GNU Emacs file-specific customization:
.\" Local Variables:
.\" fill-column: 50
.\" End:
