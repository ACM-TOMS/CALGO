### -*-maple-*-
###=======================================================================
### Investigate Chebyshev expansions for Psi(x)/(x-x0) and x*GAMMA()
### on a unit interval.  This program only provides the doit()
### function; it does not produce output until that function is
### called.
###
### The continued-fraction and rational polynomial conversions are 
### suppressed, because they generate a fatal error:
###
###	Error, (in convert/ratpoly/chebpad) 
###	Chebyshev-Pade approximation of given degree is not well-defined
###
### For the interval (3,4), these are found to be almost identical to
### those in Luke, The Special Functions and their Approximations,
### Vol. II, pp. 301--302.
###
### [21-Jul-2000]
###=======================================================================

interface(quiet=true):

show_coeffs := proc(chebpoly,title)
	    local k, term:
	    printf("\nChebyshev polynomial coefficients for %s\n", title):
	    printf("%2s\t%s\n", "k", "T(k,2*x-1)"):
	
	    for k from 0 to nops(chebpoly)
	    do
		term := T(k,2*x-1):
		printf("%2d\t%62.55e\n", k, coeff(chebpoly,term)):
	    od:
	end:

doit :=
    proc(MACHEPS, offset)
	global gam_chebyshev, gam_confrac, gam_ratpoly, k, psi_chebyshev,
	       psi_confrac, psi_ratpoly:
	local x0;
	printf("------------------------------------------------------------------------\n"):
	printf("Digits = %d\n", Digits):
	printf("MACHEPS = %.2e = 2^(%d)\n",
	    evalf(MACHEPS), round(evalf(log[2](MACHEPS)))):

	x0 := fsolve(Psi(x) = 0, x, 1.46 .. 1.47):

	gam_chebyshev := chebyshev('x'*GAMMA('x'+offset), 'x' = 0..1, MACHEPS):
	show_coeffs(gam_chebyshev,sprintf("x*Gamma(x+%f) for x = 0..1", offset)):

	psi_chebyshev := chebyshev(Psi('x'+offset)/(x - x0), 'x' = 0..1, MACHEPS):
	show_coeffs(psi_chebyshev,sprintf("psi(x+%f)/(x - x0) for x = 0..1", offset)):

	print("DEBUG: gam_chebyshev = ", gam_chebyshev):
	print("DEBUG: psi_chebyshev = ", psi_chebyshev):
	# gam_ratpoly := convert(gam_chebyshev,'ratpoly'):
	# psi_ratpoly := convert(psi_chebyshev,'ratpoly'):
	with(orthopoly,T):
	# psi_confrac := numapprox[confracform](psi_ratpoly,'x'):
	# gam_confrac := numapprox[confracform](gam_ratpoly,'x'):

	printf("\n\n\n"):
	printf("Chebyshev expansion of psi(x+%f)/(x - x0) for x = 0..1\n", offset):
	printf("%2s\t%s\n", "k", "x^(k-1)"):
	for k from 1 to nops(psi_chebyshev)
	do
	    printf("%2d\t%62.55e\n", k, coeff(psi_chebyshev, 'x', k-1))
	od:
	printf("\n\n\n"):
	printf("Chebyshev expansion of x*Gamma(x+%f) for x = 0..1\n", offset):
	printf("%2s\t%s\n", "k", "x^(k-1)"):
	for k from 1 to nops(gam_chebyshev)
	do
	    printf("%2d\t%62.55e\n", k, coeff(gam_chebyshev, 'x', k-1))
	od:

	# printf("psi_ratpoly:\t%a\n", psi_ratpoly):
	# printf("psi_confrac:\t%a\n", psi_confrac):
	# printf("gam_ratpoly:\t%a\n", gam_ratpoly):
	# printf("gam_confrac:\t%a\n", gam_confrac):
	printf("------------------------------------------------------------------------\n")
    end:
