#17.maple
#
#   Frank Sottile 
#   Jonathon Hauenstein
#
#  This file will draw a four-bar linkage interpolating nine
#   given points.     It is not interesting enough for publication,
#   and therfore is incomplete
#  It is important to see the paper of Morgan, Sommese, and Wampler. 
#
interface(quiet=true):
with(plots):
plotsetup(x11):
read("RealSols.maple"):

mr:=proc(r)
 return( trunc(1000000*r)/1000000 )
end proc:

rot := proc(w,s,t)
 return([(2*s*t*u[1]+(s^2-t^2)*u[2])/(s^2+t^2), 
         (2*s*t*u[2]-(s^2-t^2)*u[1])/(s^2+t^2)])
end proc:

#
#  Interpolating poionts
#
P:=[[0.25, 0.00],
    [0.52, 0.10],
    [0.80, 0.70],
    [1.20, 1.00],
    [1.40, 1.30],
    [1.10, 1.48],
    [0.70, 1.40],
    [0.20, 1.00],
    [0.02, 0.40]]:
P:=[seq([mr(P[ii][1]),mr(P[ii][2])],ii=1..9)]:

i:=17:
S:=[seq(mr(Points[i][ii]),ii=1..12)]:

# The four vectors
x:=[S[1],S[2]]:
a:=[S[3],S[4]]:
y:=[S[7],S[8]]:
b:=[S[9],S[10]]:
# The Anchor points
A:=[P[1][1]+a[1], P[1][2]+a[2]]:
B:=[P[1][1]+b[1], P[1][2]+b[2]]:
Gr:=pointplot([A,B],symbol=cross,color=red):
#
# Two legs of four-bar mechanism
#
u:=[x[1]-a[1], x[2]-a[2]]:
v:=[y[1]-b[1], y[2]-b[2]]:
#
#  The w-bar (as a vector), and the position of the actuator
#
w:=[y[1]-x[1], y[2]-x[2]]:
Pars:=solve({al*w[1]+be*w[2]=x[1], al*w[2]-be*w[1]=x[2]},{al,be}):
#####################################################################
#
#  Let p, q  be the positions of the endpoints of the u-bar and the v-bar
#
p := (s,t) -> [A[1]+(2*s*t*u[1]+(s^2-t^2)*u[2])/(s^2+t^2), 
               A[2]+(2*s*t*u[2]-(s^2-t^2)*u[1])/(s^2+t^2)]:
q := (s,t) -> [B[1]+(2*s*t*v[1]+(s^2-t^2)*v[2])/(s^2+t^2), 
               B[2]+(2*s*t*v[2]-(s^2-t^2)*v[1])/(s^2+t^2)]:
#
#  The one equation is that dist(p,q) = |w|.
#
P1:=p(s,1):
P1:=p(1,s):
Q1:=q(t,1):
W:=[Q1[1]-P1[1],Q1[2]-P1[2]]:
X:=simplify(subs(op(Pars),[P1[1]-al*W[1]-be*W[2], P1[2]-al*W[2]+be*W[1]])):

G:=(P1[1]-Q1[1])^2+(P1[2]-Q1[2])^2-(w[1]^2+w[2]^2):
G:=numer(simplify(G)):
implicitplot(G,s=-8..8, t=-2..2,grid=[200,200]);

Gi:=(P1[1]-q(1,t)[1])^2+(P1[2]-q(1,t)[2])^2-(w[1]^2+w[2]^2):
Gi:=numer(simplify(Gi)):
implicitplot(Gi,s=-8..8, t=-2..2,grid=[200,200]);

CA:=coeff(G,s^2):  CB:=coeff(G,s): CC:=subs(s=0,G):
Sols:=[(-CB-sqrt(CB^2-4*CA*CC))/2/CA, (-CB+sqrt(CB^2-4*CA*CC))/2/CA]:

s1:=unapply(Sols[1],t):
s2:=unapply(Sols[2],t):

x:=unapply(X,s,t);

Po:=pointplot(P,symbol=cross,color=blue):
display(Po,Gr,scaling=constrained);

plotP1:=[plot([p(s1(t),1)[], t=-1..1], color=green),
         plot([p(s1(1/t),1)[], t=-1..1], color=green)]:
plotQ1:=[plot([q(t,1)[], t=-1..1], color=blue),
         plot([q(1,t)[], t=-1..1], color=blue)]:
plotR1:=[plot([x(s1(t),t)[], t=-1..1], color=red),
         plot([x(s1(1/t),1/t)[], t=-1..1], color=red)]:
display(plotP1,plotQ1,plotR1,Po,Gr,scaling=constrained);

plotP2:=[plot([p(s2(t),1)[], t=-1..1], color=green),
         plot([p(s2(1/t),1)[], t=-1..1], color=green)]:
plotQ2:=[plot([q(t,1)[], t=-1..1], color=blue),
         plot([q(1,t)[], t=-1..1], color=blue)]:
plotR2:=[plot([x(s2(t),t)[], t=-1..1], color=red),
         plot([x(s2(1/t),1/t)[], t=-1..1], color=red)]:
display(plotP1,plotQ1,plotR1,plotP2,plotQ2,plotR2,Po,Gr,scaling=constrained);

