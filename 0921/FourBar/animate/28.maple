#28.maple
#
#   Frank Sottile 
#   Jonathon Hauenstein
#
#
#  This draws the four-bar linkage interpolating nine
#   given points for solution #104.  This includes and 
#   animation of the linkage positions.  The workspace curve
#   is disconnected.
#
#   It begins with numerical solutions to Problem 4 in the
#   paper of Morgan, Sommese, and Wampler. 
#
#
interface(quiet=true):
with(plots):
with(plottools):
plotsetup(x11):
read("RealSols.maple"):
#
#  Real solutions stored in file as list of Points
#
mr:=proc(r)
 return( trunc(1000000*r)/1000000 )
end proc:
###################################################
rot:=proc(r,v)
 return([(2*r*v[1] + (r^2-1)*v[2])/(1+r^2),
         (2*r*v[2] - (r^2-1)*v[1])/(1+r^2)])
end proc:
###################################################

#
#  Interpolating poionts
#
P:=[[0.25, 0.00],
    [0.52, 0.10],
    [0.02, 0.40],
    [0.80, 0.70],
    [1.20, 1.00],
    [1.40, 1.30],
    [1.10, 1.48],
    [0.70, 1.40],
    [0.20, 1.00]]:

P:=[seq([mr(P[ii][1]),mr(P[ii][2])],ii=1..9)]:
Delta:=[seq([P[ii][1]-P[1][1], P[ii][2]-P[1][2]],ii=1..9)]:
Deltac:=[seq(P[ii][1]-P[1][1] + I*P[ii][2]-P[1][2],ii=1..9)]:
      
i:=28:

S:=[seq(mr(Points[i][ii]),ii=1..12)]:
#Digits:=10:
#S:=[seq(Points[i][ii],ii=1..12)]:

# The four vectors
x:=[S[1],S[2]]:
a:=[S[3],S[4]]:
n:=[S[5],S[6]]:
y:=[S[7],S[8]]:
b:=[S[9],S[10]]:
m:=[S[11],S[12]]:

# Make them into complex numbers
xc:=x[1]+I*x[2]:
ac:=a[1]+I*a[2]:
nc:=n[1]+I*n[2]:
yc:=y[1]+I*y[2]:
bc:=b[1]+I*b[2]:
mc:=m[1]+I*m[2]:
#
#  Check that equation (9) holds.
#
evalf(simplify(ac*conjugate(xc)-nc)):
evalf(simplify(bc*conjugate(yc)-mc)):
#
#  Check that the remaining equations hold
#
for j from 2 to 9 do
solve({(conjugate(ac)-conjugate(Deltac[j]))*xc*gam + (ac-Deltac[j])*conjugate(xc)*cgam + 
         Deltac[j]*(conjugate(ac)-conjugate(xc)) + conjugate(Deltac[j])*(ac-xc)
        -Deltac[j]*conjugate(Deltac[j]),
       (conjugate(bc)-conjugate(Deltac[j]))*yc*gam + (bc-Deltac[j])*conjugate(yc)*cgam + 
         Deltac[j]*(conjugate(bc)-conjugate(yc)) + conjugate(Deltac[j])*(bc-yc)
        -Deltac[j]*conjugate(Deltac[j])},
   {gam,cgam}):
end do:
###########################################################################

# The Anchor points
A:=[P[1][1]+a[1], P[1][2]+a[2]]:
B:=[P[1][1]+b[1], P[1][2]+b[2]]:
#
# Two legs of four-bar mechanism, as vectors
#
u:=rot(1,[x[1]-a[1], x[2]-a[2]]):
v:=rot(-1/4,[y[1]-b[1], y[2]-b[2]]):
ur:=rot(0,u):
#
#  The w-bar (as a vector), and its length
#
w:=[y[1]-x[1], y[2]-x[2]]:
Pars:=solve({al*w[1]+be*w[2]=x[1], al*w[2]-be*w[1]=x[2]},{al,be}):

#####################################################################
#
#  p and q are the positions of the endpoints of the u-bar and the v-bar
#
p := (s,t) -> [A[1]+(2*s*t*u[1]+(s^2-t^2)*u[2])/(s^2+t^2), 
               A[2]+(2*s*t*u[2]-(s^2-t^2)*u[1])/(s^2+t^2)]:
pr:= (s,t) -> [A[1]+(2*s*t*ur[1]+(s^2-t^2)*ur[2])/(s^2+t^2), 
               A[2]+(2*s*t*ur[2]-(s^2-t^2)*ur[1])/(s^2+t^2)]:
q := (s,t) -> [B[1]+(2*s*t*v[1]+(s^2-t^2)*v[2])/(s^2+t^2), 
               B[2]+(2*s*t*v[2]-(s^2-t^2)*v[1])/(s^2+t^2)]:
#
#  The one equation is that dist(p,q) = |w|.
#
W:=[q(1,t)[1]-p(s,1)[1],q(1,t)[2]-p(s,1)[2]]:
X:=simplify(subs(op(Pars),[p(s,1)[1]-al*W[1]-be*W[2], p(s,1)[2]-al*W[2]+be*W[1]])):
Wr:=[q(1,t)[1]-pr(s,1)[1],q(1,t)[2]-pr(s,1)[2]]:
Xr:=simplify(subs(op(Pars),[pr(s,1)[1]-al*Wr[1]-be*Wr[2], pr(s,1)[2]-al*Wr[2]+be*Wr[1]])):

G:=(p(s,1)[1]-q(1,t)[1])^2+(p(s,1)[2]-q(1,t)[2])^2-(w[1]^2+w[2]^2):
G:=numer(simplify(G)):
#implicitplot(G,s=-8..8, t=-8..8,grid=[200,200],color=red);

Gr:=(pr(s,1)[1]-q(1,t)[1])^2+(pr(s,1)[2]-q(1,t)[2])^2-(w[1]^2+w[2]^2):
Gr:=numer(simplify(Gr)):
#implicitplot(Gr,s=-8..8, t=-8..8,grid=[200,200],color=red);

At:=coeff(G,t^2): Bt:=coeff(G,t): Ct:=subs(t=0,G):
t1:= unapply((-Bt + sqrt(Bt^2-4*At*Ct))/2/At,s):
t2:=  unapply((-Bt - sqrt(Bt^2-4*At*Ct))/2/At,s):

Art:=coeff(Gr,t^2): Brt:=coeff(Gr,t): Crt:=subs(t=0,Gr):
tr1:= unapply((-Brt + sqrt(Brt^2-4*Art*Crt))/2/Art,s):
tr2:= unapply((-Brt - sqrt(Brt^2-4*Art*Crt))/2/Art,s):
#####################################################################
x:=unapply(X,s,t):
xr:=unapply(Xr,s,t):

s0:=-1/10:s1:=-4:
fb:=[plottools[curve]([A,p(s0,1),q(1,t1(s0)),B],color=brown),
     plottools[curve]([p(s0,1),x(s0,t1(s0)),q(1,t1(s0))],color=brown),
     plottools[curve]([A,p(s1,1),q(1,t2(s1)),B],color=black),
     plottools[curve]([p(s1,1),x(s1,t2(s1)),q(1,t2(s1))],color=black)]:


# For .eps figure
Gr:=pointplot([A,B],symbol=point,color=pink):
Po:=pointplot(P,symbol=point,color=red):

# For animation
Ground:=[pointplot([A,B],symbol=cross,color=black),
     pointplot([A,B],symbol=circle,color=red),
     pointplot([[0,5/2]],symbol=cross, color=black)]:
Po:=[pointplot(P[1..3],symbol=circle,color=red),
     pointplot(P[4..9],symbol=circle,color=green)]:

lf:=-1/2: ri:=23/10:
bo:=-3/5: tp:=7/4:
Frame:=plottools[curve]([[lf,bo],[lf,tp],[ri,tp],[ri,bo],[lf,bo]],color=green):

plotR1:=[plot([x(s,t1(s))[], s=-1..1], color=magenta,thickness=2),
         plot([x(1/s,t1(1/s))[], s=-1..1], color=magenta,thickness=2)]:
plotR2:=[plot([x(s,t2(s))[], s=-1..1], color=blue,thickness=2),
         plot([x(1/s,t2(1/s))[], s=-1..1], color=blue,thickness=2)]:

FB:=proc(s)
 local as:
   as:=abs(2*s)-1:
 if s<= 0 then
   display([plottools[curve]([A,pr(as,1),q(1,tr1(as)),B],color=brown,thickness=2),
            plottools[curve]([pr(as,1),xr(as,tr1(as)),q(1,tr1(as))],color=brown,thickness=2),
            plottools[curve]([A,p(as,1),q(1,t2(as)),B],color=black,thickness=2),
            plottools[curve]([p(as,1),x(as,t2(as)),q(1,t2(as))],color=black,thickness=2),
            NULL]);
  else
   display([plottools[curve]([A,pr(1,as),q(1,tr1(1/as)),B],color=brown,thickness=2),
            plottools[curve]([pr(1,as),xr(1/as,tr1(1/as)),q(1,tr1(1/as))],color=brown,thickness=2),
            plottools[curve]([A,p(1,as),q(1,t2(1/as)),B],color=black,thickness=2),
            plottools[curve]([p(1,as),x(1/as,t2(1/as)),q(1,t2(1/as))],color=black,thickness=2),
            NULL]);
 end if:  
end proc:

Bk:=[plotR1,plotR2,Po,Ground,Frame]:

#   lg: 300 high   y=180
#plotsetup(gif,plotoutput="movie.gif",plotoptions=`height=535,width=535`):
animate(FB,[t],t=-1..1, frames=200, background=display(Bk[]), scaling=constrained,axes=none);

#plotsetup(ps,plotoutput=`C.eps`,plotoptions=`color,portrait,width=3in,height=3in,noborder`):
#display(fb,Bk[],scaling=constrained,axes=none);
