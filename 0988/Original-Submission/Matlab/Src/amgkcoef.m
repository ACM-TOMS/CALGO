function [XGK, WK, WG] = amgkcoef(N)
% AMGKCOEF: [XGK, WK, WG] = amgkcoef(N)
%
% DESCRIPTION: 1D Gauss-Kronrod coefficients of arbitrary order (N,2*N+1).
% Returns tabulated Gauss-Kronrod coefficients for various orders accurate
% to 1e-25 (25 decimal places) as evaluated by Advanpix (Pavel Holoborodko).
% <http://www.advanpix.com/2011/11/07/Gauss-Kronrod-quadrature-nodes-weights/>
% These values will be rounded to double precision upon loading ~ 2e-16.
% If table for N is not present, a double precision routine is called.
%
% INPUT: N = positive integer > 1 is required and not validated.
%
% OUTPUT: [XGK, WK, WG] have the following descriptions.
% XGK = abscissa locations between -1 and 1
% WK = Kronrod weights
% WG = Gauss weights
%
% This file is part of AMGKQ.  See AMGKQ.M for details.
% Copyright (C) 2014 Robert W. Johnson, Alphawave Research.
% This is free software; see GPLv3 or greater for copying conditions.
% There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or
% FITNESS FOR A PARTICULAR PURPOSE.  For details, see GPLv3 or greater.

persistent GKC
if isempty(GKC)
GKC{7} = [ ...
%Gauss nodes , Weights ; ...
 0.0000000000000000000000000 , 0.4179591836734693877551020 ; ...
 0.4058451513773971669066064 , 0.3818300505051189449503698 ; ...
 0.7415311855993944398638648 , 0.2797053914892766679014678 ; ...
 0.9491079123427585245261897 , 0.1294849661688696932706114 ; ...
%Kronrod nodes , Weights ; ...
 0.0000000000000000000000000 , 0.2094821410847278280129992 ; ...
 0.2077849550078984676006894 , 0.2044329400752988924141620 ; ...
 0.4058451513773971669066064 , 0.1903505780647854099132564 ; ...
 0.5860872354676911302941448 , 0.1690047266392679028265834 ; ...
 0.7415311855993944398638648 , 0.1406532597155259187451896 ; ...
 0.8648644233597690727897128 , 0.1047900103222501838398763 ; ...
 0.9491079123427585245261897 , 0.0630920926299785532907007 ; ...
 0.9914553711208126392068547 , 0.0229353220105292249637320 ];
GKC{10} = [ ...
%Gauss nodes , Weights ; ...
 0.1488743389816312108848260 , 0.2955242247147528701738930 ; ...
 0.4333953941292471907992659 , 0.2692667193099963550912269 ; ...
 0.6794095682990244062343274 , 0.2190863625159820439955349 ; ...
 0.8650633666889845107320967 , 0.1494513491505805931457763 ; ...
 0.9739065285171717200779640 , 0.0666713443086881375935688 ; ...
%Kronrod nodes , Weights ; ...
 0.0000000000000000000000000 , 0.1494455540029169056649365 ; ...
 0.1488743389816312108848260 , 0.1477391049013384913748415 ; ...
 0.2943928627014601981311266 , 0.1427759385770600807970943 ; ...
 0.4333953941292471907992659 , 0.1347092173114733259280540 ; ...
 0.5627571346686046833390001 , 0.1234919762620658510779581 ; ...
 0.6794095682990244062343274 , 0.1093871588022976418992106 ; ...
 0.7808177265864168970637176 , 0.0931254545836976055350655 ; ...
 0.8650633666889845107320967 , 0.0750396748109199527670431 ; ...
 0.9301574913557082260012072 , 0.0547558965743519960313813 ; ...
 0.9739065285171717200779640 , 0.0325581623079647274788190 ; ...
 0.9956571630258080807355273 , 0.0116946388673718742780644 ];
GKC{15} = [ ...
%Gauss nodes , Weights ; ...
 0.0000000000000000000000000 , 0.2025782419255612728806202 ; ...
 0.2011940939974345223006283 , 0.1984314853271115764561183 ; ...
 0.3941513470775633698972074 , 0.1861610000155622110268006 ; ...
 0.5709721726085388475372267 , 0.1662692058169939335532009 ; ...
 0.7244177313601700474161861 , 0.1395706779261543144478048 ; ...
 0.8482065834104272162006483 , 0.1071592204671719350118695 ; ...
 0.9372733924007059043077589 , 0.0703660474881081247092674 ; ...
 0.9879925180204854284895657 , 0.0307532419961172683546284 ; ...
%Kronrod nodes , Weights ; ...
 0.0000000000000000000000000 , 0.1013300070147915490173748 ; ...
 0.1011420669187174990270742 , 0.1007698455238755950449467 ; ...
 0.2011940939974345223006283 , 0.0991735987217919593323932 ; ...
 0.2991800071531688121667800 , 0.0966427269836236785051799 ; ...
 0.3941513470775633698972074 , 0.0931265981708253212254869 ; ...
 0.4850818636402396806936557 , 0.0885644430562117706472754 ; ...
 0.5709721726085388475372267 , 0.0830805028231330210382892 ; ...
 0.6509967412974169705337359 , 0.0768496807577203788944328 ; ...
 0.7244177313601700474161861 , 0.0698541213187282587095201 ; ...
 0.7904185014424659329676493 , 0.0620095678006706402851392 ; ...
 0.8482065834104272162006483 , 0.0534815246909280872653431 ; ...
 0.8972645323440819008825097 , 0.0445897513247648766082273 ; ...
 0.9372733924007059043077589 , 0.0353463607913758462220379 ; ...
 0.9677390756791391342573480 , 0.0254608473267153201868740 ; ...
 0.9879925180204854284895657 , 0.0150079473293161225383748 ; ...
 0.9980022986933970602851728 , 0.0053774798729233489877921 ];
GKC{20} = [ ...
%Gauss nodes , Weights ; ...
 0.0765265211334973337546404 , 0.1527533871307258506980843 ; ...
 0.2277858511416450780804962 , 0.1491729864726037467878287 ; ...
 0.3737060887154195606725482 , 0.1420961093183820513292983 ; ...
 0.5108670019508270980043641 , 0.1316886384491766268984945 ; ...
 0.6360536807265150254528367 , 0.1181945319615184173123774 ; ...
 0.7463319064601507926143051 , 0.1019301198172404350367501 ; ...
 0.8391169718222188233945291 , 0.0832767415767047487247581 ; ...
 0.9122344282513259058677524 , 0.0626720483341090635695065 ; ...
 0.9639719272779137912676661 , 0.0406014298003869413310400 ; ...
 0.9931285991850949247861224 , 0.0176140071391521183118620 ; ...
%Kronrod nodes , Weights ; ...
 0.0000000000000000000000000 , 0.0766007119179996564450499 ; ...
 0.0765265211334973337546404 , 0.0763778676720807367055028 ; ...
 0.1526054652409226755052202 , 0.0757044976845566746595428 ; ...
 0.2277858511416450780804962 , 0.0745828754004991889865814 ; ...
 0.3016278681149130043205554 , 0.0730306903327866674951894 ; ...
 0.3737060887154195606725482 , 0.0710544235534440683057904 ; ...
 0.4435931752387251031999922 , 0.0686486729285216193456234 ; ...
 0.5108670019508270980043641 , 0.0658345971336184221115636 ; ...
 0.5751404468197103153429460 , 0.0626532375547811680258701 ; ...
 0.6360536807265150254528367 , 0.0591114008806395723749672 ; ...
 0.6932376563347513848054907 , 0.0551951053482859947448324 ; ...
 0.7463319064601507926143051 , 0.0509445739237286919327077 ; ...
 0.7950414288375511983506388 , 0.0464348218674976747202319 ; ...
 0.8391169718222188233945291 , 0.0416688733279736862637883 ; ...
 0.8782768112522819760774430 , 0.0366001697582007980305572 ; ...
 0.9122344282513259058677524 , 0.0312873067770327989585431 ; ...
 0.9408226338317547535199827 , 0.0258821336049511588345051 ; ...
 0.9639719272779137912676661 , 0.0203883734612665235980102 ; ...
 0.9815078774502502591933430 , 0.0146261692569712529837880 ; ...
 0.9931285991850949247861224 , 0.0086002698556429421986618 ; ...
 0.9988590315882776638383156 , 0.0030735837185205315012183 ];
GKC{25} = [ ...
%Gauss nodes , Weights ; ...
 0.0000000000000000000000000 , 0.1231760537267154512039029 ; ...
 0.1228646926107103963873598 , 0.1222424429903100416889595 ; ...
 0.2438668837209884320451904 , 0.1194557635357847722281781 ; ...
 0.3611723058093878377358217 , 0.1148582591457116483393255 ; ...
 0.4730027314457149605221821 , 0.1085196244742636531160940 ; ...
 0.5776629302412229677236898 , 0.1005359490670506442022069 ; ...
 0.6735663684734683644851206 , 0.0910282619829636498114972 ; ...
 0.7592592630373576305772829 , 0.0801407003350010180132350 ; ...
 0.8334426287608340014210211 , 0.0680383338123569172071872 ; ...
 0.8949919978782753688510420 , 0.0549046959758351919259369 ; ...
 0.9429745712289743394140112 , 0.0409391567013063126556235 ; ...
 0.9766639214595175114983154 , 0.0263549866150321372619018 ; ...
 0.9955569697904980979087849 , 0.0113937985010262879479030 ; ...
%Kronrod nodes , Weights ; ...
 0.0000000000000000000000000 , 0.0615808180678329350787598 ; ...
 0.0615444830056850788865464 , 0.0614711898714253166615441 ; ...
 0.1228646926107103963873598 , 0.0611285097170530483058590 ; ...
 0.1837189394210488920159699 , 0.0605394553760458629453603 ; ...
 0.2438668837209884320451904 , 0.0597203403241740599790993 ; ...
 0.3030895389311078301674789 , 0.0586896800223942079619742 ; ...
 0.3611723058093878377358217 , 0.0574371163615678328535827 ; ...
 0.4178853821930377488518144 , 0.0559508112204123173082407 ; ...
 0.4730027314457149605221821 , 0.0542511298885454901445434 ; ...
 0.5263252843347191825996238 , 0.0523628858064074758643667 ; ...
 0.5776629302412229677236898 , 0.0502776790807156719633253 ; ...
 0.6268100990103174127881227 , 0.0479825371388367139063923 ; ...
 0.6735663684734683644851206 , 0.0455029130499217889098706 ; ...
 0.7177664068130843881866541 , 0.0428728450201700494768958 ; ...
 0.7592592630373576305772829 , 0.0400838255040323820748393 ; ...
 0.7978737979985000594104109 , 0.0371162714834155435603306 ; ...
 0.8334426287608340014210211 , 0.0340021302743293378367488 ; ...
 0.8658470652932755954489970 , 0.0307923001673874888911090 ; ...
 0.8949919978782753688510420 , 0.0274753175878517378029485 ; ...
 0.9207471152817015617463461 , 0.0240099456069532162200925 ; ...
 0.9429745712289743394140112 , 0.0204353711458828354565683 ; ...
 0.9616149864258425124181300 , 0.0168478177091282982315167 ; ...
 0.9766639214595175114983154 , 0.0132362291955716748136564 ; ...
 0.9880357945340772476373310 , 0.0094739733861741516072077 ; ...
 0.9955569697904980979087849 , 0.0055619321353567137580402 ; ...
 0.9992621049926098341934575 , 0.0019873838923303159265079 ];
GKC{30} = [ ...
%Gauss nodes , Weights ; ...
 0.0514718425553176958330252 , 0.1028526528935588403412856 ; ...
 0.1538699136085835469637947 , 0.1017623897484055045964290 ; ...
 0.2546369261678898464398051 , 0.0995934205867952670627803 ; ...
 0.3527047255308781134710372 , 0.0963687371746442596394686 ; ...
 0.4470337695380891767806099 , 0.0921225222377861287176327 ; ...
 0.5366241481420198992641698 , 0.0868997872010829798023875 ; ...
 0.6205261829892428611404776 , 0.0807558952294202153546949 ; ...
 0.6978504947933157969322924 , 0.0737559747377052062682439 ; ...
 0.7677774321048261949179773 , 0.0659742298821804951281285 ; ...
 0.8295657623827683974428981 , 0.0574931562176190664817217 ; ...
 0.8825605357920526815431165 , 0.0484026728305940529029381 ; ...
 0.9262000474292743258793243 , 0.0387991925696270495968019 ; ...
 0.9600218649683075122168710 , 0.0287847078833233693497192 ; ...
 0.9836681232797472099700326 , 0.0184664683110909591423021 ; ...
 0.9968934840746495402716301 , 0.0079681924961666056154659 ; ...
%Kronrod nodes , Weights ; ...
 0.0000000000000000000000000 , 0.0514947294294515675583404 ; ...
 0.0514718425553176958330252 , 0.0514261285374590259338629 ; ...
 0.1028069379667370301470968 , 0.0512215478492587721706563 ; ...
 0.1538699136085835469637947 , 0.0508817958987496064922975 ; ...
 0.2045251166823098914389577 , 0.0504059214027823468408931 ; ...
 0.2546369261678898464398051 , 0.0497956834270742063578116 ; ...
 0.3040732022736250773726771 , 0.0490554345550297788875282 ; ...
 0.3527047255308781134710372 , 0.0481858617570871291407795 ; ...
 0.4004012548303943925354762 , 0.0471855465692991539452615 ; ...
 0.4470337695380891767806099 , 0.0460592382710069881162717 ; ...
 0.4924804678617785749936931 , 0.0448148001331626631923556 ; ...
 0.5366241481420198992641698 , 0.0434525397013560693168317 ; ...
 0.5793452358263616917560249 , 0.0419698102151642461471475 ; ...
 0.6205261829892428611404776 , 0.0403745389515359591119953 ; ...
 0.6600610641266269613700537 , 0.0386789456247275929503487 ; ...
 0.6978504947933157969322924 , 0.0368823646518212292239111 ; ...
 0.7337900624532268047261711 , 0.0349793380280600241374997 ; ...
 0.7677774321048261949179773 , 0.0329814470574837260318142 ; ...
 0.7997278358218390830136689 , 0.0309072575623877624728843 ; ...
 0.8295657623827683974428981 , 0.0287540487650412928439788 ; ...
 0.8572052335460610989586585 , 0.0265099548823331016106017 ; ...
 0.8825605357920526815431165 , 0.0241911620780806013656864 ; ...
 0.9055733076999077985465226 , 0.0218280358216091922971675 ; ...
 0.9262000474292743258793243 , 0.0194141411939423811734090 ; ...
 0.9443744447485599794158313 , 0.0169208891890532726275723 ; ...
 0.9600218649683075122168710 , 0.0143697295070458048124514 ; ...
 0.9731163225011262683746939 , 0.0118230152534963417422329 ; ...
 0.9836681232797472099700326 , 0.0092732796595177634284411 ; ...
 0.9916309968704045948586284 , 0.0066307039159312921733198 ; ...
 0.9968934840746495402716301 , 0.0038904611270998840512672 ; ...
 0.9994844100504906375713259 , 0.0013890136986770076245516 ];
end
if (N > 30) || isempty(GKC{N})
    [XGK, WK, WG] = amgkcoefn(N);
    return
end
% Reshape output
GK = GKC{N}(ceil(N/2)+1:end,:);
GK(end-1:-2:1,3) = GKC{N}(ceil(N/2):-1:1,2);
XGK = [-GK(end:-1:2,1); GK(:,1)].';
WK = [GK(end:-1:2,2); GK(:,2)];
WG = [GK(end:-1:2,3); GK(:,3)];
end % function % amgkcoef

function [XGK, WK, WG] = amgkcoefn(N)
% Returns abscissa and weights for 1D Gauss-Kronrod
% quadrature rules of order N and 2N+1 respectively.
% Based on work of Dirk Laurie and Walter Gautschi:
% OPQ: A MATLAB SUITE OF PROGRAMS FOR GENERATING
% ORTHOGONAL POLYNOMIALS AND RELATED QUADRATURE RULES.
%
% Get ab from N
ab = r_jacobi01(2*N,0,0);
% Get Kronrod coefficients over [0, 1]
t = kronrod(N,ab);
% Expand and symmetrize over [-1, 1]
t(:,1) = t(:,1) - t(end:-1:1,1);
t(:,2) = t(:,2) + t(end:-1:1,2);
% Store output
XGK = t(:,1).';
WK = t(:,2);
% Get Gauss coefficients over [0, 1]
t = gauss(N,ab);
% Expand and symmetrize over [-1, 1]
t(:,2) = t(:,2) + t(end:-1:1,2);
% Store output
WG = 0*WK;
WG(2:2:end) = t(:,2);
end % function % amgkcoefn

function ab = r_jacobi01(N,a,b)
if (nargin < 2), a = 0; end  
if (nargin < 3), b = a; end
if (N <= 0) || (a <= -1) || (b <= -1)
    error('amgkcoef: parameter(s) out of range')
end
cd = r_jacobi(N,a,b);
n = 1:N;  
ab(n,1) = (1+cd(n,1))./2;  
ab(1,2) = cd(1,2)/2^(a+b+1);
n = 2:N; ab(n,2) = cd(n,2)./4;
end % function % r_jacobi01

function ab = r_jacobi(N,a,b)
if (nargin < 2), a = 0; end  
if (nargin < 3), b = a; end
if (N <= 0) || (a <= -1) || (b <= -1)
    error('amgkcoef: parameter(s) out of range')
end
nu = (b-a)/(a+b+2);
mu = 2^(a+b+1)*gamma(a+1)*gamma(b+1)/gamma(a+b+2);
if (N == 1), ab = [nu mu]; return, end 
N = N-1; n = 1:N; nab = 2*n+a+b;
A = [nu (b^2-a^2)*ones(1,N)./(nab.*(nab+2))];
n = 2:N; nab = nab(n);
B1 = 4*(a+1)*(b+1)/((a+b+2)^2*(a+b+3));
B = 4*(n+a).*(n+b).*n.*(n+a+b)./((nab.^2).*(nab+1).*(nab-1));
ab = [A' [mu; B1; B']];
end % function % r_jacobi

function xw = kronrod(N,ab)
ab0 = r_kronrod(N,ab);
if (sum((ab0(:,2) > 0)) ~= 2*N+1)
    error('amgkcoef: Gauss-Kronrod does not exist')
end
J = zeros(2*N+1);
for k = 1:2*N
  J(k,k) = ab0(k,1);
  J(k,k+1) = sqrt(ab0(k+1,2));
  J(k+1,k) = J(k,k+1);
end
J(2*N+1,2*N+1) = ab0(2*N+1,1);
[V,D] = eig(J);
d = diag(D);
e = ab0(1,2).*(V(1,:).^2);
[x,i] = sort(d);
w = e(i)';
xw = [x w];
end % function % kronrod

function ab = r_kronrod(N,ab0)
if (length(ab0) < ceil(3*N/2)+1)
    error('amgkcoef: array ab0 too short')
end
a = zeros(2*N+1,1); b = a;
k = 0:floor(3*N/2); a(k+1) = ab0(k+1,1);
k = 0:ceil(3*N/2); b(k+1) = ab0(k+1,2);
s = zeros(floor(N/2)+2,1); t = s; t(2) = b(N+2);
for m = 0:N-2
  k = floor((m+1)/2):-1:0; l = m-k;
  s(k+2) = cumsum((a(k+N+2)-a(l+1)).*t(k+2)+b(k+N+2).*s(k+1)-b(l+1).*s(k+2));
  swap = s; s = t; t = swap;
end
j = floor(N/2):-1:0; s(j+2) = s(j+1);
for m = N-1:2*N-3
  k = m+1-N:floor((m-1)/2); l = m-k; j = N-1-l;
  s(j+2) = cumsum(-(a(k+N+2)-a(l+1)).*t(j+2)-b(k+N+2).*s(j+2)+b(l+1).*s(j+3));
  j = j(length(j)); k = floor((m+1)/2);
  if (rem(m,2) == 0), a(k+N+2) = a(k+1)+(s(j+2)-b(k+N+2)*s(j+3))/t(j+3);
  else b(k+N+2) = s(j+2)/s(j+3);
  end
  swap = s; s = t; t = swap;
end
a(2*N+1) = a(N)-b(2*N+1)*s(2)/t(2);
ab = [a b];
end % function % r_kronrod

function xw = gauss(N,ab)
N0 = size(ab,1); 
if (N0 < N)
    error('amgkcoef: input array ab too short')
end
J = zeros(N);
for n = 1:N, J(n,n) = ab(n,1); end
for n = 2:N
  J(n,n-1) = sqrt(ab(n,2));
  J(n-1,n) = J(n,n-1);
end
[V,D] = eig(J);
[D,I] = sort(diag(D));
V = V(:,I);
xw = [D ab(1,2)*V(1,:)'.^2];
end % function % gauss

