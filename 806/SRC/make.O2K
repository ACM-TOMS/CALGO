# 32 or 64 bit versions of the library can be compiled. 
# In order to get the 64 bit version, please remove the # signs (if there are 
# any) before the lines under the statement '# 64 bit compilation' and append
# a # sign (if there isn't one) at the beginning of the lines immediately 
# following the statement '# 32 bit compilation'. 
# The reverse of this procedure is followed for 32 bit compilation.

AR = ar
ARFLAGS = cr
#If your system does not have ranlib, then replace next statement with 
RANLIB = echo

CC = cc
CLD = $(CC)
F77 = f77
F77LD = $(F77)
FFXN = -DAdd_
FSUFFIX = F

MPIF77 = $(F77)
MPICC = $(CC)

#
# To use MPI, set the MPIDIR to location of mpi library, and MPILIB 
# to name of mpi library. Remove # signs from beginning of next 3 lines.
# Also, if the previous compilation was without MPI, type: make realclean
# before compiling for mpi.
#
#MPIDEF = -DSPRNG_MPI #Only if you plan to use MPI
#MPIDIR = 
#MPILIB = -lmpi

# 32 bit compilation

#CFLAGS = -O3 -D$(PLAT) $(MPIDEF) -mips4 -D_LONG_LONG -n32 # 32 bit compilation
#CLDFLAGS =  -O3 -n32 # 32 bit compilation
#FFLAGS = -O3 -n32  #32 bit compilation
#F77LDFLAGS =  -O3 -n32  $(MPIDEF) -mips4 # 32 bit compilation
#CPP = cc -E -P $(MPIDEF) -D_LONG_LONG # 32 bit compilation


# 64 bit compilation
#

CFLAGS =  -O3 -D$(PLAT) $(MPIDEF) -D_LONG_LONG -align64 -64  
CLDFLAGS =  -O3 -align64 -64 # 64 bit compilation
FFLAGS = -O3 -align64   $(MPIDEF)  -DPOINTER_SIZE=8 -D_LONG_LONG -64 #64 bit compilation
F77LDFLAGS =  -O3 -align64 -64  # 64 bit compilation
CPP = cc -E -P   $(MPIDEF)  -DPOINTER_SIZE=8 -D_LONG_LONG # 64 bit compilation


#The following sets inlining options. This can be deleted to get slightly 
# more inefficient FORTRAN and simple interface codes.
INLINEOPT = -INLINE:must=get_rn_int,get_rn_dbl,get_rn_flt,get_rn_int_simple,get_rn_flt_simple,get_rn_dbl_simple
