function [p,z] = fib20
%
%  test polynomial suggested by Goedecker
%
    n = 20;
    p = [-1,ones(1,n)];
    z = [-.9473885474109854, ... 
        -.9029230998844866-.2884421994216345*i, ... 
        -.9029230998844866+.2884421994216345*i, ... 
        -.7734751441751908-.5504669225440185*i, ... 
        -.7734751441751908+.5504669225440185*i, ... 
        -.5705411148090332-.7619498890625472*i, ... 
        -.5705411148090332+.7619498890625472*i, ... 
        -.3121525651549263-.9031354642584495*i, ... 
        -.3121525651549263+.9031354642584495*i, ... 
        -.2129876087300105e-1-.9602891496489760*i, ... 
        -.2129876087300105e-1+.9602891496489760*i, ... 
        .2760438985065760-.9267417870492216*i, ... 
        .2760438985065760+.9267417870492216*i, ... 
        .5529956567245064-.8031600819414702*i, ... 
        .5529956567245064+.8031600819414702*i, ... 
        .7834063973613306-.5969423289081712*i, ... 
        .7834063973613306+.5969423289081712*i, ... 
        .9416394828514235-.3213776783384489*i, ... 
        .9416394828514235+.3213776783384489*i, ... 
        1.999999046316589];
    z = [z',ones(n,1)];
    if norm(imag(z(:,1))) == 0 
        fprintf('                 roots         multiplicities\n');
        fprintf('\n');
        fprintf('%25.15f \t \t \t %3g \n', z');
    else
        fprintf('                 roots ')
        fprintf('   \t\t\t\t\t\t     multiplicities\n');
        fprintf('\n');
        fprintf('%22.15f + %22.15f i \t \t %3g \n', ...
            [real(z(:,1)),imag(z(:,1)),z(:,2)]');

    end;    
