AR = ar
ARFLAGS = cr
#If your system does not have ranlib, then replace next statement with 
#RANLIB = echo
RANLIB = ranlib
FFXN =  -DNoChange
FSUFFIX = F
CC = xlc
F77 = xlf

# comment the next five lines to use MPI and then uncomment the following 
# lines, as explained below. 
MPICC = $(CC)
MPIF77 = $(F77)
CFLAGS = -O3 -qstrict -qarch=pwr2 -qlanglvl=ansi  -D$(PLAT)  -qtune=pwr2  -D_LONG_LONG $(MPIDEF)
FFLAGS = -O3 -qstrict -qarch=pwr2  -qtune=pwr2   -WF,-I../SRC  $(FMPIDEF)
CPP = xlf -c -d -qnoobj -WF,-P

# To use MPI, set the MPIDIR to location of mpi library, and MPILIB 
# to name of mpi library. Remove # signs from beginning of next 3 lines.
# Also, if the previous compilation was without MPI, type: make realclean
# before compiling for mpi.
#
#MPIDEF = -DSPRNG_MPI #Only if you plan to use MPI
#FMPIDEF = -WF,-DSPRNG_MPI #Only if you plan to use MPI
#MPIDIR = 
#MPILIB = 
#MPICC = mpcc
#CFLAGS = -O3 -qstrict -qarch=pwr2 -qlanglvl=ansi  -D$(PLAT)  -qtune=pwr2 -I/usr/lpp/ppe.poe/include -D_LONG_LONG $(MPIDEF) 
#MPIF77 = mpxlf
#FFLAGS = -O3 -qstrict -qarch=pwr2  -qtune=pwr2   -WF,-I../SRC -WF,-I/usr/lpp/ppe.poe/include $(FMPIDEF) 
#CPP = xlf -c -d -qnoobj -WF,-P -WF,-I/usr/lpp/ppe.poe/include   $(FMPIDEF)

CLD = $(CC)
CLDFLAGS = -O3 -qstrict -qarch=pwr2 -qlanglvl=ansi  -qtune=pwr2  
F77LD = $(F77)
F77LDFLAGS = -O3 -qstrict  -qarch=pwr2  -qtune=pwr2   


#The following sets inlining options. This can be deleted to get slightly 
# more inefficient FORTRAN and simple interface codes.
INLINEOPT = -Q+get_rn_int -Q+get_rn_dbl -Q+get_rn_flt -Q+get_rn_int_simple -Q+get_rn_flt_simple -Q+get_rn_dbl_simple
