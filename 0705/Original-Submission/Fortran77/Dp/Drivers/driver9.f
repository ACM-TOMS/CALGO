C--**--CH2917--705--P:LAP--28:10:1999
C--**--CH2906--705--P:RW--28:10:1999
C--**--CH2901--705--P:R--28:10:1999
C--**--CH2892--705--B:MA--28:10:1999
C--**--CH2870--705--A:H--28:10:1999
C     -- PROGRAM TSYLGDR --
C
C     THIS PROGRAM TESTS THE SOFTWARE FOR SOLVING THE SYMMETRIC
C     SYLVESTER EQUATION
C
C        A*X*A' - E*X*E' + Q = 0    (' DENOTES TRANSPOSE)
C
C     USING RANDOMLY GENERATED COEFFICIENT MATRICES.  MATRIX ELEMENTS
C     HAVE A GAUSSIAN DISTRIBUTION WITH MEAN 0 AND STANDARD DEVIATION 1.
C     Q IS TAKEN TO BE THE SYMMETRIC PART OF A RANDOM MATRIX.
C
C     TSYLGDR MAY NOT BE PORTABLE.  THE FUNCTION DXRAND MUST BE PROVIDED
C     THE USER ON SYSTEMS OTHER THAN UNIX.  DXRAND IS A DOUBLE PRECISION
C     PSEUDORANDOM NUMBER GENERATOR WHICH GIVES A UNIFORM DISTRIBUTION I
C     THE INTERVAL [0,1].  DXRAND IS INITIALIZED WITH T=DXRAND(K), K AN
C     INTEGER, K>0.  SUBSEQUENT CALLS ARE T=DXRAND(0).
C
C     SUBROUTINES AND FUNCTIONS CALLED -
C       SYLGD; (LINPACK) DSVDC;
C       RANDM; (MATU) MADD MSUB MULC MSAVE D1NRM; DXRAND
C
C     WRITTEN -
C       26FEB87 M.WETTE, UCSB ECE, SANTA BARBARA, CA 93106 (805)961-4691
C     REVISED -
C       27JAN89 J. GARDINER, OSU CIS, COLUMBUS, OH  43210  (614)292-8658
C       14DEC90 J. GARDINER, OSU CIS, COLUMBUS, OH  43210  (614)292-8658
C
C     -- MAXIMUM N IS 8 --
      INTEGER NAE, NQ, NW, N, IERR, MAXN, NWX, IDMY
      INTEGER NMAX, WRKLEN, MAXSVD
      PARAMETER (NMAX=8, WRKLEN=2*NMAX*NMAX+3*NMAX,MAXSVD=40)
      DOUBLE PRECISION A(NMAX,NMAX), E(NMAX,NMAX), Q(NMAX,NMAX)
      DOUBLE PRECISION WKM1(NMAX,NMAX), WKM2(NMAX,NMAX),
     +                 WKV(WRKLEN)
C
      INTEGER I, J, LL, NTEST, NXN, II, JJ, INDX, JNDX
      DOUBLE PRECISION A1(NMAX,NMAX), E1(NMAX,NMAX), Q1(NMAX,NMAX), 
     +                 WKMX(MAXSVD,MAXSVD)
      DOUBLE PRECISION TMP, NRMR, NRMQ, DPAR(3), WORST, RCOND, RCDSVD
      DOUBLE PRECISION WORSTL, WORSTH, RATIO, DUMY(1)
      DOUBLE PRECISION DXRAND, D1NRM
C
C     -- INITIALIZE --
      MAXN = NMAX
      NAE = NMAX
      NQ = NMAX
      NW = NMAX
      NWX = MAXSVD
      WORST = 0.0D0
      WORSTL = 1.0D100
      WORSTH = 0.0D0
      NTEST = 5
      TMP = DXRAND(13)
      DPAR(1) = 0.0D0
      DPAR(2) = 1.0D2
C
      WRITE(*,90000)
      WRITE(*,90001)
90000 FORMAT("             T        T")
C
90001 FORMAT(" SOLVE  A*X*E  + E*X*A  + Q = 0  USING SYLGD")
      DO 300 N = 1,MAXN
C
      WRITE(*,90005) N
C
90005 FORMAT(/ " N =", I3)
      DO 230 LL = 1,NTEST
C
C        -- GENERATE NORMALLY DIST. RANDOM DATA --
         CALL RANDM(A, NAE, N, N, DPAR, 01)
         CALL RANDM(E, NAE, N, N, DPAR, 01)
         CALL RANDM(Q, NQ, N, N, DPAR, 01)
         DO 20 J = 1,N
            DO 10 I = J,N
               Q(I,J) = (Q(I,J) + Q(J,I)) / 2.0D0
               Q(J,I) = Q(I,J)
   10       CONTINUE
   20    CONTINUE
C
C        -- SAVE A COPY --
         CALL MSAVE(NAE, NAE, N, N, A, A1)
         CALL MSAVE(NAE, NAE, N, N, E, E1)
         CALL MSAVE(NQ, NQ, N, N, Q, Q1)
C
C        -- COMPUTE NORM OF Q --
         NRMQ = D1NRM(NQ, N, N, Q)
C
C        -- COMPUTE SOLUTION, ESTIMATE CONDITION IF SVD COMPUTABLE --
         NXN = N*N
         IF (NXN .LE. MAXSVD) THEN
            IERR = 1
         ELSE
            IERR = 0
         ENDIF
         CALL SYLGD(NAE, NQ, N, A, E, Q, WKV, IERR, RCOND)
         IF (IERR .NE. 0) THEN
            WRITE(*,90003) LL, IERR
90003       FORMAT(" AT ITERATION", I2, " ERROR IN SYLGD, IERR=", I2)
         ENDIF
C
C        -- COMPUTE RESIDUAL --
         CALL MULC(NAE, NQ, NW, N, N, N, A1, Q, WKM1)
         CALL TRNATA(NAE, N, A1)
         CALL MULC(NW, NAE, NW, N, N, N, WKM1, A1, WKM2)
         CALL TRNATA(NAE, N, A1)
         CALL MADD(NQ, NW, NQ, N, N, Q1, WKM2, Q1)
         CALL MULC(NAE, NQ, NW, N, N, N, E1, Q, WKM1)
         CALL TRNATA(NAE, N, E1)
         CALL MULC(NW, NAE, NW, N, N, N, WKM1, E1, WKM2)
         CALL TRNATA(NAE, N, E1)
         CALL MSUB(NQ, NW, NQ, N, N, Q1, WKM2, Q1)
C
C        -- COMPUTE NORM OF RESIDUAL --
         NRMR = D1NRM(NQ, N, N, Q1)
         TMP = NRMR/NRMQ
         IF (TMP .GT. WORST) WORST = TMP
C
C        -- COMPUTE REAL CONDITION NUMBER
         IF (NXN .LE. MAXSVD) THEN
            DO 140 J = 1,N
               DO 130 JJ = 1,N
                  DO 120 I = 1,N
                     DO 110 II = 1,N
                        INDX = N*(I-1) + II
                        JNDX = N*(J-1) + JJ
                        WKMX(INDX,JNDX) = A1(II,JJ)*A1(I,J)
     *                                    - E1(II,JJ)*E1(I,J)
  110                CONTINUE
  120             CONTINUE
  130          CONTINUE
  140       CONTINUE
            IDMY = 1
            CALL DSVDC(WKMX, NWX, NXN, NXN, WKV, WKV(NXN+1), DUMY, IDMY,
     *                 DUMY, IDMY, WKM1, 00, IERR)
            IF (IERR .NE. 0) THEN
               WRITE(*,90006) LL
90006          FORMAT(" ITERATION", I2, " SVD FAILED")
               RCDSVD = 0.0D0
            ELSE
               RCDSVD = WKV(NXN) / WKV(1)
            ENDIF
            RATIO = RCOND / RCDSVD
            IF (RATIO .LT. WORSTL) WORSTL = RATIO
            IF (RATIO .GT. WORSTH) WORSTH = RATIO
         ENDIF
C
C        -- PRINT RESULTS --
         IF (NXN .LE. MAXSVD) THEN
            WRITE(*,90002) LL, TMP, RCOND, RATIO
         ELSE
            WRITE(*,90007) LL, TMP
         ENDIF
90002    FORMAT(1X, I2, '  (NRM RESID)/(NRM Q)=', E10.3,          '  RCO
     +ND(EST)=', E10.3, ' EST/TRUE=', E10.3)
C
C
90007    FORMAT(1X, I2, '  (NRM RESID)/(NRM Q)=', E10.3)
  230 CONTINUE
  300 CONTINUE
C
      WRITE(*,90004) WORST
90004 FORMAT(/ " WORST CASE RESIDUAL IS", E10.3)
      WRITE(*,90008) WORSTL, WORSTH
C
90008 FORMAT(' WORST CASE RCOND RATIOS (EST/TRUE) ARE', E10.3,       ' (
     +LOW) AND', E10.3, ' (HIGH)')
      STOP
C --- LAST LINE OF TSYLGDR ---
      END
