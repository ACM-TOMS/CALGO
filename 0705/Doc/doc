C      ALGORITHM 705, COLLECTED ALGORITHMS FROM ACM.
C      THIS WORK PUBLISHED IN TRANSACTIONS ON MATHEMATICAL SOFTWARE,
C      VOL. 18, NO. 2, PP. 232-238.
README - software for solving Sylvester equations - double precision version
 
    sylg    solves   A*X*B' + C*X*D' = E
    sylgc   solves   A*X*E' + E*X*A' + Q = 0
    sylgd   solves   A*X*A' - E*X*E' + Q = 0
 
For the sylgx routines, we got (NRM RESID)/(NRM Q) to be about 1.0d-14 in
double precision (acc. = about 17 digits).  On a UNIX(tm) system one can
testa routine by "make"ing  the test routines (e.g. "make tsylgc").
 
Installation:  The programs driver1.f, driver2.f, driver3.f are
recommended as simple installation tests.  They are set up to run a
small number of example problems. 

Further testing:  The programs driver1.f, driver2.f, driver3.f will run
a larger set of tests if two lines are commented out and two others
uncommented, as noted in the code.  Programs driver4.f .. driver9.f are
also provided for those who wish to do more extensive testing. 

17Apr90  J. Gardiner, OSU CIS, Columbus, OH 43210  (614)881-4135
13Dec90  J. Gardiner, OSU CIS, Columbus, OH 43210  (614)881-4135
12Jan01  Tim Hopkins

------------------------------------------------------------------------

driver1.f         test the subroutine sylg using predefined problems
		Calls: sylg msave d1nrm msub mulc trnata; (linpack)
		dsvdc

driver2.f        test the subroutine sylgc using predefined problems
		Calls: sylgc madd mulc trnata d1nrm msave; (linpack)
		dsvdc

driver3.f        test the subroutine sylgd using predefined problems
		Calls: sylgd madd mulc trnata d1nrm msave; (linpack)
		dsvdc

driver4.f        test the subroutine sylg using matrices from a file
(data4)		Calls: sylg msave d1nrm msub mulc trnata; (linpack)
		dsvdc

driver5.f       test the subroutine sylgc using matrices from a file
(data5)		Calls: sylgc madd mulc trnata d1nrm msave; (linpack)
		dsvdc

driver6.f       test the subroutine sylgd using matrices from a file
(data6)		Calls: sylgd madd mulc trnata d1nrm msave; (linpack)
		dsvdc

driver7.f       test the subroutine sylg using randomly generated problems
		Calls: sylg msave d1nrm msub mulc trnata; (linpack)
		dsvdc

driver8.f       test the subroutine sylgc using randomly generated problems
		Calls: sylgc madd mulc trnata d1nrm msave; (linpack)
		dsvdc

driver9.f       test the subroutine sylgd using randomly generated problems
		Calls: sylgd madd mulc trnata d1nrm msave; (linpack)
		dsvdc

res1..res9	Sample output from each of the above drivers.
 

Routine descriptions
====================

bkcon           solve  S*Y*T' + T*Y*S' + R = 0
                Calls: (linpack) dgeco dgesl
 
bkdis           solve  S*Y*S' - T*Y*T' + R = 0
                Calls: (linpack) dgeco dgesl
 
bkhs2           solve P*Y*R' + S*Y*T' = F where P=up-Hess, R=up-tri, S=up-tri,
                T=quasi-up-tri
                Calls: hsco hsfa hssl; (linpack) ddot
 
d1nrm           compute 1-norm of a matrix
                Calls: -
 
hsco            Hessenberg version of Linpack dgeco
                Calls: hsfa; (linpack) daxpy ddot dscal dasum
 
hsfa            Hessenberg version of Linpack dgefa
                Calls: (linpack) daxpy dscal idamax
 
hssl            Hessenberg version of Linpack dgesl
                Calls: (linpack) daxpy ddot
 
ktran           transform an upper-Hessenberg to a matrix orthogonally
                similar to its transpose which is also upper-Hessenberg
                Calls: -
 
madd            adds two matrices
                Calls: -
 
mqfwo           computes the symmetric product x'sx
                Calls: mula
 
msave           copies a matrix
                Calls: -
 
mscale          scales a matrix by a scalar
                Calls: -
 
msub            subtracts two matrices
                Calls: -
 
mula            multiplies two matrices, product overwrites first
                Calls: -
 
mulb            multiplies two matrices, product overwrites second
                Calls: -
 
mulc            multiplies two matrices
                Calls: -
 
qzhesg          transform A to upper-Hessenberg, B to upper-triangular
                Calls: -
 
qzitg           transform A to quasi-upper-triangular keeping B upper-triangular
                Calls: (eispack) epslon
 
qzvalg          order off-diagonal elements of A to correspond to conjugate
                generalized eigenvalues
                Calls: -
 
sepg            computes approximately inf(1-norm(P*Y*R'+S*Y*T')/1-norm(Y))
                Calls: bkhs2 mscale ktran d1nrm
 
sepgc           computes approximately inf(1-norm(S*Y*T'+T*Y*S')/1-norm(Y))
                Calls: bkcon mscale ktran d1nrm
 
sepgd           computes approximately inf(1-norm(S*Y*S'-T*Y*T')/1-norm(Y))
                Calls: bkdis mscale ktran d1nrm
 
sylg            solve  A*X*B' + C*X*D' = E where A,B,C,D are square
                Calls: qzhesg qzitg qzvalg sepg bkhs2 mula mulb trnata
 
sylgc           solve  A*X*E' + E*X*A' + Q = 0  where Q is symmetric
                Calls: qzhesg qzitg qzvalg sepgc bkcon mqfwo mulb
 
sylgd           solve  A*X*A' - E*X*E' + Q = 0  where Q is symmetric
                Calls: qzhesg qzitg qzvalg sepgd bkdis mqfwo mulb

--- last line of README ---
