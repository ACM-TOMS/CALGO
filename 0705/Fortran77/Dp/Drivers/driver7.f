C--**--CH3666--705--C:GEN--8:6:2000
C--**--CH2915--705--P:LAP--28:10:1999
C--**--CH2904--705--P:RW--28:10:1999
C--**--CH2899--705--P:R--28:10:1999
C--**--CH2890--705--B:MA--28:10:1999
C--**--CH2868--705--A:H--28:10:1999
C     -- PROGRAM TSYLGR --
C
C     THIS PROGRAM TESTS THE SOFTWARE FOR SOLVING THE GENERAL
C     SYLVESTER EQUATION
C
C        A * X * B' +  C * X * D' =  E    (' DENOTES TRANSPOSE)
C
C     USING RANDOMLY GENERATED COEFFICIENT MATRICES.  MATRIX ELEMENTS
C     HAVE A GAUSSIAN DISTRIBUTION WITH MEAN 0 AND STANDARD DEVIATION 1.
C
C     TSYLGR MAY NOT BE PORTABLE. THE FUNCTION DXRAND MUST BE PROVIDED B
C     THE USER ON SYSTEMS OTHER THAN UNIX.  DXRAND IS A DOUBLE PRECISION
C     PSEUDORANDOM NUMBER GENERATOR WHICH GIVES A UNIFORM DISTRIBUTION I
C     THE INTERVAL [0,1].  DXRAND IS INITIALIZED WITH T=DXRAND(K), K AN
C     INTEGER, K>0.  SUBSEQUENT CALLS ARE T=DXRAND(0).
C
C     SUBROUTINES AND FUNCTIONS CALLED -
C       SYLG; (LINPACK) DSVDC;
C       RANDM; (MATU) MSAVE, D1NRM, MSUB, MULC, TRNATA; DXRAND
C
C     WRITTEN -
C       18FEB87 M.WETTE, UCSB ECE, SANTA BARBARA, CA 93106 (805)961-4691
C     MODIFIED -
C       28NOV88 J. GARDINER, OSU CIS, COLUMBUS, OH  43210  (614)292-8658
C       12DEC90 J. GARDINER, OSU CIS, COLUMBUS, OH  43210  (614)292-8658
C
C     -- MAXIMUM M IS 9, MAXIMUM N IS 8 --
      INTEGER NAC, NBD, NE, NW, M, N, IERR
      INTEGER MMAX, NMAX, MNMAX, WRKLEN, MAXSVD
      PARAMETER (MMAX=9, NMAX=8, MNMAX=9, MAXSVD=40,
     +  WRKLEN = 2*MMAX*MMAX+NMAX*NMAX+NMAX*MMAX+7*MMAX+MNMAX*MNMAX)
      DOUBLE PRECISION A0(MMAX,MMAX), B0(NMAX,NMAX), C0(MMAX,MMAX),
     +                 D0(NMAX,NMAX), E0(MMAX,NMAX)
      DOUBLE PRECISION A1(MMAX,MMAX), B1(NMAX,NMAX), C1(MMAX,MMAX),
     +                 D1(NMAX,NMAX), E1(MMAX,NMAX)
      DOUBLE PRECISION WKM1(MMAX,NMAX), WKM2(MMAX,NMAX), 
     +                 WRKSVD(MAXSVD,MAXSVD), WKV(WRKLEN)
      INTEGER IWKV(2*MMAX)
C
      INTEGER I, J, LL, II, JJ, INDX, JNDX, MXN, NTEST
      INTEGER IDMY
      DOUBLE PRECISION TMP, NRMR, NRME, DPAR(3), WORST, RCOND, RCDSVD
      DOUBLE PRECISION DUMY(1), WORSTL, WORSTH, RATIO
      DOUBLE PRECISION DXRAND, D1NRM
C
C     -- INITIALIZE --
      NAC = MMAX
      NBD = NMAX
      NE = MMAX
      NW=MMAX
      WORST = 0.0D0
      WORSTL = 1.0D100
      WORSTH = 0.0D0
      NTEST = 5
      TMP = DXRAND(13)
      DPAR(1) = 0.0D0
      DPAR(2) = 1.0D2
C
      WRITE(*,90000)
      WRITE(*,90001)
90000 FORMAT("             T        T")
C
90001 FORMAT(" SOLVE  A*X*B  + C*X*D  = E  USING SYLG")
      DO 320 M = 1,NAC
      DO 310 N = 1,NBD
C
      WRITE(*,90005) M, N
C
90005 FORMAT(/ " M =", I3, "   N =", I3)
      DO 230 LL = 1,NTEST
C
C        -- GENERATE NORMALLY DIST. RANDOM DATA --
         CALL RANDM(A0, NAC, M, M, DPAR, 01)
         CALL RANDM(B0, NBD, N, N, DPAR, 01)
         CALL RANDM(C0, NAC, M, M, DPAR, 01)
         CALL RANDM(D0, NBD, N, N, DPAR, 01)
         CALL RANDM(E0, NE, M, N, DPAR, 01)
C
C        -- SAVE A COPY --
         CALL MSAVE(NAC, NAC, M, M, A0, A1)
         CALL MSAVE(NAC, NAC, M, M, C0, C1)
         CALL MSAVE(NBD, NBD, N, N, B0, B1)
         CALL MSAVE(NBD, NBD, N, N, D0, D1)
         CALL MSAVE(NE, NE, M, N, E0, E1)
C
C        -- COMPUTE NORM OF E --
         NRME = D1NRM(NE, M, N, E0)
C
C        -- COMPUTE SOLUTION, ESTIMATE CONDITION IF SVD COMPUTABLE --
         MXN = M*N
         IF (MXN .LE. MAXSVD) THEN
            IERR = 1
         ELSE
            IERR = 0
         ENDIF
         CALL SYLG(NAC, NBD, NE, M, N, A0, B0, C0, D0, E0, WKV, IWKV,
     *             IERR, RCOND)
         IF (IERR .NE. 0) THEN
            WRITE(*,90003) LL, IERR
90003       FORMAT(" AT ITERATION", I2, " ERROR IN SYLG, IERR=", I2)
         ENDIF
C
C        -- COMPUTE RESIDUAL --
         CALL MULC(NAC, NE, NW, M, M, N, A1, E0, WKM1)
         CALL TRNATA(NBD, N, B1)
         CALL MULC(NW, NBD, NE, M, N, N, WKM1, B1, WKM2)
         CALL TRNATA(NBD, N, B1)
         CALL MSUB(NE, NE, NE, M, N, E1, WKM2, E1)
         CALL MULC(NAC, NE, NW, M, M, N, C1, E0, WKM1)
         CALL TRNATA(NBD, N, D1)
         CALL MULC(NW, NBD, NE, M, N, N, WKM1, D1, WKM2)
         CALL TRNATA(NBD, N, D1)
         CALL MSUB(NE, NE, NE, M, N, E1, WKM2, E1)
C
C        -- COMPUTE NORM OF RESIDUAL --
         NRMR = D1NRM(NE, M, N, E1)
         TMP = NRMR/NRME
         IF (TMP .GT. WORST) WORST = TMP
C
C        -- COMPUTE REAL CONDITION NUMBER --
         IF (MXN .LE. MAXSVD) THEN
            DO 40 J = 1,N
               DO 30 JJ = 1,M
                  DO 20 I = 1,N
                     DO 10 II = 1,M
                        INDX = M*(I-1) + II
                        JNDX = M*(J-1) + JJ
                        WRKSVD(INDX,JNDX) = A1(II,JJ)*B1(I,J)
     &                                    + C1(II,JJ)*D1(I,J)
   10                CONTINUE
   20             CONTINUE
   30          CONTINUE
   40       CONTINUE
            IDMY = 1
            CALL DSVDC(WRKSVD, MAXSVD, MXN, MXN, WKV, WKV(MXN+1), DUMY,
     *                 IDMY, DUMY, IDMY, WKM1, 00, IERR)
            IF (IERR .NE. 0) THEN
               WRITE(*,90006) LL
90006          FORMAT(" ITERATION", I2, " SVD FAILED")
               RCDSVD = 0.0D0
            ELSE
               RCDSVD = WKV(MXN) / WKV(1)
            ENDIF
            RATIO = RCOND / RCDSVD
            IF (RATIO .LT. WORSTL) WORSTL = RATIO
            IF (RATIO .GT. WORSTH) WORSTH = RATIO
         ENDIF
C
C        -- PRINT RESULTS --
         IF (MXN .LE. MAXSVD) THEN
            WRITE(*,90002) LL, TMP, RCOND, RATIO
         ELSE
            WRITE(*,90007) LL, TMP
         ENDIF
90002    FORMAT(1X, I2, '  (NRM RESID)/(NRM E)=', E10.3,          '  RCO
     +ND(EST)=', E10.3, ' EST/TRUE=', E10.3)
C
90007    FORMAT(1X, I2, '  (NRM RESID)/(NRM E)=', E10.3)
  230 CONTINUE
C
  310 CONTINUE
  320 CONTINUE
C
      WRITE(*,90004) WORST
90004 FORMAT(/ " WORST CASE RESIDUAL IS", E10.3)
      WRITE(*,90008) WORSTL, WORSTH
C
90008 FORMAT(' WORST CASE RCOND RATIOS (EST/TRUE) ARE', E10.3,       ' (
     +LOW) AND', E10.3, ' (HIGH)')
      STOP
C --- LAST LINE OF TSYLGR ---
      END
