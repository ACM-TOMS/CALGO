
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00704_legendre_pnm_vary_04 : public TestCaseReal
    {
    public:
      TestCase_case_00704_legendre_pnm_vary_04() { }
      virtual ~TestCase_case_00704_legendre_pnm_vary_04() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00704_legendre_pnm_vary_04");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const INT32   n  = -((10 - k) * 13);
          const INT32   m  = +((10 - k) * 11);
          data[k] = ef::legendre_p(n, m, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-1.3784390487181181699272648975189311619781467024683926046150982589603726097345535591459315102860686050427147675089423468673875387473983332130330630622771919872333272458854719886487126156566713286115803987651756076894852705779651180735603185420779300723420669219061200430875498161750659685477101760078488771751202046160538323052647877318617444010083663600103503229626819237388381093044480945262358984263e131"),
           e_float("1.097472460262716427351458483110901009049145655775370876687387213413591618975778403577303733674966568216561307922220527566115721635161275431794481449126283792465687583949211488681755492650052917866639055134326503948486775669580823056745401911637548212218828985871194112615755124899426117803016269788310818955873142349142645504854916890132196330693355107449958391868664425138691676544073288267597730315e186"),
           e_float("-1.3128104599746684317386489589321178895906942148434750542580935755275896171786728311903992555607074623335092622775064320116538832787322076350159053225929000422101103447887730630177011101196457589472408162812375819159944363475465359712615922059944960012513690468477972864018731332199401112652718728142540732604057278192198358335845793192306492320164091284643967746452179588247198072496309936976041876592e169"),
           e_float("-2.0315581616831112769839670994597991088148387628510056064842091384718791694354327765259047609983983882672336261900395843805296847742244480624503839024843044730018676292526622593448808483907647932983437562926308007808530081427048026138958346211896458511031558890296988705093234742445257886611084772066955245055171422897740985565709321034339181256954398172510684245581087489996848225612055484617639201545e144"),
           e_float("1.2744973120359993103673676378484280012748744135990745530558688686434359570356180797922328118625398365387225420309521084693621197171767456428458034784181063399756807205389843706216089948537048802485600124801777628206405337877882609299884590312870175446033875640576489137208106232201811278652459911867645355296444120431780431559251508486400453349543241347125909411567487063499873609287894853164497752987e119"),
           e_float("-1.0415745397457157633518696720630834880066265110984864292530063876647475652007528959879273796658025513283916880194462399430471229704858035747128427038538469020065036378805476643727056748041383607894878921633911766805305197306041862511733287895341280345636857961510201601933874299385131379523336992074847875049605789030108733185499250696288564302403258472081885430847593890026411626262199916755315539044e94"),
           e_float("2.0792464367791690159993305837836631265543133900247840005339196837124068775793599678788265991114232856680167143598518924736883964691287759598051180751485140267000169833565407349295762619348735500144506677363186525677520445187016542367966276024686204990773971343273134060333218686768820144022674659083962834136720686607913482972472993704405234684137555686961323947034884581123247535931160120399336505225e71"),
           e_float("-1.6381100235824918933810467343083905719027935213271393606657370289681389183955178449766330133703443968217458330952594556721442319954418035463796636918395945683420428490114652887736388664251052073496913131290686052151243895706603498556989385582587237840302586346205559517519804608555522697457213761275726351596981976744108733971662663782908455679217182322603387337219454475420067750892161289064993308224e49"),
           e_float("1.402321793378229019615680811556822050341033368529337161059083589973613885926934690944611263480502061131739457101724081225418202835130063278119923599847457335331510923903823406113334839373327515074262504754501894705254909213476176521549591978402428981993274286267227751481171944241542160935504248463823864746748446656643637684203825512372889323652262820164502698810962759205853061376316324352610873507e28"),
           e_float("-1.0469042745381793761192385481601496196807621558745374715286681631193512465941024343108660419542306908136609441606371884987300554457757577859672111176716702794476263515130941301106847563279181190606438370881607950114773978237656837785890719012362372097256287281300086876490303222496703138950512533192413859102263678144546814353027496752784255552742707980400089245275482406392882331345163988653476001228e9"),
           e_float("1."),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00704_legendre_pnm_vary_04(const bool b_write_output)
    {
      return TestCase_case_00704_legendre_pnm_vary_04().execute(b_write_output);
    }
  }
}
