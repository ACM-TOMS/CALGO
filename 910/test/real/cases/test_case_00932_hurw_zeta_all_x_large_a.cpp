
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00932_hurw_zeta_all_x_large_a : public TestCaseReal
    {
    public:
      TestCase_case_00932_hurw_zeta_all_x_large_a() { }
      virtual ~TestCase_case_00932_hurw_zeta_all_x_large_a() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00932_hurw_zeta_all_x_large_a");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::hurwitz_zeta(ef::pi() * ((10 * k) + 1), ef::two_third() + 1000);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.755213895387479299942654382321275151219592383820099151242738075010031306242944683203143408341204244680576511039231599979333971651772868090029896173928130586679696483646090577142899777047259838746440273233265579538711123542284926356755791087752593903780592987172277408826948951177937037327827058162323623408812616568146561139996982284953644044400338702282235534572101891926426983922213155594793951524e-7"),
           e_float("6.2980025905492097243878372296993644672594232171845151985128791005394886372295053642850893251220910612778631344564912978720384623170510097048318462009107936102753094797108571734353642186770417238056100159716969172685073616223182131973443933820431451665478294026558324734380396508561017246909628782098804699358382204940561245784672735810916165856133280629495018805718532043767486197650610015601700712936e-103"),
           e_float("1.8287184379468552657032105482852825958326676275779051506553145305669190465903854795638584466981737848848181643601849360542628097846228150130005293124347708592219272998401295190656613990730571980031741304140481690453538037489240795311061915833454663929425878368124245672665050455462158803564999484607363225029500370350264668502176427335906930300428758813418403417506373003530746150250976427370265137685e-197"),
           e_float("6.9295965970032108438677034398062991260459338474846423707416294216884557912768574751528022391660815592142486301003685956439994671243284290508497161060286257950249508822008695766788171622291886972770188285267984532559819076508220854841596209741057815730998034876225146148747819039907930737913667737182147964597609075802995308242453995547871635905119453450163090800432429781512187791673766326318768190357e-292"),
           e_float("2.9376964471946766495210190814903470557205258041218671410914393429290502575439518467063837734528195013972990329151238319126131798427337571249178239174012970702027647128292025207808127808943169010133324607757492718513295198847855006072352267189924092625255525779469206666336523923322030309750556403442954431824068992636563327099081472233365612333966143270302693762037603831022246026386040751681294599801e-386"),
           e_float("1.3253720662114856920327901667714551787407470126955310171865819448847979196997538771350126426147895223306298309455993079742129016763746196312655335357627398722929303999673737419398555877593754213302784153657507018719253966565184900785854295654052946585088142593990358259935782443432956691402392684155745423665326427705552541510959994122088754780662397600837121724816037982992658051159033104900342862085e-480"),
           e_float("6.2212631420504620601208395607194449301172931146999531674387874496919192917275955172289871426747747251242909692037527542799115720328407094824976070310975782247245144269818998480532820194674348921476110986547745149036649681442488660535336914720922970585947157971685979344581734084790257463856042228183287111615774989111255170681467623971172904979265647168795562393585416832129636744107302418774771945429e-575"),
           e_float("3.001518410128244679120016639063410894577197017922156228444840944339038371378650581271865075852602237451924418589345711634412828067206392015511741718278816416103846224000954305952033596929019267982629046203690641995831559850952781240869685594333794786951837472897579830180488038826018093165464159236883484460807315452984911674865809773697654916779988463996405329042077919509704342423365666452077640943e-669"),
           e_float("1.4775732889610112942704206087279892582061025529687471669174900031989603553931836540879087153768064671351644627295580130014618786838241202343111468823140447800879717750621714246895845407388293653600089130504601780542926377536410876715664537016217148110531695958155992046729836555492083815892249467076398063685885997633009140440317111835283723147585124870484295516076708893990026743158017236840292788322e-763"),
           e_float("7.3866055033395557675840055115741371194069024504880141956995778655995287621797661728563275219292153357725671899833199289987523803405276929148477186789111222785791566094836768547589096875675307232422085542680069909599983316391735359322379817784528308489909099391073979564209668062656803882251462908272008486345855186408219495506745027106965877719152261091623521995838487307764202761315441092957788687293e-858"),
           e_float("3.7378248548497691736279251795639138797313242496460308004839778704064897453655038550126379535201084278406034789187636006562676373889712373009364491559383173248323684972784959287290715005494473797489738479474895876342349426906684995686544311165358482513078115155767861848407633063558072573074032797794999040956453227031207359195015460448912080595805848537093237113217933548718567013093813351039968920105e-952"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00932_hurw_zeta_all_x_large_a(const bool b_write_output)
    {
      return TestCase_case_00932_hurw_zeta_all_x_large_a().execute(b_write_output);
    }
  }
}
