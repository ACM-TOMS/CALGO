
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00606_legendre_pvu_vary_06 : public TestCaseReal
    {
    public:
      TestCase_case_00606_legendre_pvu_vary_06() { }
      virtual ~TestCase_case_00606_legendre_pvu_vary_06() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00606_legendre_pvu_vary_06");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -127 - sqrt_1_3;
          const e_float u  = -127 - sqrt_1_5;
          data[k] = ef::legendre_p(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.040913747170790901414073454318307573949094722038868153911398141562792198092855304742471275898451792386068361900260596502608343704979935112408918327228007741703104994679735544248447685480124814267919923827585954795458320554093864292664978413605747324190099783690520451767021007144854447212298841738594521512917507310988902145076290549870890180056545800946280967528197071402377472373114100184042924024e-128"),
           e_float("1.1292414515333091723195339213731217626869924136007776105343534999074397412140663085935149173741703564423356275501143045090718927720056224547525386529348902214975180200410401829161993077312557937669863642582614002376714722313368807102699701230061414388942167651121767358224323297784294518981724545959117285962499507951616530466150309366844654561594068738565393652991692832456111212044201948750961740848e-224"),
           e_float("3.5341421317359169199125599819804888393002967419286196330279908283920283320202975738025017658859896357453853534647063848972290676364854146795778845568366310411007540781520330952493268329148204849075565653093147456375086223152489085970756863077518511354529137043991624519501607314485031630524770457358605495423497549947220306810048542621232978860667669135974533138933187145974590803943031643715465193677e-240"),
           e_float("1.556307864904312544848837684306038985716658030690474862774720115278561742844559514458431342227882520864632932399960806947362200638610939282397830337152399307158632580681586522562469707481325020372224797217802851274420242989359258832443165105918185809173471412056353328387219711828059299206137100645896034438369938968904602181708558517738819493631140341157257817541699740176327138902050912964123140667e-247"),
           e_float("4.2135287168195229361714884591199981958109705895144150672923270202837705889115891907495574625249390772824572598343775893044228558060825115584088465771254876788677982808038757691448059744706332715059306554888775550773821971621960769361060312362777472534881729580038258740557062935849830545194032192108804917006549721109022017161711836114062558086643216778219383638357543623474398843482529588070913982723e-251"),
           e_float("2.1440220531503304131651601269961316946369540365894405766326373783533015945462034663237392411529333598460631785876484117902937831664503288403727023358451580148002526712427807372433997077809801308034730921227671505939524475966353958451191421089137994139192317953856651518229063618170067208411185055338533607422875051028583216726998730100428618434907541725044560124768270636523192310064292584180405321059e-252"),
           e_float("5.4861145402157342170048323167407517990345293197630451094423210258541970530067935378956430208654398786867310225466401221514694625322038870586780583011753982453477241857908904540828043768767018046645536572776849889391366714643328862268327872307696347498747619359853096930397576966461435739085758417602469101233165431314805394262694066939715769848030657489894276811414443394015902855523317834456051564046e-254"),
           e_float("7.6490162587294758389394056839488227425279950251941579239019237159942717954944292679619172688280113300118355160801925759282012971754239086079364222959281702951525296871472100088524939571349155391490692692625074990717419022103768223745433784623283123471008429004635658936599705256431547282479227923994924131596666079075192755540898636120765863613360838764445402031631741022851583795722402723376587631311e-258"),
           e_float("2.2562509079406628533303454950344434334458129101845294120135745583296735115580025956410876821486310903604517297769371671147702887159741111261137031150619305308554419940529703573476324966076086499319811278516273070923225293537999764364727209353042030638048862244539675049934958664674250429474307089070794561172696303935994953508419643863820627619487984946351073854892998047170731012047529803175165529235e-265"),
           e_float("5.3016367939012658832355100527409713305577946316302759726147674693390106268392136686100085061856743120166732765292785294305508839051791016304575017433893318865351123258488686180918450544749649131961545005226042468187842709469689136538432779582441529239449871292420131853075751912312854146161340958552990143719197479599409046111167241297697618365569968944846794328155818315015129591430750814088953116766e-281"),
           e_float("4.6020669422341280733700257433597517427308736528085438015845959297986475489896856727602782349265813102563782232019749709175155146921290067515270560090590351473725553623113999270265032999798289604140410167457083408153733905672994119269327267456751837101525267686819301956833581121359896655867353761799158021528907131260513887530407002144745537117930337531177244627776211532742406093052527598314328939697e-377"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00606_legendre_pvu_vary_06(const bool b_write_output)
    {
      return TestCase_case_00606_legendre_pvu_vary_06().execute(b_write_output);
    }
  }
}
