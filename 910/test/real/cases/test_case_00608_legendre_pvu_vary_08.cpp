
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00608_legendre_pvu_vary_08 : public TestCaseReal
    {
    public:
      TestCase_case_00608_legendre_pvu_vary_08() { }
      virtual ~TestCase_case_00608_legendre_pvu_vary_08() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00608_legendre_pvu_vary_08");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -127 - sqrt_1_3;
          const e_float u  = +127 + sqrt_1_5;
          data[k] = ef::legendre_p(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-5.2980435350473313800285801664334929332537444001148251424110106161689716059061205765181354599687683002207304349101388074177434017189398384468008024578785897934172467639315780052552406606018371687523620242531293495293332573600898833080397443931398819053925485034674967474387554056455452381215434606352240616045031757140744682539977265507638225278324959726199667273835668902570501574023567189752247050673e373"),
           e_float("-5.7476139479036709145389803521029528283340847200059196588667909311451997745784831984046891264374270506588528747862502932507751406877009433350473097869450091758648704366749944544297332133827378874867146009426020346993042004411421278907510005968332951976369730253073619322214989019938810056860241923581943084742517590373456115467687034700502822939293518180718599308343888027797018819172491346820918020756e277"),
           e_float("-1.7988079150528952074955660167990962016929505808250012235962491560586576979736308062679190649024418219447161134077660143971139339615584959238705281915637396148170415432440634471073460261179567276402833757657425409910060920848305983149770539777311572216228220506708467148609472864535196957828772740472264748234365435208616424027165625497603051080614057041332012641599646129980009632629238243473862864874e262"),
           e_float("-7.9212968846097008063301099690482453397451151347702641967029136675380702157619593589783987163719419897432559184933270167977143483382404518050340354419546826095903989052320991388562806530664219800160779924520666483816046045623494820496167572115984407774274364194010168730633923191353738015283499164810263224729340043692571943841106426578254724405299202895547469571351994369583101258588244507820691507617e254"),
           e_float("-2.147439526021506401305313597670290621050495556064166113450701702161615173843020667585395439899039380342670879175182415802734062092984866694482770770958756205243695306670837840206827963049492840153578095967266932950169698653304616208646510179757322763091457891066253460531518130845721570305649739159413093068160710175770457048248708675556030869400493638398927324775769311833118298668023369070998803911e251"),
           e_float("-2.3582600075484786278065845603975610101992969496564530017675127110481717656851678731620473070941624023755240512188417636094500610179128518304137378271148902699357500357643139294338736328134571973555044029244987388558056053425854148981669828005046527734055726809282171314968153880628793319145742359040616379187101099498545194246978649805474934847375482602763134077043893110916605554771271629250746324014e250"),
           e_float("-2.1819985367262423565456104101176775035360785294777401054318702995377297758742926628480161621904435054289707959805032778874564204999811961123641403093528678546957725397016791766278759006760045104385970688771649526949326576291538408414785218905926199421238886184627717051943936663603026961205250416692409178041131906860957632202418628307128696867795226274027599933434850157380547147266572768030894325457e251"),
           e_float("-8.0491103723612669417117147882483131922802600590655414567991919313279159815324069403362495038677198984837168755655056988391993811467673385020617723403596131207359015417857830329449922325475072213981711537257678222551181658654957678419513767120178035546731264054802541064636818060683049233441808618936649599735157833859954148631809983967432406951164968051333398258605274283724783300047747261052828777191e254"),
           e_float("-1.8278324443427279869248101387267439899468408356038303912274261244799376882486562139775904145045706644368810907887698949136251462164244060470859452334205169387448758490648362431924730872149853621924218391918970608010269316163697801411889555761173072790825318759795944893795084848020412416291406639526658223232626994690360747569235601522113198210021854117125314519993787328159142885064178927657918523376e262"),
           e_float("-5.8403541387720638855769929367291923334245577256113887376472072371644737209135804730536560281155401138281111282056571627982289442663584296004628736891213233437577702027367058814206471890883592119220729589165315130284427414222928985229493476126158646495761909112154538364673479647378190692218358494187417153433932477030445637539637141169134616054770692448654533928447146043954660424715435576666900663678e277"),
           e_float("-5.3835297164650224735259440530808443395139720697785621739983337252099802264373597150174032750838329537091581571049106631878386246727340510372204711596810990396351261140338637302174544180323389654714402502288123944624740183177391209017160090852257421084448578759060065963495880482639021888688928005063200650508299451550665735015562813881422935280894893422803018265774375258372815827601268757688236770736e373"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00608_legendre_pvu_vary_08(const bool b_write_output)
    {
      return TestCase_case_00608_legendre_pvu_vary_08().execute(b_write_output);
    }
  }
}
