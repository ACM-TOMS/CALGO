
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00544_bessel_yv_order4_v : public TestCaseReal
    {
    public:
      TestCase_case_00544_bessel_yv_order4_v() { }
      virtual ~TestCase_case_00544_bessel_yv_order4_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00544_bessel_yv_order4_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_y(ef::euler_gamma() + 10000, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-8.9973663486769910117339120196221581003532611830726185792256119271873749295700840485384123388858077708628964096521668458593921681487158452565273439416985783265079714083256779186137450531602607658339621737156422832840546770425428747571825507710902559308710647252889785485462508117324062047243420977815632811052042727010375350223184388595653009409458477584637462094224996312783627259789371700727676739161e33695"),
           e_float("-5.1265980174155545199537796848050134356641866392651931292784393754935175773763580284708217894395020276068540764715920327789403205248985978231107349508979751689696648054879891547846216986510685229856137850566680332484522077397421213569989181152501044031017829503342975089802778494421979960481755451050511919447180263877509722863018871968285375360754283294900997292431724874986496809908391038856092931298e32495"),
           e_float("-1.9929956078675264120778991762504036631924588846786105459884024519428866932301665227815787346207722184250238044758329655868250897860530418882417497370597563143684006832299808288722780011921970803353338032994878897601563384393860253985826631205391076645929289940003986305964445593979101411510224877152873110081778674005360033836728566478716927577712596555893650585486186526284758722775750092350009400745e17489"),
           e_float("-3.0829922885072275563925098330731634622554651300567208285976098102277568790776241036801957168195678916641343208579205312501035815698978721140071366594889936859353865164101216320729931625118560549921334179338251431795198732356556130256321070535253172678465718210513054729587297873987774980810357930915890819331003026191534460695640162530162857946695674487303284249382385721327260558114743156558510692799e5313"),
           e_float("-0.0041792795921393715998451487639622825952026806016304232940438283130075742042141214051953387758312078576051431449894805596796181045971328102788331915967225220331676986340573665820873100717738613355316772080193666325715541818348366100215797685374676755463768605281811698051199861632827614087665076609766073178875369696255566906505069195931324480729274013620066762724922501767308971808711926526074049739017"),
           e_float("0.0028057997205050746265227008454853099735123781147037345340486293656086139358113718533678544566572795871792571393808013975630875286180815987352529671265270486796711492162314823610443644972658795020863288145967563011947095782340308205395065879543018940839806430144171791609839833687917668660730464320840762267054017510690549717977281844047209804953491896170368958905313320098309711888603400220905356684678"),
           e_float("-0.0011510313886504871506854886091348977388140606683426510709972335924268266238111925307962495447166794712515957694568350949161058291698411195494974944032551568501163690679163497173193573680100941358818413662683302704748373174803475575369550794525737344081780588357615759278911108203269662377147016311509640235736107432298575981641877579190932399664465198484816204820990304228008205837628790448987034594649"),
           e_float("-0.00075957227013985288625040869842825461046345616985250514676728551256883332416607363832639235221326290848857795252654159429209276474273543894928013964996892016797375810497824344030848121485602247698915819365530369661887970138767080067296233545596504195586640767880936159844217361573671710610872561936594038262396851917534810043523085126179744461764651460533316250084378482375965708739981130750451384698735"),
           e_float("0.00040844510404075287127803752520642932212221513337287691585899689498341998357467444106899459479385119267913820262803795707121973533522403582903656630580958039877713539935377980578165825865361976316044258040349051105790336140605385628492694905030138608395444145336955567879300568606507949362617266424866919560914146063853417665914117074345791056065531944254499035925607553283564401009515833524955513885571"),
           e_float("0.00012068808754933975323769245563326525377779363438823284073035495597481292739368535922752383056651342032363739094356638620252941825148940597030068148068729020564202787171712684342822307441452149848769700932060757852833320136579077441264080410255976591268029721669182118225853803779428712520123980371666762033186769369107830807374729500598267340102563863520367441825588723966355196272573295362919073895484"),
           e_float("0.000066607059718664327291726752298830571687703839281090146309729761278111813188990775845864552664084315914895843866143884764303676622055574250234586342504282117598664499368283754468390417354837796856163035954034247190888791406349072861164156173671381813145259989144896463184159169268666814619194650165729460599051990040549319683047689914930268061322093946509334353541756744725556180881563153367003754689332"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00544_bessel_yv_order4_v(const bool b_write_output)
    {
      return TestCase_case_00544_bessel_yv_order4_v().execute(b_write_output);
    }
  }
}
