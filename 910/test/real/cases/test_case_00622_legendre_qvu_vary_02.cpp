
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00622_legendre_qvu_vary_02 : public TestCaseReal
    {
    public:
      TestCase_case_00622_legendre_qvu_vary_02() { }
      virtual ~TestCase_case_00622_legendre_qvu_vary_02() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00622_legendre_qvu_vary_02");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = -((10 - k) * 13) - sqrt_1_3;
          const e_float u  = -((10 - k) * 11) - sqrt_1_5;
          data[k] = ef::legendre_q(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-2.774099047140280536152270607467361333462028629044484284919234407903279638162136952020203570891704936504748017382350382824838484630102414872320124413061738893506632540066809219647731567434627712824283629637194067142243227750645997325781480580229869427932372515684281324146743253989789371206461983945325944814646325448198014262293455202838916012713690809328023838391582535758818672413223397754581183945e-134"),
           e_float("-2.7436575864992075493347568309989825342489996591745243679322383225406443769623420566829948488141229082105640497400101496307500507508742450752278986140234925546676458507898644195138934116842839762098791695705781480991568779813485036697855585707386164254366751587264375392778587807108353348805252699948499004332902927005364178209899111029309973079028824234857628664281479366077004954019061093894229704334e-189"),
           e_float("-5.6042194391494614727916584289783922764810727662086286447567138757106385878417123203159854827231082715636188182023732849001190783983053352552011022471507013874371172905769560290920788192877077682136995689928487055250961910217251982798668448119296714963563308237601838328458340091537683933918793938490514160306243752128014214034643178414438867148886015279394213693231727331511873459732059497923050362883e-172"),
           e_float("3.3868579884920830073162975170129731816161493614377933416116887754944862083038672762190616633060721114243173385857354625163727816983577127324557552292924434130338427851106435335881397087383192477066708811835756653596982493462934333358938022509290774945417733638425316637947740884562290847932935483079485444616892878475539543728329600587959218445046548058970045779285351852861971955271933692489668119236e-147"),
           e_float("3.3144986479469790417804051155334729833504991333995931591097082676271668996339376115356887735898109440621063259010832793102610118752787444580709001101092231147822424582282345298205048336516128905026878087533746965466476689602385178599264173512257627470988895201010357592316934386300806110544276684477793365027662251773251526493663720181542908225790626663117020178398887538363958312581344919560714844693e-123"),
           e_float("2.8197903827096612725352408423082093475760065551568909546271111980710393975017285594202749844553521460944686998268173482334960370116323457882591882833689080108654821706734507978722235083530281733730482333824407885762628452819988572344956774327718562940098002620335107303168941363579264885970967577029418494511530788258974372591248488619691658940736740880401307720461740974940830600998788462903759739092e-97"),
           e_float("-4.8225119115898393679518944073947046769104945377508562129907941960785611388441455411598402179998980755965404379176346346422010903598133672187371456282730137858081705882671873522278079336270059391041428046160712332257825571518963310826902614308675607269354953838577146033073724889118419589586893103250790845097366324168763518167504671193221560254990190025521925528739378930952681284741709730886995282931e-74"),
           e_float("9.1433212878237944782873954232567737310499797791314781787578398267884258366756708468810487713732639888133998229029666660607600953439188791952408151960712928293610135325708088639044363889849244045094560975876090733543307478242209987279699485770873947484886709502885819808099270574362841116186340668679150473178588032503853503667887415202357220789492674240566020677217291118991686227724450651585386074051e-52"),
           e_float("-3.548841583482645256354079165721516111340389978967141857686563705008535301189539456503016085035572252655676711043955679579284120192935409916738999510593554646912724073911892275411627923316068154830403222096062013662556682328943310134059611544008892940586684469136151912712091803662624841722743668936310386182361836013239570684319008893319067757687518586384585225064534451062090436926796665285378927298e-30"),
           e_float("-6.5262279977522841882474095682183305806764095726589411877957327460857799875055999635478903873550878184425405689120187780732784755398620162418824690234418080420927248644170074704738175443667569918462067725029515735808513078725173339970189365722299640016540140758151660004610074349176720794403653722734883891236101989452109103593836678439447565501524891048049447110605620166568682147001700216652140724613e-11"),
           e_float("-138.40193909289137182864331280315525037670690104772102803319321105842534236059395871020018618780352740077249188988159348261467217838457098931563968634792493813825611615336998563461649441879230824452104204923805675168614143490439864214782303276025154730614770033940707818573237601506826065274872523830908823472859298780632289372671956935739498635665018707177602048036754391251017299571972768548163549692"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00622_legendre_qvu_vary_02(const bool b_write_output)
    {
      return TestCase_case_00622_legendre_qvu_vary_02().execute(b_write_output);
    }
  }
}
