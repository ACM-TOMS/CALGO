
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00521_bessel_iv_order2_v : public TestCaseReal
    {
    public:
      TestCase_case_00521_bessel_iv_order2_v() { }
      virtual ~TestCase_case_00521_bessel_iv_order2_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00521_bessel_iv_order2_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_i(ef::euler_gamma() + 100, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("4.0675650691025842137418105772553424585021603083967165895104314948553259612794233695052646084720435097148715046219333137438616424411493962346689038397472928871315392011996295191316382778917194863164264903921749553390960766232220352575022822277418142025689367731155748923890609352275967507102303004776897941022605223632482268329548101185215409987265458878635181284653987993031142463177084919647211531679e-140"),
           e_float("4.8768983088791288685876254932381096474010794916601228708384899180765229330982857103623740879770227336768354122076075051160806556893145238734648099747151888200739353902078243883291039535619250304104186660501241899204804211241066578491199868364504360619682947578694843656438828811406317473096556386665045128710829922093600433130474408193429533367910827433971812113547233282825633124000373055859791683792e-128"),
           e_float("2.5191344263465161736579500238495483171446059387062569304271871742521197700030455897114378645048133512218241654252991144250527554138718595024509062237238257611569390607747829418914353352533022984197536786489161960179938768150556671060150315522087922113301472754922336312028235703927493585502047729686878569327330941311942984443920360471781133453107457925455386214143122025315901118426654741545120130515e39"),
           e_float("1.2419370801936387005338400478524801822944148952456426806743917380383558721757745727568590126444636439603421565813254404644709663068088728984776693457153073908736396865346712979429004025207780033790760757279215145891531340996571092858435566219481196612171263376735580898859043928235926647057955184690366107342508029075855699347947182059475846945600839097573425707677834082652465381557709916535096047208e948"),
           e_float("1.6024373283585335912905155166977274263008836326924819111531974536882325701497789905683990548217033632838066250053895084792337878906324576597111794186046567689149371077516876728680137057518240908319580460745226715516916245964887457060101700195710328879715103593554050083167313923004641265670879623906537707933115265336306722548986110731035671150829053805182331886201475704891284089555413814398633401123e7114"),
           e_float("5.5868417285580817328922022882653209896866942742864883100048612073829370087837311323395815286445953308052712680460510709261678188109279154920471095138420678160756618987063945876156426287870588819913780561703394952749559460519097035753447306571304301206295743065731487386154318023113988911445785052422329349141598586631285159100131638902789438624267596503204988716313875322616504882713868700791465808741e33927"),
           e_float("7.8341900598311650437618315392271273988048126286237260223127238975128418269824083371294022118881196445390070774878877566263618820970196748493709760633327655540987552829272416273768134889428461458354744812145336894633441066779103320239381961257105141206215459182271582276196800412281313334565550578423889600113110306841088965458176036027751999492537283235838244148740748168205253927938996583145675752931e121572"),
           e_float("1.532093618963103888349408357892357487976649432406766188840436435466153037732128687633768957175582404698720211285779333760258275775510317773191981692685518983208166308575541601931677192893412431350174160397566955470511044560010756946460205418415482523529642691258379294947354460037883593417854897761673965562364643527164355336797814184930005612810052075734021730410745723317468412252178859504018845801e357658"),
           e_float("2.2117503711431426747173127573264522844853739356180852632291146628467060361928034949371891269501711519575069137691366008662984948567756463744499852904412502617960197417079092565514018778519268105685765633139507132372891698857882031345206639193702314010986105968193668542594380175297727773068364579057504687462558053356050003214795743733446458627288433965803496244996356560532176918217091542069113405324e910779"),
           e_float("4.6643653761520592567029979933959668828486726909821843695606408722229319445542288974622080894698398243554943768014733651180912424549047653863519057971806190758873409799256473314004298437132604095620695830780321665191470179858608942651218532104907551034683669290941845512199224490382398523844780205309399510405312890629684730968358564740682613429106181667615166886347100607413166766142162555946927787247e2077214"),
           e_float("1.9235311064840871737578484677713995006420332268377989282105225973143300491644013087170977327413897589393625946858062290104066839823040748922413797801051440704329062756987324455632476175874562280637228127367684198809107805769954101599874841784395003485074910093761622623843408993890688427701117634161685540178313299903359452616564746092158658724429206617418223544194463356149598113846267173247012471493e4342942"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00521_bessel_iv_order2_v(const bool b_write_output)
    {
      return TestCase_case_00521_bessel_iv_order2_v().execute(b_write_output);
    }
  }
}
