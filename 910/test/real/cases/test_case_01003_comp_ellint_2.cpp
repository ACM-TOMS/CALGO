
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_01003_comp_ellint_2 : public TestCaseReal
    {
    public:
      TestCase_case_01003_comp_ellint_2() { }
      virtual ~TestCase_case_01003_comp_ellint_2() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_01003_comp_ellint_2");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(10u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::comp_ellint_2((ef::euler_gamma() + k) / 10);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 10u> a =
        {{
           e_float("1.5478777046765788456417927933144078022865019415227997628563333989304917396977412945817163692528430399810475043952573408974205930824420044913832868195592116433334540853950608918854798754594141227336838958847773558998662905827180014776395574292169259804887565720215434966146529162675689428612036705800824942714995649674084903071317405929380597981068171970014831148239542352853810686490421779401486147837"),
           e_float("1.5068956469385622021860678766819177051862011026160294823946052759457572536800298721659595300528186570095047551588678547431651081196890658950183521085197671682173338764076636322072843421275265106381015713786270230310263771718714793386920080312151908360677502327313014052060263823092562188749641593150608411131873502094232364284255070206928162722074610123170433868318270303749090618270032829233860727754"),
           e_float("1.4640848602733254578574655597898658992696637232125495697057763473768429237109610026440807653632754661872025689625057891001161972533813963620690915223315210424602656961858678479822607812243370932974347226255757584211007249506640377503417077467688767980037168937300222148907405069838001698671959712905304185191826630033456312573665050836448298914639656902522909145773034029122899959811244395797278003476"),
           e_float("1.4191354653293608015580955669953674894113653486776239388805738649976563675761108430592366073064685725886307056021290474696686906910266277176329847166313610082919197383416995112591215784840282399578154249306302988109864141642764512816902304551240628332720635918536802702089597683726636229423323884619821698710630072767201836054394058217926522993215558372912229196509652686300412891992534564938901578026"),
           e_float("1.3716308150947120116802378077122140584146322944087184769765261537703545536988008598550289171092463278913928650271236805120474072094808700770857574666922748269302430250205035498200486751095551768240982165307364058927590311066448644558600981069265017276034501663214482873141084315400770840131216801972527116029600208996157138144223621430508773682370132979188511800211685479160241650193993844583211605151"),
           e_float("1.3209842426712522742581117006379293700780241426631898533721630065231456166084973072916781393421172133236985984766291670542052489985038072798241583343707017477435922480746316663993806232519872470884788534567681372587393705624607336088193910502252273860665581293598941067027182731571614793939975280061057967406201571621191985598398789171617363570109359713281253636832962402235171594371935172405154124792"),
           e_float("1.2663148264872828048336229560513733492583303609309963404837748444927951360645753356829559794355123622246852231654982192887538865771991391246709363276427895383574225762534950752115219249417866358243504875630988388680255332000874151422739427619593479330806142739478954951713058183081312943057096982882951278520823324934883931474835501662380626797875317533622387342177467293559128312365086969408483008129"),
           e_float("1.2061657136681009688154863412052399147329044039016790251107415503325407921067783111772144962258983842799284409423386430658234392555408441103551237733174519723915271989423680184551053522674931073471354686706753944537357494939625195482971892244542045851510700035681541678457679761075746747075469047475009697327703418306248126355488716648587092420512319154126934319754064707961948087988953260202588554076"),
           e_float("1.1376961141067845687547967969383653405562353526298293930717285866567546373998762103068692051354837242508834638481669401155006081656491146183142454585198229024643310151095362296578388016644612660312747192227007594805421766720255461361725181868940719042070290417311355756093317615815846767398909215958200249330714290263025381957955658890887795911854709267601814848606896918156928117899823036999339492838"),
           e_float("1.0528200932803661819662082222008396641110137892316581357470894504424306446979772866386018624506430376615195063672497856000124927337406367383248019736883041410431028329692016015401698407713947375878520140501815891474010993326920817919724027424578288626056375364252302316093198499308380733838106613409041160454408119386692925421798730524792849662033902375671288356625452727225745963503905695051433417405"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_01003_comp_ellint_2(const bool b_write_output)
    {
      return TestCase_case_01003_comp_ellint_2().execute(b_write_output);
    }
  }
}
