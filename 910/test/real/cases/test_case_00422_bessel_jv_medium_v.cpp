
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00422_bessel_jv_medium_v : public TestCaseReal
    {
    public:
      TestCase_case_00422_bessel_jv_medium_v() { }
      virtual ~TestCase_case_00422_bessel_jv_medium_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00422_bessel_jv_medium_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_j(ef::euler_gamma() + (k * 2000),
                                                               ef::hundred() + (500 * (k * k)));
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-0.048403726178253909130563132061993237094415114537363552797944652624882038689143766828713681946919001115807625206403042336847414129736213827260396769930461713466663978771852647425626762543894964641577945139972105672886269097023530279178643188100278824771281107277156195438387579406773002670035603261462215602537190245831425481607800239637128198249380824073971240040616790737496524231881477267508102074194"),
           e_float("3.106359830368177042037794145956284282060686887781622772752941842420253949554623522144289403992771000848686030820657480930841255964464264553918100392638022112322476443194755994797321160843812418682750333529555273708256830291387478453125760550651103112818063618487653099923654719605436880931885416482712287123031133658027304581497509901259355276431318572364426498224467822096500905497466675057175028631e-802"),
           e_float("8.9230526784586551293732365470683523223805906496076863763446174359152237141385601112259303662257336488564045038909031290615851118808582571757917697663177971491359382252695634747995478263967228470525735262079985266954582724756266835346940737529345292915696479492880385821255816541011344209365122493392182396444540046888321541680177640077405447660681930252551589220204823295915113921000928150600065140737e-714"),
           e_float("9.2495642793408418646202333656020830266197766305415799239988574364623379230547767808716199551748872100069294502141382945292775976901198049023827571368709825360898684029603777885485172906635428808321961954022005253340187246055549124007374098843161929729630325971950275251532303598511431946889088862286925090376791305537276250624714997436544390285202443006205963260180850825426226225674124344726114225789e-315"),
           e_float("-0.022083273915663088444484066590734884208423857469031269312648019940065596419659929020128979490649597086795559183183339211924927504000136858072119702871080193903967215366456276219952053055358930378892634230066555444071051119873441556370079424811651220277568953703362750052824526473799586402462352457686770251238526356876082479379902752811386339425220406178386093700009087772785708212062001479557313775006"),
           e_float("0.0082343209851904731857023800664714584522530461238880361030048962031642931858043100073239344579274470241715338911413801905596226936324744479708627868144557947744294560950821036851223691965940456562057694720537798187235935831748582277947030859912020869982640462653236544256873314773356708271058081316185251451745420777907407159203583326432736258391519894013053641403113287610821691415353068712149235070499"),
           e_float("-0.0039954593031990128046988084961127700917007202755191236805538052087947216410877835535397978410698849161510546955598737205939501104152447351817882883843790271609631631041381129222979251194231073015536119776646407509631209634726949978568321556835016123439849540829269339291371206581867422233843298475670264579117772185569094160950165622504908203976742650209980510454166061263297212367571870028163388901426"),
           e_float("0.0045651234626925824680475267098235174309862292759986393534759468175544793633752363614991006416120205674255849503302598507369702161826940212085755242882569472559553589547649279817124112762646245734050298522352618048999814190982939143470806174825034081974986568267734395001331789076978342700980552227903739116396281234478811737849524598709703796143946013946084585001104473888936327808571894037714909219986"),
           e_float("-0.0046773989351688572695721949349033179287914390307084898295479341889232011977186501348912195245729029501429914249307806695880027171675764957204778603008324465894804093606915270676904713711882209859704856214577484730390823603399453082557909526980804810558859250430838048497396345658882120691008988464270578800761553494006761687826705352148556162395201281080311802333038193568951805388346217462867317015241"),
           e_float("-0.003514530320319514362349438659715867665237393086136072453785458392449620161772239097579049003963305638437141485605784563139976841795434398916736764295708581794208204235281701310808893945517940613317425212192750859194902800180837665137641477148395473360265276392745487433083159578689228918297885229925700410841913925444692697465496235163178709021245468827241528337902607708146979558127816720253116956681"),
           e_float("-0.0021400842979784810561835528858616717778346025283453973589717363472295396354590037012376436222308805657759786593198188100324639554403336287011041189804564765068712526316966377010039604169912480294051958799071086771651913997538958620155859439010690146731378801325129690750621410760959889668078392670866824412701516039180426720628272514102100172389235923847934233512776098547992564918275729315193065904838"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00422_bessel_jv_medium_v(const bool b_write_output)
    {
      return TestCase_case_00422_bessel_jv_medium_v().execute(b_write_output);
    }
  }
}
