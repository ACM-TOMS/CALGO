
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00543_bessel_kv_order4_v : public TestCaseReal
    {
    public:
      TestCase_case_00543_bessel_kv_order4_v() { }
      virtual ~TestCase_case_00543_bessel_kv_order4_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00543_bessel_kv_order4_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_k(ef::euler_gamma() + 10000, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.4126057066411321252712370984963139096887713999515506679925514891077783129716921695495155362006539528651928473975308076196583944662789344069647200797857102693637128608365630050371012305319449326319132268371271859593269038656975994988250930766594046258707307198245518149556173955517405312074251490151159489637936130658248949341054070054080638399471724229104356784250301222353818151763694114894274796111e33696"),
           e_float("8.0459375690257488304877845329124528117068670754798912329917054824882233357872145279118278794765950781456306720797776004728898869016074808820961302149626269855145996364794340452949563810195420148489949160844599673560485813365468307766182322754972089248810001247603020069100644910812724684330794075422669323910093137672327337925850580749998384621025348576268507118868100803908562174520553848190132210712e32495"),
           e_float("1.3248235999761133129762634990284763586352476376771210211927101192799274436067211520404977808294180330318945642403475001764980222539509779599809863656707569936944771286192295104274146201108238420219063484544899447877827858286375480754135943215962604390455065129766462093698007208257462103004735020911831400431957959096806435026967579764968076827968405592456715431290026452776949725041515758712279225362e17489"),
           e_float("3.2451592584737362921326554544456011110406598638216369354207973721485594436795568328385594858652936284966931327812118198180229013958093329768952299895284330104301700006176059197195380309410488272530427825728230943629560152588373653010715137260857280111026770963108116576020582947275362197380932918561216900432874660563054928463260967158908688718875325392236562575185078981448656242232245201560491819732e5209"),
           e_float("1.5817687984145954163861761854107502416258145058534009027302281285407418231593565737740350648030991947964445080436055419113438949136729836131414161159423007337929150502035737857090370239909480929022805021085203725914451845435900618936125177120634909547213777084532751007866401513428094191303576379895481918802803410067267740733824156999858682566223386727006497434294872906552836107864295987809068138636e-5831"),
           e_float("4.1765012099522376302342922125369244618822235168910359123924455588895652328439668159402760775117120950175134353395461432075066238858386472464559582762989921469825605948718100846780384343077948478329323198180497737741131798686426538304344516548839784430250703574752589973195799151666589979736599760396889711518981052773150383073045100965443778820462959828015878921703663985327476586325387701233553059713e-33656"),
           e_float("8.3191825540399939100699334229184824523454797113596812228351845540980698627673539038124692599392496611714510268467657520719487985081731948558809752728559750535006738339220827055892821333652769121027246164137699394272162661154949531769526491324152211417014644320078370426332288119531467115330754681166878346432187770722382522536188675989775524521318099228138132533134603076163140530793113577167992424065e-121502"),
           e_float("9.2337281787458266736623180550565787087104984815846755195802440940265864494037901917884107003706097337879231429113567884742525339363029764262033357201903527673197204779481022536695858201484339742297845092737733941425317030103043685184876038275687504957645773724359427296633224276148078858083177559804579476552968802114931965087600584580705586176863100992389287483347892911925166048311475323319098041498e-357639"),
           e_float("2.4383778877072746338416997460985776675708727857252361742566133354269212208631427201176561026623211869947135155081864947909736659142797695687118332817519794739273333864299417599467907095030582115750473753638391555244245698367823564339093948387129977527043365151534574055647108243630805735614586294973457496367009166827482497620900271050376709450341425827923948526139857853012460994377378307390699086759e-910776"),
           e_float("7.7722851196743874554449094957058791172966484080282720139259071827890218549947401267896227270674045087747290734280213310331805109999740608734884392915471054030251302138804202314179059710793639248877533918971160116555348131942112843930554523758058117087324704739034067860197628770700480637534118630848462072568362438575192386984794137401399381278573462373732538671712139902899226019398511864507940946181e-2077218"),
           e_float("3.8580967937415641117804196541669605070360279426676795931237712249458735929847963012602447227061375833558454431237178177075507190016993767453363075296017876072616447318969929689880766614476878774537009910624009571490886196916983594105036022093794472632088391547233443870531644091791860518013097966117925777232416961428619581426758163560457195800359133174466410178535252109833127228438908262907107883801e-4342948"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00543_bessel_kv_order4_v(const bool b_write_output)
    {
      return TestCase_case_00543_bessel_kv_order4_v().execute(b_write_output);
    }
  }
}
