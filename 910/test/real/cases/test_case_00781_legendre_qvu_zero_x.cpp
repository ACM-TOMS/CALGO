
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00781_legendre_qvu_zero_x : public TestCaseReal
    {
    public:
      TestCase_case_00781_legendre_qvu_zero_x() { }
      virtual ~TestCase_case_00781_legendre_qvu_zero_x() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00781_legendre_qvu_zero_x");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float v = (ef::pi() / 4) * (k + 1);
          const e_float u = ef::euler_gamma() * (k + 1);
          data[k] = ef::legendre_q(v, u, ef::zero());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-1.0825588669023042342600944307565390187039015575467974645395456726681088915727710571295346375044040513033876906807481679052532325370331191774523285922291742819596265943883708210595583731423434072254596448093268551691496159936051769659836037678547634662833170489388639318486515532346360363111375971090762949467620791315218414943393838352641400767500350648119615215723065228130463238456387188136496384786"),
           e_float("1.8572579818433051917841640403010365284129508880336928961579895481505686531724075825399968738157189691994571581133488830503066495394809420655634129688838479896251064177349620448380178477618270321961546774396534880538374555441294726312885098340768530490433077885696768360661868164260814847066333344314168545389827258972328434630830618411210978493955571121589989496249557436907052018635990150828646546166"),
           e_float("-0.61995535846365092844281659147587173287821789089134613884710876100868361204281147778057215488911396234937332010773872356115578868615748703707046629506652812348654173680192482055814752138941786175667367759934275485958644319013851087178811638643023927016573919872605266488397175069968673263991589884678890940460854672146802916718767652587400393531147438203639633864862783668074077616536597110145663437875"),
           e_float("-9.3585053446007550398965283893987559347154957751969328467821869166687048079961851374861361491539759448910492943822969099190455041694405835895950270239107612577261488028613757987199995512304983449226916560835171958659788334002224872524347792201740703319489460618543727230242820809347537139665702450675763764877099254567768826228956290362863550889533232574733718414522719359889432117690676920919379649624"),
           e_float("37.765626997775641721342487136406262048282970615211724887560435352609063817970340872312093919437630472208175552477512260575476112559766721729015743736369139820745622061314774703357704843296241210677280559912277008352869385458256776796058469329545332930620234691467907855027212886340314825317363151370478959384686030255465333409710838293643681126089480236940528837579793893841085895230304557405003275942"),
           e_float("-39.075836755488451684969935793967005315143060612710774907442599704168712511208409406961811627195152971680348675973941218434195665968274252012465994889425296464741311914222718444003436604603525822930447481596794291646272171350010478430921623141200933183693018774547810100095644274537116684470601284586811796661653840985250742944126273045640696525609778265622647256979763223813152673970751842523878991297"),
           e_float("-383.82239428362688117555624602588098410242737226878373417433077532284511926611349414992025335580441720569631006733630381692336244664605509969429701115382259777429099495214586564221594767747246601665532341983366000346103647643174085896147360079980919830181341300402376350105167803007287808536239204560570080402595129949401283187781470233198954700030309341021208571472227340125161913342443895914887479312"),
           e_float("2520.8936914662624601061995475782868018976816141877205743009596318683966385369742686977905832207764668158122377193577815548434625194369858319027593928961888297397255044479163699586047755325115767205797716856500624842953133024260211477323663919160476577173891488766328268210654023144874037096830066525297156336595013585952797840708960947126345906463431894858222617247474856076701720604876714535783974756"),
           e_float("-4890.093000999420020078278912395090872518591285666395920557059134587788864085467409403330533918610763050004518557403007765984243760704460087057952610750781923726326102546314132578386785832233575806955852844893177475445816533658719871917302199546782528196870004157645582811733186291825129888717556513543978882547796279837947638821867670240941838250285780182131204057737568531603902250242479502379904814"),
           e_float("-34367.528001154844572320824798568810462670997692022537284920930780931234492402027487126834662836097940310765958622638889273427185165969832223228987611108652763886102409878143088376940821942015133797978767285795995462810021779123131661243822162209089969606277974286072785274324123685612424989885659740510968425740428329548221821212669988863557638469218033881519911740627081406675612894331603056993344289"),
           e_float("336397.90160807614105604087752395294182970809134771930537661446438344988777087142372390360663768242422671851521460643948325100424859580399900016841965176573123379647633117624518782842638263844532747122699458810905658885881830113102882807108908203791150670374778508444894303200123500953485370812712006011851997774460873460855744538256907874968861217442861229828556044793210126128295978095742241495914219"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00781_legendre_qvu_zero_x(const bool b_write_output)
    {
      return TestCase_case_00781_legendre_qvu_zero_x().execute(b_write_output);
    }
  }
}
