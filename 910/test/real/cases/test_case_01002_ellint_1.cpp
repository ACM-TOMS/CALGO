
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_01002_ellint_1 : public TestCaseReal
    {
    public:
      TestCase_case_01002_ellint_1() { }
      virtual ~TestCase_case_01002_ellint_1() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_01002_ellint_1");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(10u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          data[static_cast<std::size_t>(k)] = ef::ellint_1((ef::euler_gamma() + k) / 10, ef::two_third());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 10u> a =
        {{
           e_float("0.66930118544316824002270176280135886239001374900200673036250998988985426278025379486413874141030529538254457994065662348012663050520087593478877487729093325302070076362287449801148197736366950395547024394913620727480260753972682910580621646266927690920300370601203699848197406647185397003832705440543680877884008427160361819672119424872322328842634247515652174845321810330585598226883113591484402604404"),
           e_float("0.67399795856887807867586829094887992123009228896292812875340272815923673187218174890206194037985856894121792021178772110359349193101078582287498929669216940630689279016690567479741143836464588794291559083062276933551761970779327955324090943233966988919112035231275685093777178309045571199633863306216249820644020933905303423927506996188967555956591363769881378364720207532735469493142608082629186981454"),
           e_float("0.67887369277341459076836327453697403741988278385407483750843605914051569919440327099204314992207451265451343533780065702874926280553765270492463975188487222840340877658779017091715599136669301050451507117037588024122857176009872140925057010847937600428851291260223105618704813443893307994379969456022892269017543183341352615442910189474855137810598488949574589696532777150262251074805230826030064511715"),
           e_float("0.68394233105353571818407208071161690894732938117647202754743619193001601406636552419665431052828314643840509193555920248562081722434311347865418906349166108477766083841155699708117490566246441374438062645777160989892196474185835364081870278545555702379783181393850559237192195194052909707173739235761452794747918868610582942317323482186770220459252263004285285542966823253019769481618662423053375709235"),
           e_float("0.68921953719896892764240336276809230730970714028692808887492021388103022480367678170255662186100137348921560860669036823278451379715708272306923067299996641917676115976438345663718775989131720036974805755358240588167393879652027902362486578238331988650165917433759157890529611889943600118246666440853167719473249172280391707534585494078937668844058526336047379692014659345720269233545045153955926743453"),
           e_float("0.69472299563770392155364165633021023015853413657815034834006853684511128572899323346518749712863730628377785061264677707987185451881861601914412266628912842925754957686588760343930188899396225616220719653523029925239627085787138703205168517477820127851547172605300506838327308820566321588926525010168886173715934469491784409557422252648666315344127313886576046119317327479581792634877497376900197711427"),
           e_float("0.70047278046122094887143670355991430084732209522234536818123569714688795737592144249347234142187194979651555535885951756728475496357684193876769852860934739238823378965164028662397860366492351623045972287366935691584089005471199298975234783928082288299142234008346964625075408435821639475126536954592109984299771512259680992353144037568354173910180140603780680449502710973612732106070475360144914814565"),
           e_float("0.70649181393199648600895294399173988959708672213583853765764270200865624471295094958121686292688771691601530008909158424891804023620102084091732505329022105884492943641378503379797107744326766035871165259281805565336421650615753252404755479477937533912102900686441446042696594775912928337833981010120452867532995408387115794411678628298721696171715167194424855556697351925525821166601501858096659207062"),
           e_float("0.712806442153715179579078155348346336624049907205594286432479519207155002171395437090169502123212374508921225489121196729760684520633417515242809986082675308589859285681236683925375735188271629065858874691781618241148649259313566414619512912360411677682014130162062633504527193617437564591481590474529101411578798234537831599777993121997862666220543123335098807759415818181074296065900977617880598967"),
           e_float("0.71944716622169441222812320939451462931549533242897945960000133388319338867252649155180252916793511254718463637984133885561291018353969138498535343005353925130098327058361504764030668574131138859903173409427399488328824564020506634457657259757765997960953272083113765539967533010089091804368556076054971790400534534937416111864858411234428461200992821709665871129414362424701732221136522518901170359368"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_01002_ellint_1(const bool b_write_output)
    {
      return TestCase_case_01002_ellint_1().execute(b_write_output);
    }
  }
}
