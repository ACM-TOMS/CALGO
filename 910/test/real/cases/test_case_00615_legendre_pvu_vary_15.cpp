
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00615_legendre_pvu_vary_15 : public TestCaseReal
    {
    public:
      TestCase_case_00615_legendre_pvu_vary_15() { }
      virtual ~TestCase_case_00615_legendre_pvu_vary_15() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00615_legendre_pvu_vary_15");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        static const e_float delta = ef::euler_gamma() / 100;
        static const e_float sqrt_1_3 = ef::sqrt(ef::third());
        static const e_float sqrt_1_5 = ef::sqrt(ef::fifth());
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float xk = ef::one_minus() +  (e_float(k) / 5);
          const e_float x  = k <= 5 ? xk + delta : xk - delta;
          const e_float v  = +17  + sqrt_1_3;
          const e_float u  = -127 - sqrt_1_5;
          data[k] = ef::legendre_p(v, u, x);
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.675641881767552734878991346224341877115257603316094812622697605100812136578943805261769421454861364612580105041936352745741969315168085084051849668571112077405226319647013987409411758654328015054915303665518729146396289756493756477115257150986949261748232590271602005393331784678473184477941565301996211737145282787404337194583462665889003515020920018740585925890723577618138837808370030968562686159e-54"),
           e_float("3.2321476851462512410273645258002823263489515210206331998821687210473648651021948041490649821454429377106928874936152500646389330833760671547043903926310926309161662720755341175902005891678409090238185838083394829789029443776120930346440919875872396934241348290236885243294979210832990856685386298369917356089817499039946524850009863690067685169600533445662814791109317058256091708626212189834641009403e-156"),
           e_float("3.6232646837355264557245749782972875755428109368925047010502347412503014630806115210841628578260125706516211003808740791659075526661683087780124423214516605928304528276946488207007448332651990476403460995920000080711070859414033567205418796582268988167815361780012352453105746035914186998488672669271250568778128954931781536670198717378970370010938617822803674122804398873634632067065412535531335590885e-178"),
           e_float("7.4443740820595486593116202936251765150241832891103230872052250355424175114128319496813277886772846240220263937788132080267081031268675478451416162402820554995371693511247592479743899359225280874402951877291591090822552323323250241567661178830557112825695498543189848171531648295497562220364100427988348125969464196109803975952963492994202647694901613026297861474713459982658936040087567409498450503793e-193"),
           e_float("6.3553316617127729076960642414988275356366842417102313467097774804555983075929668590007057601104274639047480433312622189024596755860531478818619167374003990994938738997040223844643148582447180700033659930591390446755536152081945313557723574506108957269604004038737418926113317551383704388402931166075341059655051066866752042932135967612411607210572842474464170912028204048284353517657228938518851647381e-205"),
           e_float("5.0908766972596527504693330151437644684827730072102789042618855911980452308961396686210702504175369414311333130044353853485835986249618655856936595453079056720076069502327250838971411960468876410386875118360270514948702212597733953088088239479730187712272920253830094196337214579102795577013783804523868801526319411284459784044809489151732383631738088732034363266312598332659776815869402525214218026999e-216"),
           e_float("1.7490583570951627348382371416926870950486730583047818951800516604362412176172606700164564694325400542678167522431222799127490732725938767933076086121067748965927755269272758408664063891725931352026906686651039931775478228584730010327606467566770144694174794342678227556668709718686720937271421894075067490841409937148737217306477681052777798897882932796806547911172854871872730500017886229776031579088e-226"),
           e_float("1.491389589280790121204093358172818232671869825753644538569183016847035617895359846145891216039474235135972983080818137181532111279020328756101894591681286677496779677812245817369207240430775377293739284479559440613857614188436622974181008516739338949733570520103950351162950782609986336373775549118507415392091322350357031006895782339910161354342759627766301883787045823069451739935799145808364322655e-238"),
           e_float("3.0580399312548678483529608164665310812220920306224634272059566652617375544915255929553527072451412781658397190548630741928369162357127441812004199591035883814097819973928875184430822540463799553544526017931392377909925874140430024948967176387422546765040383835586045146222739014684707473007573775320145102523185110703647042960448582560387168366669005302688200501841967409285336063605679906182342059841e-253"),
           e_float("3.4184347236292239057458157425309307956209858923421640630678790617705744714264434359637121627065066996058476773913302985659995351979485811715836143958824948958029193825652604245589524991939601568574324896945081357061506452712285758640909156806618037414431848046991632134713471453711982683620069535262386036526831790158609435791453885406972077698730669285417181962680804448474368992358360085460018718187e-275"),
           e_float("6.570066177270604385876192318859147197437794932910416685871675609931268078450160875680799558739176693685892829258069205941879046571293998741843700658413898289520176249667245815985288329525053706840082320054687487256176428358057433213089948861538024395922302042617692635081593975222315345530936513603631425052528410718853603451185220111853768794891316482569038833067405606960574058539103948830646690954e-377"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00615_legendre_pvu_vary_15(const bool b_write_output)
    {
      return TestCase_case_00615_legendre_pvu_vary_15().execute(b_write_output);
    }
  }
}
