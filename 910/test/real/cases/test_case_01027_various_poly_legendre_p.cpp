
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_01027_various_poly_legendre_p : public TestCaseReal
    {
    public:
      TestCase_case_01027_various_poly_legendre_p() { }
      virtual ~TestCase_case_01027_various_poly_legendre_p() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_01027_various_poly_legendre_p");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.clear();
        data.push_back(ef::legendre_p(30000, ef::third()));
        data.push_back(ef::legendre_p(1202, ef::zero()));
        data.push_back(ef::legendre_p(1203, ef::zero()));
        data.push_back(ef::legendre_p(1204, ef::zero()));
        data.push_back(ef::legendre_p(59, ef::million()));
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 5u> a =
        {{
           e_float("-0.00327441377905830672493072251970408814952178528341871869409379802558605682869126810386530149092408524442076541551768751322712899331507607757326782088790856198947411537280787080503597904892876511929744115601461816820268631231508709621156068523501611257474802613800245506008978582800409971045626615039190572043727326072226395751595313553433100795676845795549703236982616331357602696485686899544290626857"),
           e_float("-0.023008987077863412515706922464577310966506531364491716552557360252020601419050807887917563816978227114435146120646827688041386626523292182292863094891456919184780894097985248638231666993753944927624132083573828586914165458219283331890477315942851007068027681441710124367068022898068994357057886457651923203540103036201992992020614724988611881017541918116624125239313714155865467196243634569089348345933"),
           e_float("0"),
           e_float("0.022989876623479805030228760568842612203245313315185660309573508623904305238470200904621951222445853171649070417888815372685870524674020344932154736839221489849909813621159679494844431389938534674361985794467870257523040736077905189588242700231935017859499419247821660808623614241176910474701526086839919945065401953946011270266444779203737618657892796922175101879480397117530030761695259457321001711094"),
           e_float("4.2252138779568009703417090733697451567577197834716389941177630862040288381847805599129210739968494458926463330043488570271772463155569645180857240068988707522802671842567471458365807542335609387096897511322531558922181337271522154872949558260087106447243265992502921204643279259634209011104217359287742572216021806904930699522126113443829974741286400649480203624277778848549344115903547702828291221522e370"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_01027_various_poly_legendre_p(const bool b_write_output)
    {
      return TestCase_case_01027_various_poly_legendre_p().execute(b_write_output);
    }
  }
}
