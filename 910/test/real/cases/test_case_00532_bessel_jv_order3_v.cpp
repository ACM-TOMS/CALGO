
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00532_bessel_jv_order3_v : public TestCaseReal
    {
    public:
      TestCase_case_00532_bessel_jv_order3_v() { }
      virtual ~TestCase_case_00532_bessel_jv_order3_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00532_bessel_jv_order3_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_j(ef::euler_gamma() + 1000, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("7.8617959465347521112781231468116736386176772745346045073748789779913958510007928045045348368959725312417722247639699452868508851926692017575766346634945775740243455495475727173367104494974378429242522357247884776106189227969489391555816565462419718936023602223352671368574183221165091577342683271864735060449541409311079988855347030061410005254638020530048088142018669918148364153350498999657558832449e-2374"),
           e_float("9.5833457655951222691915979940635983982578621310461544833913016609169079554770386385135462349117476653966148936393507032002243857477482418339907108437107688786033709314151802956209955150556519119881332567910064358927531491587085201640813124493417080026478599416309531615421825143591704081205175935028008781100207581130837921176038425294750675516786102245409278024215744525710976061527443557969705758531e-2254"),
           e_float("3.5831688510934631403622148179593395384646934205757028926499956483087622590111804962873035626945929302695487176756766290053023306048682683971649761942787785734448542789458736275641781927289652475083529564257321536475587674930961128519989592911800015001553361230112940680992452293978681840000901701764351555254525664000875466272672989740434094276344391939763774368114612222143471192987717068903277920425e-754"),
           e_float("-0.011113488144507384076667859092676088298692640660912380634188540272897935536127915801730648976839126232289968296213024327712671285453084509884039090602769153297627895303462362925054575556698300630253139437115032491014805547314326936688208436831505812355173477444941892480182202230564456669727189002741330619579906456900941001411681736897190286240380898633261626032858113237077626583525740654147894318537"),
           e_float("-0.0023513838413398865696267309227552553548306624887725822749975372639735205397966371229437710977152612746939453732452982825739690392649603331267857678622913575096453694712206034973859546308940188348887068943529448572337864277695250389513934134524882985318696083785849791873598635645736356713520133585382681257173666929880456690426274435518123172006131406189605224805893936678710281284591651658173444431215"),
           e_float("0.00035127527272357686928042532933752582713940862679688220345505409303354114359991310717623900600185015762185423564628503447525459695481060675270581574657663961061695241788812204859757450070428283070578795019579422233388170345711375727332416071493962353148921418618239164635284202480005052287125087341740232580821251932347934797216295423979486302439795464502694576359939812382875947866894172153062516726021"),
           e_float("-0.00034336647730051362546333446711628217485681211233067194329028818499941363904629393454320378675630443907644132286591854950471834327891185297586529822009977986048444792602943299227750596928117401729732411405545983605957314172230360205442200802884241476468459600951360369817563845711194415079840794657364377667181730879173646842118454158751482515594838205952632633203495799507804897269232975835483825975854"),
           e_float("-0.000092274296714121193203342410572962576972369156552915916618727849768126118221897006710668460352268811267217586856980275242644144503974431881451516651769357339348378723510021806914108485458913296039743300842929476659082462059623914286690759567068450235093485175005662822080407331097902216593034577110509254914819524589157854683514919284587358669199311473738387497338588691279452844454833418447137901964661"),
           e_float("-0.00039178958971796097593745355474498004150218067172979915939193416124660106994749877467855243508512133824450026531028256813641129372257406265196442651480912633287951307358030607725550587324705887707314566983124846409646293267870272859394458142041383105109673050792900404625869613714758852285967887957122998790257439751835056260132299173519790427056729104829534020140458928683331101774347193389660510252726"),
           e_float("-0.00030348326983118343957889955351793921905595738680086880491389986304656512058745396431991800812507972454393136095186187444539893533602741245608784312872189720620211284777181719034317897229857568854417981294933962097590160954618992113808893196897019130634799840494342028547246718600914516152080215694825368299633119452148654041357720919265147362812598782933831456529422646049927816729313515927769880991478"),
           e_float("-0.0001221331410107764310482620064183017365945739401094555211535041307368305546335667139970350844952499401065855317381887448708942533137549675493000129843765319038155980741755188305085494739179105985359563764526574863718407356412716122759728950837793814007055031252940840533571750051250847273074212983317546575217561665061950080995208063321474158392244796977621105266964585855353754238590236725582518021944"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00532_bessel_jv_order3_v(const bool b_write_output)
    {
      return TestCase_case_00532_bessel_jv_order3_v().execute(b_write_output);
    }
  }
}
