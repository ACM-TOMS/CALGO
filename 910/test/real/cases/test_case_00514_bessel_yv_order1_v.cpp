
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00514_bessel_yv_order1_v : public TestCaseReal
    {
    public:
      TestCase_case_00514_bessel_yv_order1_v() { }
      virtual ~TestCase_case_00514_bessel_yv_order1_v() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00514_bessel_yv_order1_v");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const INT32 k2 = k * k;
          const INT32 k3 = k * k2;
          const INT32 k7 = (k2 * k2) * k3;
          data[static_cast<std::size_t>(k)] = ef::cyl_bessel_y(ef::euler_gamma() + 10, k7 + ef::pi());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("-4718.3930446979814060534591011647498124082724382356548473792305507254065663011827292994338607695009734593181968029652861415367444439013966953654517302908318082831578921329655217613452620879473483416604051866799075649240494149061300771780056758251430994182851249076451126131739576065221074550403080582657916017295389864480502645637373537928386036563375623169857069802495818822109740803234532844651641339"),
           e_float("-309.51643413367112932953207274020206900382558873432858225959549361249252864437123222103081685501278261393411976517393910799930079827140194983516762458765573469254221340196864118097572117897052806465320966988022219600823075189047905242615383501400860919934070644496047672862700031775416636891708479654031782171288009449190691127058810601751049388629305329816035907434274917991537473365492933487188275343"),
           e_float("0.06121833819117545952192968875689778342582681858525670034099897988634911598590965109857150425546973598677166206087972716879086269792702795041413015607718824969420091678765621552919025569277392914396680945878073856789092882909673031014625128806940339807606692665946396068491813229579044750158166999227257713418494405747613213443750041675818689735164108034011748451678451523174560179174409014136137897927"),
           e_float("-0.015982019371236085619777467196403108808693732701521028855299497052694308289087819233703703267526349733593676225739131328350399046034515246413358635752729273292145692283109542371157080788825342321366597413100198110852811060366792077330864491185392483389013480007174200676754719776759229714938997934633293693172864638367440553070087639137357845944268794461999994655125534678440624656434823934024459479683"),
           e_float("0.0055387769926703538275048160175437328994326102098151490354356225715197912944174265170405674388261264514205691363942143912436817126642658613692049552336345142603850166672587281755283479345712596556103315428478838313377398831355242997986384738672557957095219467183480722271838132815736033930220169084955171502789461267285679313434507887906461379985514083771074644655829433392863027794293800080355272582273"),
           e_float("-0.0027681262501324399518484858400772050673349601522427815128123839334849947491571678441775404193880277380346379132071733436025125547247292666764894423231981329628863336455861274382328300225189861968980981982446237381056075578087245769328980126250921287190835985601975699541870770448987594554478617734801010384479917471933453875538002111079996691048382009879463109308875810636844937589924407046544568891819"),
           e_float("-0.00065169564943059907259942937968634856311138146211106578651753670175004570884248910783860108498233998971802453859374629747170458863648609401084231690655823112411316813189307142193325830914783280775348012685526639913393802804357861504384336511818141593951687668044102503489227976935580844790811293630447662691463995685883013700438997370263591057407025176505227347092892535198385407236419058956580624590679"),
           e_float("-0.00077047865931809149335258657170691683059189957098014175496712982089509158259803097951297312330901682933394698357151173520927454673005082513332680532582067430969606295405439817236396983178615231937332328585755774607420073674671837967143352392307897985573325339658516181458033587724816082613735985440226349805160704912590272567159597478704016853243286014130089583936681984448449124470274640983249393031938"),
           e_float("-0.00046902279540490600710682722708252677482284817976926898311942724382928283157163530156122027679986996036658231237922505859441940107774451602362992883012789058536721391608628682476060480145019029233446713400528472396387672580039065546021878314042782079210390302865996573258434468782997015475741649329295071102490562966660085385015677959069220943369405803083835726077502864435749445834723163114823093857013"),
           e_float("-0.00023307545706882817535930134295931319621625124735853267681966107615606473577355060239852642740449459657807272649753827319271567798269980416091391460981242920567774042938178656685039177462726442678923054460261209471975779906712355265664168013917589697357393308769978600353590001190874273027658521829662415890303941099588003089331486660351177801553293603834545098452538382660039262565297295452564403291856"),
           e_float("0.000214396755625543538186865897313726782104582406205092910892709221554010308684066264926060115305216535522026539570510640855455152992413143221745553007307255478348773585392645670333518675468863885108640275623226191507858538512716576342970322969645289997173312397533948554406006447361559924611745637854680449114353242363293066349545164854979690465489432075038692557119963268064439609765991969526060209239"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00514_bessel_yv_order1_v(const bool b_write_output)
    {
      return TestCase_case_00514_bessel_yv_order1_v().execute(b_write_output);
    }
  }
}
