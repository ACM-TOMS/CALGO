
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00821_conf_hyperg_pos_x : public TestCaseReal
    {
    public:
      TestCase_case_00821_conf_hyperg_pos_x() { }
      virtual ~TestCase_case_00821_conf_hyperg_pos_x() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00821_conf_hyperg_pos_x");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float ak = ef::third()   + static_cast<INT32>(50);
          const e_float bk = ef::quarter() + static_cast<INT32>(50);
          data[k] = ef::conf_hyperg(ak , bk, ef::euler_gamma() + (500 * k));
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("1.7827685922985148888453936456455028839746478492474122013628644959364092450242906397314167338172489992183167834232987144784399456875142199785039175367913147056457370614436059207914525089390765560548652924101884465278731630840232412375678884018052036580029741368534913307262130907131373867996535845867786190705616838113299546416216336244589958800101349961292305893750695218614695257226191731007524375448"),
           e_float("3.0538843507254082908254690607914577836449014373895222675395278777312980760633603910336528181401873994099581166448890958326535687294015589051421736400602202944430590985378931921990010364106238272526267844729586219438511261118164377861809241756889956834346667193146406736499743761607111507294209470441464466219746412445347939135162152984625490706002552546300398725703834630484769115333669976771003184462e217"),
           e_float("4.5237291066411855396907926944471859012782966243215617332929953904958979360340838288872271676856301543975025011664837002922387783902309978938134736401539475424024682240087784491345902613856921966027278351713966168138315582243712796222059855641097495852545782546165035917752922533451983358307922401656667275832046735276193277633219765295066258588489824952288896367191845283082619930606925045533768157874e434"),
           e_float("6.5589351083261165986874008487269232644820832071598593220455113631054897342222189460064812311467066763128105800484780605227083359410748453047735492113447848937599205598935889866650433190777812932937354966529795139894949735865466206606016357192698076860207196678795130983992537003311423943088161612434347258869219276491381457341760580432299062922765319141506523551811331931592920998332081933159040633593e651"),
           e_float("9.423086173933851630080560848825921124564123331627662057542172147545219617614704922588135765437255484230238987200314121745254120243745340593516774254526953789360831461132456622971613932551443054164933992235042470929107806314647267762975153790585591964118190440083789117502887945948295233327687321989868468036733688444276383482684674804862216548633252040580533606358976136658842473364556392137354307993e868"),
           e_float("1.3468933697149304611397039786712213549917144655138952861989386658008911876972740930030330097506203777770217230631938347520750627117515387549165205339812677495567436008171264008267981917808919627148725794280130921834812133490785310401899892413667091196274844006864300395428620549063597544709483025736377885194559553285171930724606078111670086939175306241109643263435580978797921926754244422014744441188e1086"),
           e_float("1.9189086849295883015027959882007447504099415480580913548046866966687499604680700529062164905199737300069712672710485599462231711209869594479824669810914798529450533591925751042988113529389400907831010331222585681957776616900284005154792356808628310241055644688028655082849912253501832965597182948959022429953004265299217186725696978999774727075245071573661616553141415515327060776134789500007916563524e1303"),
           e_float("2.727654939982136337426268048553177390490913828868363957785078028350879486378725585962107274242511960678192371994164620848640898223498629629920927781167365498809878786498279866080599392462277175048982916484195333435308912419681025472496326453415438077575909648927285232208223185829703266642358156369006607115766696834561211316559087125791808708081804987200946532272264213096952534967155740716868846913e1520"),
           e_float("3.8707878367622639000922807630956754520021914555813419180894902980949760006861240868967525946406107324337624735380895720332326937799068506051455939843112341203098348274719655743687778727630970032008291850038602748464097931841750254206840904773704596796747949238776094449780028913459669825200303518718031736039435271421396104029456443985716828597597441760152096427010623334387280717595671274934099319315e1737"),
           e_float("5.4859699945966651931619897246242545251959631178123164200459716944195545506768011868197635607984115715154173807283414690684151574090255530516300793140280056755390649060250362887523575850628065961250712352566144983015799632809499148278829032181073778366671775367650475933868595890003539432073915706898927003298100394903529363688105116789291973109845113515170210433971044347257873210076216391989633593724e1954"),
           e_float("7.7672587735980552296563824673833918177263798574153774689731929197220092332128691496352822357367019251058939462746520491843814589569758816997798690020065509040510523656741535127093742728363289771101483185709770367553172764471162777452212054150235268192701695129053217795599627298185794428363782211477984559983357538940922384656733700718585058503177034785672721798068312962528788287131438483720371326557e2171"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00821_conf_hyperg_pos_x(const bool b_write_output)
    {
      return TestCase_case_00821_conf_hyperg_pos_x().execute(b_write_output);
    }
  }
}
