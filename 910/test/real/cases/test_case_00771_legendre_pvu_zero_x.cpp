
// Automatically generated file
#include <functions/functions.h>
#include <test/real/test_case_real.h>

namespace test
{
  namespace real
  {
    class TestCase_case_00771_legendre_pvu_zero_x : public TestCaseReal
    {
    public:
      TestCase_case_00771_legendre_pvu_zero_x() { }
      virtual ~TestCase_case_00771_legendre_pvu_zero_x() { }
    private:
      virtual const std::string& name(void) const
      {
        static const std::string str("TestCase_case_00771_legendre_pvu_zero_x");
        return str;
      }
      virtual void e_float_test(std::vector<e_float>& data) const
      {
        data.resize(11u);
        for(INT32 k = static_cast<INT32>(0); k < static_cast<INT32>(data.size()); k++)
        {
          const e_float v = (ef::pi() / 4) * (k + 1);
          const e_float u = ef::euler_gamma() * (k + 1);
          data[k] = ef::legendre_p(v * v, u * u, ef::zero());
        }
      }
      virtual const std::vector<e_float>& control_data(void) const
      {
        static const std::tr1::array<e_float, 11u> a =
        {{
           e_float("0.060455131698005696764440905952380061896496762535553535282894496165478168199564392394109834109032304697142412704648298741720644534965731475090852548608135868371069487642314630726181401921278253732070823835591550045383440424245809441395270987839665130045233338213108520816727853521305760787588023817702752137101782910264546466805676640518683293628683621703346919992437122994285566379618111705961625230852"),
           e_float("1.8859248963644333320031519314432629667594985215571845121383982343885797609064806940212929380203514627133462797854212493948714522416030184887626454533997621211277322180307158493644061482105170330624420456867175204652489097229791855722936591022593285283375597780668090134696923161859901869591533354352407792386076450999640825664216682559725173805832517419738320222597465389583625857465221035123005258934"),
           e_float("43.764061193209822055503956555466102556426044153631570342103070362080278486273605490293858468231440245856840494076614005133143638218466163214885820848001354300932598994447104139617804949428656974000061843765256340752606034031281400486993504300145403438982801314827685611957056983197418116032534026053520917369143638462015645499082814919882990764003673986722816913527251325757968846154383088143838677189"),
           e_float("16693.665152315951725879585417320221175455191244145322789403247272690227552582234713616420797077159194728793527462933248617979264462417518617559236452543805181160537233379229265056988166670657464502390831169162730981097507820060669754696791629796316774335966247777863915642117924458002164278334463102026451602789633322691748511678311900588465703008843255084888197294555032830245225297103962623657038097"),
           e_float("1.3588754002335593946658931109939160514607948845081245046998892676859499666015920469662134693022672141834121239781929689038643173322556341633470145037152076744161241080265643485868748203866155989707744221694468050467104111175360364857031385413596122296325687679469978957589926090506714100857778951948614802519100154559823726622248505349922869112228972833943291806156534835439994938106697743745592636597e9"),
           e_float("-1.7310043769297050453650898591338507594250492504157469575179286875534605131520728153621914672080310517511549047575619715928869809715593577111095112655615057261124706738640104598168713109537968806310190045045786648611933307406522627107177531571239914654132321319474787226963693707165996946628867863212270374700139785859913815502076970299402202187554003925499811037240317800671979549703711377862714751968e15"),
           e_float("-8.3964306217563602919029812686541702949808585715111802921013074472580317444385704407958859350087463852625708743255455966940726970795403858947842687740916728285217781876072747124707930513220930017792687593927886774072430925244367022325034755889144424170520966834306788432662784630448457386134922095450794576538484475849527643580579146133392070159910620569931508098671914887692145983742119037484263761748e22"),
           e_float("1.9838676877342227294990062418818389036925127231887116088349640891933286892054037922709631386892416322437029216577651550423066407323781367396575252591882140064485258966710903196240372369484735586313693461376808012275557835114235133848374763018618338889762317126739411528674541925797282429944726472994227791951957712214177034791571179137060917700218195033034757950933332585428645089003678933267703228836e32"),
           e_float("2.025148113817462064596421143874092362490492374351800849107157928592680930484327327096905791662777870895350376636553743307457928205113944286775320584900020295234528950955157662805041930346542101910722251646741167649547178394217643803526787541315160549208102004167309680725591102371552645547303422541321515742366725749959411569047929542293587381399142823596067261901834442556199564646485186782184332235e43"),
           e_float("4.8785136631251373643697151350425470552997991277468396361337378251849415412532894149163189077776151711666831175050920891170645190867230976920927384671318354689431418861904234832961421994178850254611061670794847600353043350627024272397372600243463146144910520937835700552037258888874252452314966919318317790279204306970101279618210870186582647997010785919271051158115823264189024266969347369833058497865e55"),
           e_float("-3.6734416750166379564654410652858959692488744000622166160563861471595792501949968545061954216420349737856733154798271093152850355096052788663526365690927156498174741913976230414158900397453087982347266628642864800160633021803496209685930184650833296910106942663130101644492860891128113706422143419800161606822650060383961223772179539094253173847488701190772617797080723509294393259336321564093114557078e72"),
        }};
        static const std::vector<e_float> v(a.begin(), a.end());
        return v;
      }
    };

    bool test_case_00771_legendre_pvu_zero_x(const bool b_write_output)
    {
      return TestCase_case_00771_legendre_pvu_zero_x().execute(b_write_output);
    }
  }
}
