*** isdinf.f	Fri Jun 16 19:45:21 2000
--- isdinf.pgi	Mon Jun 12 18:46:09 2000
***************
*** 2,19 ****
  ************************************************************************
  *     (Is x infinite?)
  *     Return .TRUE. if x is infinite, and .FALSE. otherwise.
  *     [12-Jun-2000]
  ************************************************************************
  *
! *     Parameter variables
! *
!       DOUBLE PRECISION    zero
!       PARAMETER           (zero = 0.0d+00)
  *
  *     Argument variables
  *
        DOUBLE PRECISION    x
  *
!       isdinf = (x .NE. zero) .AND. ((x + x) .EQ. x)
  *
        END
--- 2,51 ----
  ************************************************************************
  *     (Is x infinite?)
  *     Return .TRUE. if x is infinite, and .FALSE. otherwise.
+ *
+ *     This version uses low-level bit operations to examine
+ *     the bit patterns of x dynamically determining the endian-ness,
+ *     so that it works on all IEEE 754 systems with support for the
+ *     MILSTD and Fortran 95 bit manipulation functions, iand() and
+ *     ishft().
+ *
+ *     Some compilers generate incorrect code for the much simpler test:
+ *
+ *         isdinf = ((x + x) .EQ. x) .AND. (x .NE. zero)
+ *
+ *     so this version provides a reasonably portable workaround.
+ *
  *     [12-Jun-2000]
  ************************************************************************
  *
!       INTEGER             iand,        ishft
  *
  *     Argument variables
  *
        DOUBLE PRECISION    x
  *
! *     Local variables
! *
!       DOUBLE PRECISION    xx
! *
!       INTEGER             hi,          ix(2),       lo
! *
!       EQUIVALENCE         (ix(1), xx)
! *
!       xx = 1.0d+00
!       IF (ix(1) .EQ. 0) THEN
! *         little endian
!           hi = 2
!           lo = 1
!       ELSE
! *         big endian
!           hi = 1
!           lo = 2
!       END IF
! *
!       xx = x
! *
!       isdinf = ((iand(2047,ishft(ix(hi), -20)) .EQ. 2047) .AND.
!      X         ((iand(ix(hi),1048575) .EQ. 0) .AND. (ix(lo) .EQ. 0)))
  *
        END
*** isdnan.f	Sat Jun 17 10:27:59 2000
--- isdnan.pgi	Tue Jun 27 17:21:06 2000
***************
*** 3,59 ****
  *     (Is x a NaN?)
  *     Return .TRUE. if x is a NaN, and .FALSE. otherwise.
  *
! *     This function should be implementable as a simple inline test
! *     for inequality of x with itself:
  *
! *         isdnan = (x .ne. x)
  *
! *     in ALL compilers for ALL programming languages on ALL systems
! *     with IEEE 754 arithmetic.
  *
! *     Unfortunately, some compilers, even without optimization,
! *     incorrectly reduce this test to .FALSE.  This happens with all
! *     optimization levels on SGI IRIX 6.x f77 and f90 compilers.
! *     Thus, we have to obfuscate the test by wrapping one operand in
! *     a function call.  This successfully foiled the SGI compilers,
! *     without requiring disassembly and examination of the bit
! *     patterns of x.
! *     [10-Jun-2000]
! ************************************************************************
! *
! *     External functions
  *
!       EXTERNAL            dstorf
  *
!       DOUBLE PRECISION    dstorf
  *
  *     Argument variables
  *
        DOUBLE PRECISION    x
  *
!       isdnan = (dstorf(x) .NE. x)
  *
        END
- **
- **     This more complex version is needed to work around PGI compiler
- **     bugs: It also works on Compaq/DEC, GNU/Linux, HP, IBM, SGI, and
- **     Sun systems, but does need the MILSTD/Fortran 95 bit intrinsics.
- **
- *      LOGICAL FUNCTION isdnan(x)
- *      INTEGER             iand,        ishft
- *      DOUBLE PRECISION    x
- *      DOUBLE PRECISION    xx
- *      INTEGER             hi,          ix(2),       lo
- *      EQUIVALENCE         (ix(1), xx)
- *      xx = 1.0d+00
- *      IF (ix(1) .EQ. 0) THEN
- *          hi = 2
- *          lo = 1
- *      ELSE
- *          hi = 1
- *          lo = 2
- *      END IF
- *      xx = x
- *      isdnan = ((iand(2047,ishft(ix(hi), -20)) .EQ. 2047) .AND.
- *     X         ((iand(ix(hi),1048575) .NE. 0) .OR. (ix(lo) .NE. 0)))
- *      END
--- 3,51 ----
  *     (Is x a NaN?)
  *     Return .TRUE. if x is a NaN, and .FALSE. otherwise.
  *
! *     This version uses low-level bit operations to examine
! *     the bit patterns of x dynamically determining the endian-ness,
! *     so that it works on all IEEE 754 systems with support for the
! *     MILSTD and Fortran 95 bit manipulation functions, iand() and
! *     ishft().
  *
! *     Some compilers generate incorrect code for the much simpler test:
  *
! *         isdnan = (x .NE. x)
  *
! *     so this version provides a reasonably portable workaround.
  *
! *     [12-Jun-2000]
! ************************************************************************
  *
!       INTEGER             iand,        ishft
  *
  *     Argument variables
  *
        DOUBLE PRECISION    x
  *
! *     Local variables
! *
!       DOUBLE PRECISION    xx
! *
!       INTEGER             hi,          ix(2),       lo
! *
!       EQUIVALENCE         (ix(1), xx)
! *
!       xx = 1.0d+00
!       IF (ix(1) .EQ. 0) THEN
! *         little endian
!           hi = 2
!           lo = 1
!       ELSE
! *         big endian
!           hi = 1
!           lo = 2
!       END IF
! *
!       xx = x
! *
!       isdnan = ((iand(2047,ishft(ix(hi), -20)) .EQ. 2047) .AND.
!      X         ((iand(ix(hi),1048575) .NE. 0) .OR. (ix(lo) .NE. 0)))
  *
        END
