### Numerical evaluation of Gamma(x)
###
### where Gamma(n+1) = factorial(n)
###
### x = f * 2^p
###
### Line format: 2 f p neval result relerr abserr
###
interface(quiet = true):
Digits := 50 :
n := 113 :
f := array(1..113) :
p := array(1..113) :

f := [
0.0,
1.0,
-1.0,
2.0,
-2.0,
3.0,
-3.0,
4.0,
-4.0,
-1.5,
-1.0,
Inf,
NaN,
0.0,
-0.1,
-0.2,
-0.3,
-0.4,
-0.5,
-0.6,
-0.7,
-0.8,
-0.9,
-1.0,
-1.1,
-1.2,
-1.3,
-1.4,
-1.5,
-1.6,
-1.7,
-1.8,
-1.9,
-2.0,
-2.1,
-2.2,
-2.3,
-2.4,
-2.5,
-2.6,
-2.7,
-2.8,
-2.9,
-3.0,
-3.1,
-3.2,
-3.3,
-3.4,
-3.5,
-3.6,
-3.7,
-3.8,
-3.9,
-4.0,
-4.1,
-4.2,
-4.3,
-4.4,
-4.5,
-4.6,
-4.7,
-4.8,
-4.9,
-5.0,
-5.1,
-5.2,
-5.3,
-5.4,
-5.5,
-5.6,
-5.7,
-5.8,
-5.9,
-6.0,
-6.1,
-6.2,
-6.3,
-6.4,
-6.5,
-6.6,
-6.7,
-6.8,
-6.9,
-7.0,
-7.1,
-7.2,
-7.3,
-7.4,
-7.5,
-7.6,
-7.7,
-7.8,
-7.9,
-8.0,
-8.1,
-8.2,
-8.3,
-8.4,
-8.5,
-8.6,
-8.7,
-8.8,
-8.9,
-9.0,
-9.1,
-9.2,
-9.3,
-9.4,
-9.5,
-9.6,
-9.7,
-9.8,
-9.9
] :

p := [
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
] :

for i from 1 by 1 to n do
	if (evalb(f[i] = 'Inf')) then
		printf("%1d %20s %5d %1d %57s %1d %1d\n",
			2, f[i], p[i], 0, "Infinity", 0, 0)
	elif (evalf(f[i] = 'NaN')) then
		printf("%1d %20s %5d %1d %57s %1d %1d\n",
			2, f[i], p[i], 0, "NaN", 0, 0)
	else
		x := evalf(f[i]*2^p[i]):
		if (evalb((trunc(x) - x) = 0) and evalb(x <= 0)) then
			printf("%1d %20.1f %5d %1d %57s %1d %1d\n",
				2, f[i], p[i], 0, "Infinity", 0, 0)
		else
			printf("%1d %20.1f %5d %1d %57.49e %1d %1d\n",
				2, f[i], p[i], 0, GAMMA(f[i]*2^p[i]), 0, 0)
		fi
	fi
od :
