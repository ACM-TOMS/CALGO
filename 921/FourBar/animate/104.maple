#104.maple
#
#   Frank Sottile 
#   Jonathon Hauenstein
#
#  This draws the four-bar linkage interpolating nine
#   given points for solution #104.  This includes and 
#   animation of the linkage positions.  The workspace curve
#   is connected, but has three loops.
#
#   It begins with numerical solutions to Problem 4 in the
#   paper of Morgan, Sommese, and Wampler. 
#
interface(quiet=true):
with(plots):
plotsetup(x11):
read("RealSols.maple"):
#
#  Real solutions stored in file as list of Points
#
mr:=proc(r)
 return( trunc(1000000*r)/1000000 )
end proc:
###################################################
rot:=proc(r,v)
 return([(2*r*v[1] + (r^2-1)*v[2])/(1+r^2),
         (2*r*v[2] - (r^2-1)*v[1])/(1+r^2)])
end proc:
#
#  Interpolating poionts
#
P:=[[0.25, 0.00],
    [0.52, 0.10],
    [0.80, 0.70],
    [1.20, 1.00],
    [1.40, 1.30],
    [1.10, 1.48],
    [0.70, 1.40],
    [0.20, 1.00],
    [0.02, 0.40]]:

P:=[seq([mr(P[ii][1]),mr(P[ii][2])],ii=1..9)]:
Delta:=[seq([P[ii][1]-P[1][1], P[ii][2]-P[1][2]],ii=1..9)]:
Deltac:=[seq(P[ii][1]-P[1][1] + I*P[ii][2]-P[1][2],ii=1..9)]:
        
i:=104:

S:=[seq(mr(Points[i][ii]),ii=1..12)]:

# The four vectors
x:=[S[1],S[2]]:
a:=[S[3],S[4]]:
n:=[S[5],S[6]]:
y:=[S[7],S[8]]:
b:=[S[9],S[10]]:
m:=[S[11],S[12]]:

# Make them into complex numbers
xc:=x[1]+I*x[2]:
ac:=a[1]+I*a[2]:
nc:=n[1]+I*n[2]:
yc:=y[1]+I*y[2]:
bc:=b[1]+I*b[2]:
mc:=m[1]+I*m[2]:
#
#  Check that equation (9) holds.
#
evalf(simplify(ac*conjugate(xc)-nc)):
evalf(simplify(bc*conjugate(yc)-mc)):
#
#  Check that the remaining equations hold
#
for j from 2 to 9 do
solve({(conjugate(ac)-conjugate(Deltac[j]))*xc*gam + (ac-Deltac[j])*conjugate(xc)*cgam + 
         Deltac[j]*(conjugate(ac)-conjugate(xc)) + conjugate(Deltac[j])*(ac-xc)
        -Deltac[j]*conjugate(Deltac[j]),
       (conjugate(bc)-conjugate(Deltac[j]))*yc*gam + (bc-Deltac[j])*conjugate(yc)*cgam + 
         Deltac[j]*(conjugate(bc)-conjugate(yc)) + conjugate(Deltac[j])*(bc-yc)
        -Deltac[j]*conjugate(Deltac[j])},
   {gam,cgam}):
end do:
###########################################################################

# The Anchor points
A:=[P[1][1]+a[1], P[1][2]+a[2]]:
B:=[P[1][1]+b[1], P[1][2]+b[2]]:
#
# Two legs of four-bar mechanism, as vectors
#
u:=rot(0,[x[1]-a[1], x[2]-a[2]]):
v:=rot(-7/2,[y[1]-b[1], y[2]-b[2]]):
#
#  The w-bar (as a vector), and its length
#
w:=[y[1]-x[1], y[2]-x[2]]:
Pars:=solve({al*w[1]+be*w[2]=x[1], al*w[2]-be*w[1]=x[2]},{al,be}):

#####################################################################
#
#  p and q are the positions of the endpoints of the u-bar and the v-bar
#
p := (s,t) -> [A[1]+(2*s*t*u[1]+(s^2-t^2)*u[2])/(s^2+t^2), 
               A[2]+(2*s*t*u[2]-(s^2-t^2)*u[1])/(s^2+t^2)]:
q := (s,t) -> [B[1]+(2*s*t*v[1]+(s^2-t^2)*v[2])/(s^2+t^2), 
               B[2]+(2*s*t*v[2]-(s^2-t^2)*v[1])/(s^2+t^2)]:
#
#  The one equation is that dist(p,q) = |w|.
#
W:=[q(1,t)[1]-p(1,s)[1],q(1,t)[2]-p(1,s)[2]]:
X:=simplify(subs(op(Pars),[p(1,s)[1]-al*W[1]-be*W[2], p(1,s)[2]-al*W[2]+be*W[1]])):

G:=(p(1,s)[1]-q(1,t)[1])^2+(p(1,s)[2]-q(1,t)[2])^2-(w[1]^2+w[2]^2):
G:=numer(simplify(G)):
#implicitplot(G,s=-2..2, t=-2..2,grid=[100,250],color=red);


At:=coeff(G,t^2): Bt:=coeff(G,t): Ct:=subs(t=0,G):
t1:= unapply((-Bt + (sqrt(Bt^2-4*At*Ct)))/2/At,s):
t2:= unapply((-Bt - (sqrt(Bt^2-4*At*Ct)))/2/At,s):

As:=coeff(G,s^2): Bs:=coeff(G,s): Cs:=subs(s=0,G):
s1:= unapply((-Bs + (sqrt(Bs^2-4*As*Cs)))/2/As,t):
s2:= unapply((-Bs - (sqrt(Bs^2-4*As*Cs)))/2/As,t):
#####################################################################


SL:=sort([fsolve(Bt^2-4*At*Ct=0,s)]):
TL:=sort([fsolve(Bs^2-4*As*Cs=0,t)]):
SeT:=sort([fsolve(subs(s=t,G)=0,t)]):
SnT:=sort([fsolve(subs(s=-t,G)=0,t)]):
TnS:=sort([fsolve(subs(t=-s,G)=0,s)]):

eps:=0.0000001:
SL:=[SL[1]+eps,SL[2]-eps]:
TL:=[TL[1]+eps,TL[2]-eps]:

xx:=unapply(X,s,t):

# For .eps figure
Gr:=pointplot([A,B],symbol=point,color=pink):
Po:=pointplot(P,symbol=point,color=red):

# For animation
Gr:=[pointplot([A,B],symbol=cross,color=black),
     pointplot([A,B],symbol=circle,color=red),
     pointplot([[0,5/2]],symbol=cross, color=black)]:
Po:=pointplot(P,symbol=circle,color=red):

lf:=-1/2: ri:=23/10:
bo:=-3/5: tp:=7/4:
Frame:=plottools[curve]([[lf,bo],[lf,tp],[ri,tp],[ri,bo],[lf,bo]],color=green):
	 
plotR:=[plot([xx(s,t1(s))[],s=SeT[2]..SL[2]], color=blue,thickness=2),
        plot([xx(s,t2(s))[],s=-SnT[1]..SL[2]], color=blue,thickness=2),
        plot([xx(s1(t),t)[],t=TL[1]..SnT[1]], color=blue,thickness=2),
        plot([xx(s2(t),t)[],t=TL[1]..SeT[1]], color=blue,thickness=2),
        plot([xx(s,t2(s))[],s=SL[1]..SeT[1]], color=blue,thickness=2),
        plot([xx(s,t1(s))[],s=SL[1]..TnS[1]], color=blue,thickness=2),
        plot([xx(s2(t),t)[],t=-TnS[1]..TL[2]], color=blue,thickness=2),
        plot([xx(s1(t),t)[],t=SeT[2]..TL[2]], color=blue,thickness=2),
        NULL]:
# SL := [-3.692438007, 4.354192614]
#  TL := [-10.53370572, 10.94033485]
	

ls:=-4/3:
fa:=[plottools[curve]([A,p(1,ls),q(1,t1(ls)),B],color=black),
     plottools[curve]([p(1,ls),xx(ls,t1(ls)),q(1,t1(ls))],color=black)]:

FB:=proc(t)
 local l,ls,lt:
 if t>=0 and t<=1 then
   l:=t:
   ls:=SeT[2]+l*(SL[2]-SeT[2]):
   display([plottools[curve]([A,p(1,ls),q(1,t1(ls)),B],color=black,thickness=2),
            plottools[curve]([p(1,ls),xx(ls,t1(ls)),q(1,t1(ls))],color=black,thickness=2)]);
  elif t>=1 and t<=2 then
   l:=t-1:
   ls:=SL[2]+l*(-SnT[1]-SL[2]):
   display([plottools[curve]([A,p(1,ls),q(1,t2(ls)),B],color=black,thickness=2),
            plottools[curve]([p(1,ls),xx(ls,t2(ls)),q(1,t2(ls))],color=black,thickness=2)]);
  elif t>=2 and t<=3 then
   l:=t-2:
   lt:=SnT[1]+l*(TL[1]-SnT[1]):
   display([plottools[curve]([A,p(1,s1(lt)),q(1,lt),B],color=black,thickness=2),
            plottools[curve]([p(1,s1(lt)),xx(s1(lt),lt),q(1,lt)],color=black,thickness=2)]);
  elif t>=3 and t<=4 then
   l:=t-3:
   lt:=TL[1]+l*(SeT[1]-TL[1]):
   display([plottools[curve]([A,p(1,s2(lt)),q(1,lt),B],color=black,thickness=2),
            plottools[curve]([p(1,s2(lt)),xx(s2(lt),lt),q(1,lt)],color=black,thickness=2)]);

  elif t>=4 and t<=6 then
   l:=(t-4)/2:
   ls:=SeT[1]+l*(SL[1]-SeT[1]):
   display([plottools[curve]([A,p(1,ls),q(1,t2(ls)),B],color=black,thickness=2),
            plottools[curve]([p(1,ls),xx(ls,t2(ls)),q(1,t2(ls))],color=black,thickness=2)]);

  elif t>=6 and t<=7 then
   l:=t-6:
   ls:=SL[1]+l*(TnS[1]-SL[1]):
   display([plottools[curve]([A,p(1,ls),q(1,t1(ls)),B],color=black,thickness=2),
            plottools[curve]([p(1,ls),xx(ls,t1(ls)),q(1,t1(ls))],color=black,thickness=2)]);
  elif t>=7 and t<=8 then
   l:=t-7:
   lt:=-TnS[1]+l*(TL[2]+TnS[1]):
   display([plottools[curve]([A,p(1,s2(lt)),q(1,lt),B],color=black,thickness=2),
            plottools[curve]([p(1,s2(lt)),xx(s2(lt),lt),q(1,lt)],color=black,thickness=2)]);
  elif t>=8 and t<=9 then
   l:=t-8:
   lt:=TL[2]+l*(SeT[2]-TL[2]):
   display([plottools[curve]([A,p(1,s1(lt)),q(1,lt),B],color=black,thickness=2),
            plottools[curve]([p(1,s1(lt)),xx(s1(lt),lt),q(1,lt)],color=black,thickness=2)]);
 else
   l:=t:
   ls:=SeT[2]+l*(SL[2]-SeT[2]):
   display([plottools[curve]([A,p(1,ls),q(1,t1(ls)),B],color=black,thickness=2)],
           [plottools[curve]([p(1,ls),xx(ls,t1(ls)),q(1,t1(ls))],color=black,thickness=2)]);
 end if:  
end proc:

Bk:=[plotR,Po,Gr,Frame]:
#
#
# small:  150 150 
#plotsetup(gif,plotoutput="movie.gif",plotoptions=`height=320,width=320`):
#  med: 200 200 
#animate(FB,[t],t=0..9, frames=90, background=display(Bk[]), scaling=constrained,axes=none);
#   lg: 300 high   y=180
plotsetup(gif,plotoutput="movie.gif",plotoptions=`height=535,width=535`):
animate(FB,[t],t=0..9, frames=200, background=display(Bk[]), scaling=constrained,axes=none);


#plotsetup(ps,plotoutput=`B.eps`,plotoptions=`color,portrait,width=3in,height=3in,noborder`):
#display(fa,Bk[],scaling=constrained,axes=none);
 
