--------------------------------------------------------------
Wathen: nx 4 ny 4 n 65 nz 817 method 0, time: 0.000 sec

GraphBLAS matrix: from get_matrix: 
nrows: 65 ncols: 65 max # entries: 817
format: standard CSR vlen: 65 nvec_nonempty: 65 nvec: 65 plen: 65 vdim: 65
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 752 
row: 0 : 7 entries [0:6]
    column 1: double -6.85160883409121
    column 2: double 2.28386961136374
    column 9: double -6.85160883409121
    column 10: double -9.13547844545495
    column 14: double 2.28386961136374
    column 15: double -9.13547844545495
    column 16: double 3.42580441704561
row: 1 : 7 entries [7:13]
    column 0: double -6.85160883409121
    column 2: double -6.85160883409121
    column 9: double 22.8386961136374
    column 10: double 22.8386961136374
    column 14: double -9.13547844545495
    column 15: double 18.2709568909099
    column 16: double -9.13547844545495
row: 2 : 12 entries [14:25]
    column 0: double 2.28386961136374
    column 1: double -6.85160883409121
    column 3: double -2.34300770083722
    column 4: double 0.781002566945742
    column 9: double -9.13547844545495
    column 10: double -9.19461653492844
    column 11: double -3.12401026778297
    column 14: double 3.42580441704561
    column 15: double -9.13547844545495
    column 16: double 3.06487217830948
    column 17: double -3.12401026778297
    column 18: double 1.17150385041861
row: 3 : 7 entries [26:32]
    column 2: double -2.34300770083722
    column 4: double -2.34300770083722
    column 10: double 7.81002566945742
    column 11: double 7.81002566945742
    ...
row: 4 : 12 entries [33:44]
    ...
row: 5 : 7 entries [45:51]
    ...
row: 6 : 12 entries [52:63]
    ...
row: 7 : 7 entries [64:70]
    ...
row: 8 : 7 entries [71:77]
    ...
row: 9 : 7 entries [78:84]
    ...
...

total time to read A matrix:       0.000430 sec

n 65 # edges 376
U=triu(A) time:        0.000027 sec
read A, create U memory usage: 2.9137e-05 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000013 sec
# triangles 872

tricount time:         0.000092 sec (dot product method)
tri+prep time:         0.000132 sec (incl time to compute L and U)
compute C time:        0.000073 sec
reduce (C) time:       0.000019 sec
rate       2.86 million edges/sec (incl time for U=triu(A))
rate       4.10 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 2.964e-05 GB

----------------------------------- outer product method:
tricount time:         0.000052 sec (outer product method)
tri+prep time:         0.000065 sec (incl time to compute L)
compute C time:        0.000044 sec
reduce (C) time:       0.000008 sec
rate       5.77 million edges/sec (incl time for L=tril(A))
rate       7.25 million edges/sec (just tricount itself)

tricount (outer) memory usage: 2.9137e-05 GB

--------------------------------------------------------------
random 5 by 5, nz: 16, method 1 time 0.000 sec

GraphBLAS matrix: from get_matrix: 
nrows: 5 ncols: 5 max # entries: 16
format: standard CSR vlen: 5 nvec_nonempty: 5 nvec: 5 plen: 5 vdim: 5
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 16 
row: 0 : 3 entries [0:2]
    column 1: double 0.654957731864376
    column 2: double 0.625904110843226
    column 4: double 0.0357371745963927
row: 1 : 3 entries [3:5]
    column 0: double 0.654957731864376
    column 2: double 0.0953093050935392
    column 3: double 0.919644764549699
row: 2 : 4 entries [6:9]
    column 0: double 0.625904110843226
    column 1: double 0.0953093050935392
    column 3: double 0.0680867946409497
    column 4: double 0.331888790551469
row: 3 : 3 entries [10:12]
    column 1: double 0.919644764549699
    column 2: double 0.0680867946409497
    column 4: double 0.885311441389203
row: 4 : 3 entries [13:15]
    column 0: double 0.0357371745963927
    column 2: double 0.331888790551469
    column 3: double 0.885311441389203

total time to read A matrix:       0.000238 sec

n 5 # edges 8
U=triu(A) time:        0.000018 sec
read A, create U memory usage: 1.672e-06 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000006 sec
# triangles 4

tricount time:         0.000073 sec (dot product method)
tri+prep time:         0.000097 sec (incl time to compute L and U)
compute C time:        0.000057 sec
reduce (C) time:       0.000016 sec
rate       0.08 million edges/sec (incl time for U=triu(A))
rate       0.11 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.704e-06 GB

----------------------------------- outer product method:
tricount time:         0.000055 sec (outer product method)
tri+prep time:         0.000061 sec (incl time to compute L)
compute C time:        0.000047 sec
reduce (C) time:       0.000008 sec
rate       0.13 million edges/sec (incl time for L=tril(A))
rate       0.15 million edges/sec (just tricount itself)

tricount (outer) memory usage: 1.839e-06 GB

--------------------------------------------------------------
ntuples: 3
nrows 3 ncols 3
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000090
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000024

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 3 ncols: 3 max # entries: 0
format: hypersparse CSR vlen: 3 nvec_nonempty: 0 nvec: 0 plen: 0 vdim: 3
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
empty
number of entries: 0 
matrix 3 by 3, 0 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 3 ncols: 3 max # entries: 0
format: hypersparse CSR vlen: 3 nvec_nonempty: 0 nvec: 0 plen: 0 vdim: 3
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
empty
number of entries: 0 

total time to read A matrix:       0.000252 sec

n 3 # edges 0
U=triu(A) time:        0.000016 sec
read A, create U memory usage: 9.3e-07 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000015 sec
# triangles 0

tricount time:         0.000064 sec (dot product method)
tri+prep time:         0.000095 sec (incl time to compute L and U)
compute C time:        0.000043 sec
reduce (C) time:       0.000021 sec
rate       0.00 million edges/sec (incl time for U=triu(A))
rate       0.00 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.044e-06 GB

----------------------------------- outer product method:
tricount time:         0.000051 sec (outer product method)
tri+prep time:         0.000065 sec (incl time to compute L)
compute C time:        0.000034 sec
reduce (C) time:       0.000017 sec
rate       0.00 million edges/sec (incl time for L=tril(A))
rate       0.00 million edges/sec (just tricount itself)

tricount (outer) memory usage: 9.3e-07 GB

--------------------------------------------------------------
ntuples: 8
nrows 4 ncols 4
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000082
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000034

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 4 ncols: 4 max # entries: 4
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4 
row: 0 : 1 entries [0:0]
    column 1: bool 1
row: 1 : 1 entries [1:1]
    column 0: bool 1
row: 2 : 1 entries [2:2]
    column 3: bool 1
row: 3 : 1 entries [3:3]
    column 2: bool 1
matrix 4 by 4, 4 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4 ncols: 4 max # entries: 4
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4 
row: 0 : 1 entries [0:0]
    column 1: bool 1
row: 1 : 1 entries [1:1]
    column 0: bool 1
row: 2 : 1 entries [2:2]
    column 3: bool 1
row: 3 : 1 entries [3:3]
    column 2: bool 1

total time to read A matrix:       0.000269 sec

n 4 # edges 2
U=triu(A) time:        0.000030 sec
read A, create U memory usage: 1.12e-06 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000007 sec
# triangles 0

tricount time:         0.000055 sec (dot product method)
tri+prep time:         0.000092 sec (incl time to compute L and U)
compute C time:        0.000043 sec
reduce (C) time:       0.000013 sec
rate       0.02 million edges/sec (incl time for U=triu(A))
rate       0.04 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.248e-06 GB

----------------------------------- outer product method:
tricount time:         0.000043 sec (outer product method)
tri+prep time:         0.000049 sec (incl time to compute L)
compute C time:        0.000036 sec
reduce (C) time:       0.000007 sec
rate       0.04 million edges/sec (incl time for L=tril(A))
rate       0.05 million edges/sec (just tricount itself)

tricount (outer) memory usage: 1.12e-06 GB

--------------------------------------------------------------
ntuples: 10
nrows 4 ncols 4
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000090
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000048

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 4 ncols: 4 max # entries: 10
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 10 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
row: 1 : 3 entries [3:5]
    column 0: bool 1
    column 2: bool 1
    column 3: bool 1
row: 2 : 2 entries [6:7]
    column 0: bool 1
    column 1: bool 1
row: 3 : 2 entries [8:9]
    column 0: bool 1
    column 1: bool 1
matrix 4 by 4, 10 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4 ncols: 4 max # entries: 10
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 10 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
row: 1 : 3 entries [3:5]
    column 0: bool 1
    column 2: bool 1
    column 3: bool 1
row: 2 : 2 entries [6:7]
    column 0: bool 1
    column 1: bool 1
row: 3 : 2 entries [8:9]
    column 0: bool 1
    column 1: bool 1

total time to read A matrix:       0.000287 sec

n 4 # edges 5
U=triu(A) time:        0.000015 sec
read A, create U memory usage: 1.233e-06 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000008 sec
# triangles 2

tricount time:         0.000076 sec (dot product method)
tri+prep time:         0.000099 sec (incl time to compute L and U)
compute C time:        0.000061 sec
reduce (C) time:       0.000015 sec
rate       0.05 million edges/sec (incl time for U=triu(A))
rate       0.07 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.505e-06 GB

----------------------------------- outer product method:
tricount time:         0.000039 sec (outer product method)
tri+prep time:         0.000047 sec (incl time to compute L)
compute C time:        0.000033 sec
reduce (C) time:       0.000007 sec
rate       0.11 million edges/sec (incl time for L=tril(A))
rate       0.13 million edges/sec (just tricount itself)

tricount (outer) memory usage: 1.31e-06 GB

--------------------------------------------------------------
ntuples: 8
nrows 4 ncols 3
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000082
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000058

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 7 ncols: 7 max # entries: 16
format: standard CSR vlen: 7 nvec_nonempty: 7 nvec: 7 plen: 7 vdim: 7
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 16 
row: 0 : 2 entries [0:1]
    column 5: bool 1
    column 6: bool 1
row: 1 : 2 entries [2:3]
    column 5: bool 1
    column 6: bool 1
row: 2 : 1 entries [4:4]
    column 4: bool 1
row: 3 : 3 entries [5:7]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
row: 4 : 2 entries [8:9]
    column 2: bool 1
    column 3: bool 1
row: 5 : 3 entries [10:12]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
row: 6 : 3 entries [13:15]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
matrix 7 by 7, 16 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 7 ncols: 7 max # entries: 16
format: standard CSR vlen: 7 nvec_nonempty: 7 nvec: 7 plen: 7 vdim: 7
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 16 
row: 0 : 2 entries [0:1]
    column 5: bool 1
    column 6: bool 1
row: 1 : 2 entries [2:3]
    column 5: bool 1
    column 6: bool 1
row: 2 : 1 entries [4:4]
    column 4: bool 1
row: 3 : 3 entries [5:7]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
row: 4 : 2 entries [8:9]
    column 2: bool 1
    column 3: bool 1
row: 5 : 3 entries [10:12]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
row: 6 : 3 entries [13:15]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1

total time to read A matrix:       0.000317 sec

n 7 # edges 8
U=triu(A) time:        0.000019 sec
read A, create U memory usage: 5.409e-06 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000006 sec
# triangles 0

tricount time:         0.000065 sec (dot product method)
tri+prep time:         0.000090 sec (incl time to compute L and U)
compute C time:        0.000044 sec
reduce (C) time:       0.000021 sec
rate       0.09 million edges/sec (incl time for U=triu(A))
rate       0.12 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 5.409e-06 GB

----------------------------------- outer product method:
tricount time:         0.000057 sec (outer product method)
tri+prep time:         0.000064 sec (incl time to compute L)
compute C time:        0.000049 sec
reduce (C) time:       0.000009 sec
rate       0.13 million edges/sec (incl time for L=tril(A))
rate       0.14 million edges/sec (just tricount itself)

tricount (outer) memory usage: 5.409e-06 GB

--------------------------------------------------------------
ntuples: 438
nrows 219 ncols 85
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000981
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.001034

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 304 ncols: 304 max # entries: 876
format: standard CSR vlen: 304 nvec_nonempty: 304 nvec: 304 plen: 304 vdim: 304
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 876 
row: 0 : 2 entries [0:1]
    column 219: bool 1
    column 220: bool 1
row: 1 : 2 entries [2:3]
    column 219: bool 1
    column 226: bool 1
row: 2 : 2 entries [4:5]
    column 219: bool 1
    column 225: bool 1
row: 3 : 2 entries [6:7]
    column 219: bool 1
    column 224: bool 1
row: 4 : 2 entries [8:9]
    column 220: bool 1
    column 221: bool 1
row: 5 : 2 entries [10:11]
    column 220: bool 1
    column 228: bool 1
row: 6 : 2 entries [12:13]
    column 220: bool 1
    column 227: bool 1
row: 7 : 2 entries [14:15]
    column 220: bool 1
    column 226: bool 1
row: 8 : 2 entries [16:17]
    column 221: bool 1
    column 222: bool 1
row: 9 : 2 entries [18:19]
    column 221: bool 1
...
matrix 304 by 304, 876 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 304 ncols: 304 max # entries: 876
format: standard CSR vlen: 304 nvec_nonempty: 304 nvec: 304 plen: 304 vdim: 304
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 876 
row: 0 : 2 entries [0:1]
    column 219: bool 1
    column 220: bool 1
row: 1 : 2 entries [2:3]
    column 219: bool 1
    column 226: bool 1
row: 2 : 2 entries [4:5]
    column 219: bool 1
    column 225: bool 1
row: 3 : 2 entries [6:7]
    column 219: bool 1
    column 224: bool 1
row: 4 : 2 entries [8:9]
    column 220: bool 1
    column 221: bool 1
row: 5 : 2 entries [10:11]
    column 220: bool 1
    column 228: bool 1
row: 6 : 2 entries [12:13]
    column 220: bool 1
    column 227: bool 1
row: 7 : 2 entries [14:15]
    column 220: bool 1
    column 226: bool 1
row: 8 : 2 entries [16:17]
    column 221: bool 1
    column 222: bool 1
row: 9 : 2 entries [18:19]
    column 221: bool 1
...

total time to read A matrix:       0.002725 sec

n 304 # edges 438
U=triu(A) time:        0.000032 sec
read A, create U memory usage: 3.6343e-05 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000017 sec
# triangles 0

tricount time:         0.000075 sec (dot product method)
tri+prep time:         0.000124 sec (incl time to compute L and U)
compute C time:        0.000059 sec
reduce (C) time:       0.000016 sec
rate       3.54 million edges/sec (incl time for U=triu(A))
rate       5.88 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 4.0529e-05 GB

----------------------------------- outer product method:
tricount time:         0.000075 sec (outer product method)
tri+prep time:         0.000093 sec (incl time to compute L)
compute C time:        0.000067 sec
reduce (C) time:       0.000008 sec
rate       4.72 million edges/sec (incl time for L=tril(A))
rate       5.80 million edges/sec (just tricount itself)

tricount (outer) memory usage: 3.6343e-05 GB

--------------------------------------------------------------
ntuples: 224
nrows 48 ncols 48
time to prune self-edges:     0.000005
time to build the graph with GrB_Matrix_build:     0.000121
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000084

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 48 ncols: 48 max # entries: 352
format: standard CSR vlen: 48 nvec_nonempty: 48 nvec: 48 plen: 48 vdim: 48
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 352 
row: 0 : 7 entries [0:6]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 10: bool 1
    column 18: bool 1
    column 24: bool 1
    column 29: bool 1
row: 1 : 7 entries [7:13]
    column 3: bool 1
    column 5: bool 1
    column 7: bool 1
    column 9: bool 1
    column 19: bool 1
    column 23: bool 1
    column 25: bool 1
row: 2 : 7 entries [14:20]
    column 3: bool 1
    column 4: bool 1
    column 8: bool 1
    column 20: bool 1
    column 22: bool 1
    column 26: bool 1
    column 27: bool 1
row: 3 : 7 entries [21:27]
    column 1: bool 1
    column 2: bool 1
    column 7: bool 1
    column 9: bool 1
    column 21: bool 1
    column 26: bool 1
    column 27: bool 1
row: 4 : 7 entries [28:34]
    column 0: bool 1
    column 2: bool 1
    ...
row: 5 : 7 entries [35:41]
    ...
row: 6 : 7 entries [42:48]
    ...
row: 7 : 7 entries [49:55]
    ...
row: 8 : 7 entries [56:62]
    ...
row: 9 : 7 entries [63:69]
    ...
...
matrix 48 by 48, 352 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 48 ncols: 48 max # entries: 352
format: standard CSR vlen: 48 nvec_nonempty: 48 nvec: 48 plen: 48 vdim: 48
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 352 
row: 0 : 7 entries [0:6]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 10: bool 1
    column 18: bool 1
    column 24: bool 1
    column 29: bool 1
row: 1 : 7 entries [7:13]
    column 3: bool 1
    column 5: bool 1
    column 7: bool 1
    column 9: bool 1
    column 19: bool 1
    column 23: bool 1
    column 25: bool 1
row: 2 : 7 entries [14:20]
    column 3: bool 1
    column 4: bool 1
    column 8: bool 1
    column 20: bool 1
    column 22: bool 1
    column 26: bool 1
    column 27: bool 1
row: 3 : 7 entries [21:27]
    column 1: bool 1
    column 2: bool 1
    column 7: bool 1
    column 9: bool 1
    column 21: bool 1
    column 26: bool 1
    column 27: bool 1
row: 4 : 7 entries [28:34]
    column 0: bool 1
    column 2: bool 1
    ...
row: 5 : 7 entries [35:41]
    ...
row: 6 : 7 entries [42:48]
    ...
row: 7 : 7 entries [49:55]
    ...
row: 8 : 7 entries [56:62]
    ...
row: 9 : 7 entries [63:69]
    ...
...

total time to read A matrix:       0.000640 sec

n 48 # edges 176
U=triu(A) time:        0.000036 sec
read A, create U memory usage: 1.0417e-05 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000014 sec
# triangles 160

tricount time:         0.000099 sec (dot product method)
tri+prep time:         0.000149 sec (incl time to compute L and U)
compute C time:        0.000080 sec
reduce (C) time:       0.000019 sec
rate       1.18 million edges/sec (incl time for U=triu(A))
rate       1.78 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.5225e-05 GB

----------------------------------- outer product method:
tricount time:         0.000203 sec (outer product method)
tri+prep time:         0.000218 sec (incl time to compute L)
compute C time:        0.000195 sec
reduce (C) time:       0.000009 sec
rate       0.81 million edges/sec (incl time for L=tril(A))
rate       0.87 million edges/sec (just tricount itself)

tricount (outer) memory usage: 1.3366e-05 GB

--------------------------------------------------------------
ntuples: 147631
nrows 4884 ncols 4884
time to prune self-edges:     0.002880
time to build the graph with GrB_Matrix_build:     0.016673
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.002519

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 4884 ncols: 4884 max # entries: 285494
format: standard CSR vlen: 4884 nvec_nonempty: 4810 nvec: 4884 plen: 4884 vdim: 4884
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 285494 
row: 0 : 14 entries [0:13]
    column 1: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 1 : 14 entries [14:27]
    column 0: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 3 : 24 entries [28:51]
    column 0: bool 1
    column 1: bool 1
    ...
row: 4 : 24 entries [52:75]
    ...
row: 6 : 29 entries [76:104]
    ...
row: 7 : 29 entries [105:133]
    ...
row: 9 : 29 entries [134:162]
    ...
row: 10 : 29 entries [163:191]
    ...
row: 12 : 39 entries [192:230]
    ...
row: 13 : 39 entries [231:269]
    ...
...
matrix 4884 by 4884, 285494 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4884 ncols: 4884 max # entries: 285494
format: standard CSR vlen: 4884 nvec_nonempty: 4810 nvec: 4884 plen: 4884 vdim: 4884
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 285494 
row: 0 : 14 entries [0:13]
    column 1: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 1 : 14 entries [14:27]
    column 0: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 3 : 24 entries [28:51]
    column 0: bool 1
    column 1: bool 1
    ...
row: 4 : 24 entries [52:75]
    ...
row: 6 : 29 entries [76:104]
    ...
row: 7 : 29 entries [105:133]
    ...
row: 9 : 29 entries [134:162]
    ...
row: 10 : 29 entries [163:191]
    ...
row: 12 : 39 entries [192:230]
    ...
row: 13 : 39 entries [231:269]
    ...
...

total time to read A matrix:       0.111142 sec

n 4884 # edges 142747
U=triu(A) time:        0.001030 sec
read A, create U memory usage: 0.00696989 GB

------------------------------------- dot product method:
L=tril(A) time:        0.001445 sec
# triangles 1512964

tricount time:         0.010335 sec (dot product method)
tri+prep time:         0.012810 sec (incl time to compute L and U)
compute C time:        0.009715 sec
reduce (C) time:       0.000620 sec
rate      11.14 million edges/sec (incl time for U=triu(A))
rate      13.81 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0104351 GB

----------------------------------- outer product method:
tricount time:         0.011408 sec (outer product method)
tri+prep time:         0.012853 sec (incl time to compute L)
compute C time:        0.010784 sec
reduce (C) time:       0.000624 sec
rate      11.11 million edges/sec (incl time for L=tril(A))
rate      12.51 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00872721 GB

--------------------------------------------------------------
ntuples: 1069
nrows 183 ncols 183
time to prune self-edges:     0.000007
time to build the graph with GrB_Matrix_build:     0.000116
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000057

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 183 ncols: 183 max # entries: 1402
format: standard CSR vlen: 183 nvec_nonempty: 183 nvec: 183 plen: 183 vdim: 183
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1402 
row: 0 : 104 entries [0:103]
    column 1: bool 1
    column 19: bool 1
    column 20: bool 1
    column 21: bool 1
    column 22: bool 1
    column 23: bool 1
    column 25: bool 1
    column 26: bool 1
    column 41: bool 1
    column 42: bool 1
    column 43: bool 1
    column 48: bool 1
    column 49: bool 1
    column 50: bool 1
    column 55: bool 1
    column 56: bool 1
    column 58: bool 1
    column 59: bool 1
    column 60: bool 1
    column 61: bool 1
    column 63: bool 1
    column 64: bool 1
    column 66: bool 1
    column 67: bool 1
    column 69: bool 1
    column 70: bool 1
    column 71: bool 1
    column 72: bool 1
    column 73: bool 1
    column 74: bool 1
    ...
row: 1 : 76 entries [104:179]
    ...
row: 2 : 6 entries [180:185]
    ...
row: 3 : 15 entries [186:200]
    ...
row: 4 : 2 entries [201:202]
    ...
row: 5 : 3 entries [203:205]
    ...
row: 6 : 5 entries [206:210]
    ...
row: 7 : 5 entries [211:215]
    ...
row: 8 : 4 entries [216:219]
    ...
row: 9 : 4 entries [220:223]
    ...
...
matrix 183 by 183, 1402 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 183 ncols: 183 max # entries: 1402
format: standard CSR vlen: 183 nvec_nonempty: 183 nvec: 183 plen: 183 vdim: 183
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1402 
row: 0 : 104 entries [0:103]
    column 1: bool 1
    column 19: bool 1
    column 20: bool 1
    column 21: bool 1
    column 22: bool 1
    column 23: bool 1
    column 25: bool 1
    column 26: bool 1
    column 41: bool 1
    column 42: bool 1
    column 43: bool 1
    column 48: bool 1
    column 49: bool 1
    column 50: bool 1
    column 55: bool 1
    column 56: bool 1
    column 58: bool 1
    column 59: bool 1
    column 60: bool 1
    column 61: bool 1
    column 63: bool 1
    column 64: bool 1
    column 66: bool 1
    column 67: bool 1
    column 69: bool 1
    column 70: bool 1
    column 71: bool 1
    column 72: bool 1
    column 73: bool 1
    column 74: bool 1
    ...
row: 1 : 76 entries [104:179]
    ...
row: 2 : 6 entries [180:185]
    ...
row: 3 : 15 entries [186:200]
    ...
row: 4 : 2 entries [201:202]
    ...
row: 5 : 3 entries [203:205]
    ...
row: 6 : 5 entries [206:210]
    ...
row: 7 : 5 entries [211:215]
    ...
row: 8 : 4 entries [216:219]
    ...
row: 9 : 4 entries [220:223]
    ...
...

total time to read A matrix:       0.000998 sec

n 183 # edges 701
U=triu(A) time:        0.000067 sec
read A, create U memory usage: 3.8857e-05 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000023 sec
# triangles 863

tricount time:         0.000113 sec (dot product method)
tri+prep time:         0.000203 sec (incl time to compute L and U)
compute C time:        0.000098 sec
reduce (C) time:       0.000015 sec
rate       3.45 million edges/sec (incl time for U=triu(A))
rate       6.19 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 5.7345e-05 GB

----------------------------------- outer product method:
tricount time:         0.000061 sec (outer product method)
tri+prep time:         0.000085 sec (incl time to compute L)
compute C time:        0.000044 sec
reduce (C) time:       0.000018 sec
rate       8.27 million edges/sec (incl time for L=tril(A))
rate      11.40 million edges/sec (just tricount itself)

tricount (outer) memory usage: 4.9321e-05 GB

--------------------------------------------------------------
ntuples: 123
nrows 32 ncols 31
time to prune self-edges:     0.000005
time to build the graph with GrB_Matrix_build:     0.000077
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000085

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 32: bool 1
    column 33: bool 1
    column 37: bool 1
    column 39: bool 1
    column 41: bool 1
    column 50: bool 1
row: 1 : 6 entries [6:11]
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 42: bool 1
    column 46: bool 1
    column 54: bool 1
row: 2 : 8 entries [12:19]
    column 32: bool 1
    column 34: bool 1
    column 35: bool 1
    column 36: bool 1
    column 38: bool 1
    column 45: bool 1
    column 52: bool 1
    column 60: bool 1
row: 3 : 4 entries [20:23]
    column 32: bool 1
    column 35: bool 1
    column 47: bool 1
    column 48: bool 1
row: 4 : 4 entries [24:27]
    column 35: bool 1
    column 36: bool 1
    column 58: bool 1
    column 60: bool 1
row: 5 : 5 entries [28:32]
    column 34: bool 1
    column 37: bool 1
    ...
row: 6 : 3 entries [33:35]
    ...
row: 7 : 3 entries [36:38]
    ...
row: 8 : 4 entries [39:42]
    ...
row: 9 : 3 entries [43:45]
    ...
...
matrix 63 by 63, 246 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 32: bool 1
    column 33: bool 1
    column 37: bool 1
    column 39: bool 1
    column 41: bool 1
    column 50: bool 1
row: 1 : 6 entries [6:11]
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 42: bool 1
    column 46: bool 1
    column 54: bool 1
row: 2 : 8 entries [12:19]
    column 32: bool 1
    column 34: bool 1
    column 35: bool 1
    column 36: bool 1
    column 38: bool 1
    column 45: bool 1
    column 52: bool 1
    column 60: bool 1
row: 3 : 4 entries [20:23]
    column 32: bool 1
    column 35: bool 1
    column 47: bool 1
    column 48: bool 1
row: 4 : 4 entries [24:27]
    column 35: bool 1
    column 36: bool 1
    column 58: bool 1
    column 60: bool 1
row: 5 : 5 entries [28:32]
    column 34: bool 1
    column 37: bool 1
    ...
row: 6 : 3 entries [33:35]
    ...
row: 7 : 3 entries [36:38]
    ...
row: 8 : 4 entries [39:42]
    ...
row: 9 : 3 entries [43:45]
    ...
...

total time to read A matrix:       0.000455 sec

n 63 # edges 123
U=triu(A) time:        0.000023 sec
read A, create U memory usage: 9.628e-06 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000011 sec
# triangles 0

tricount time:         0.000075 sec (dot product method)
tri+prep time:         0.000109 sec (incl time to compute L and U)
compute C time:        0.000058 sec
reduce (C) time:       0.000017 sec
rate       1.13 million edges/sec (incl time for U=triu(A))
rate       1.64 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.1633e-05 GB

----------------------------------- outer product method:
tricount time:         0.000057 sec (outer product method)
tri+prep time:         0.000068 sec (incl time to compute L)
compute C time:        0.000050 sec
reduce (C) time:       0.000007 sec
rate       1.81 million edges/sec (incl time for L=tril(A))
rate       2.16 million edges/sec (just tricount itself)

tricount (outer) memory usage: 1.0425e-05 GB

--------------------------------------------------------------
ntuples: 123
nrows 31 ncols 32
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000062
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000062

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 31: bool 1
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 37: bool 1
    column 56: bool 1
row: 1 : 5 entries [6:10]
    column 31: bool 1
    column 32: bool 1
    column 39: bool 1
    column 51: bool 1
    column 58: bool 1
row: 2 : 6 entries [11:16]
    column 32: bool 1
    column 33: bool 1
    column 36: bool 1
    column 38: bool 1
    column 39: bool 1
    column 59: bool 1
row: 3 : 4 entries [17:20]
    column 33: bool 1
    column 34: bool 1
    column 35: bool 1
    column 42: bool 1
row: 4 : 4 entries [21:24]
    column 33: bool 1
    column 35: bool 1
    column 53: bool 1
    column 57: bool 1
row: 5 : 3 entries [25:27]
    column 31: bool 1
    column 36: bool 1
    column 46: bool 1
row: 6 : 5 entries [28:32]
    column 33: bool 1
    column 37: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 7 entries [38:44]
    ...
row: 9 : 7 entries [45:51]
    ...
...
matrix 63 by 63, 246 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 31: bool 1
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 37: bool 1
    column 56: bool 1
row: 1 : 5 entries [6:10]
    column 31: bool 1
    column 32: bool 1
    column 39: bool 1
    column 51: bool 1
    column 58: bool 1
row: 2 : 6 entries [11:16]
    column 32: bool 1
    column 33: bool 1
    column 36: bool 1
    column 38: bool 1
    column 39: bool 1
    column 59: bool 1
row: 3 : 4 entries [17:20]
    column 33: bool 1
    column 34: bool 1
    column 35: bool 1
    column 42: bool 1
row: 4 : 4 entries [21:24]
    column 33: bool 1
    column 35: bool 1
    column 53: bool 1
    column 57: bool 1
row: 5 : 3 entries [25:27]
    column 31: bool 1
    column 36: bool 1
    column 46: bool 1
row: 6 : 5 entries [28:32]
    column 33: bool 1
    column 37: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 7 entries [38:44]
    ...
row: 9 : 7 entries [45:51]
    ...
...

total time to read A matrix:       0.000322 sec

n 63 # edges 123
U=triu(A) time:        0.000016 sec
read A, create U memory usage: 9.628e-06 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000008 sec
# triangles 0

tricount time:         0.000057 sec (dot product method)
tri+prep time:         0.000081 sec (incl time to compute L and U)
compute C time:        0.000044 sec
reduce (C) time:       0.000013 sec
rate       1.52 million edges/sec (incl time for U=triu(A))
rate       2.16 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.1641e-05 GB

----------------------------------- outer product method:
tricount time:         0.000045 sec (outer product method)
tri+prep time:         0.000052 sec (incl time to compute L)
compute C time:        0.000040 sec
reduce (C) time:       0.000005 sec
rate       2.34 million edges/sec (incl time for L=tril(A))
rate       2.74 million edges/sec (just tricount itself)

tricount (outer) memory usage: 1.0433e-05 GB

--------------------------------------------------------------
ntuples: 102
nrows 27 ncols 51
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000063
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000076

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 78 ncols: 78 max # entries: 204
format: standard CSR vlen: 78 nvec_nonempty: 78 nvec: 78 plen: 78 vdim: 78
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 204 
row: 0 : 3 entries [0:2]
    column 46: bool 1
    column 47: bool 1
    column 48: bool 1
row: 1 : 2 entries [3:4]
    column 46: bool 1
    column 49: bool 1
row: 2 : 2 entries [5:6]
    column 27: bool 1
    column 46: bool 1
row: 3 : 3 entries [7:9]
    column 28: bool 1
    column 47: bool 1
    column 58: bool 1
row: 4 : 6 entries [10:15]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 58: bool 1
    column 59: bool 1
row: 5 : 5 entries [16:20]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 60: bool 1
row: 6 : 3 entries [21:23]
    column 29: bool 1
    column 50: bool 1
    column 54: bool 1
row: 7 : 3 entries [24:26]
    column 30: bool 1
    column 51: bool 1
    column 55: bool 1
row: 8 : 3 entries [27:29]
    column 31: bool 1
    column 52: bool 1
    column 56: bool 1
row: 9 : 3 entries [30:32]
    ...
...
matrix 78 by 78, 204 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 78 ncols: 78 max # entries: 204
format: standard CSR vlen: 78 nvec_nonempty: 78 nvec: 78 plen: 78 vdim: 78
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 204 
row: 0 : 3 entries [0:2]
    column 46: bool 1
    column 47: bool 1
    column 48: bool 1
row: 1 : 2 entries [3:4]
    column 46: bool 1
    column 49: bool 1
row: 2 : 2 entries [5:6]
    column 27: bool 1
    column 46: bool 1
row: 3 : 3 entries [7:9]
    column 28: bool 1
    column 47: bool 1
    column 58: bool 1
row: 4 : 6 entries [10:15]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 58: bool 1
    column 59: bool 1
row: 5 : 5 entries [16:20]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 60: bool 1
row: 6 : 3 entries [21:23]
    column 29: bool 1
    column 50: bool 1
    column 54: bool 1
row: 7 : 3 entries [24:26]
    column 30: bool 1
    column 51: bool 1
    column 55: bool 1
row: 8 : 3 entries [27:29]
    column 31: bool 1
    column 52: bool 1
    column 56: bool 1
row: 9 : 3 entries [30:32]
    ...
...

total time to read A matrix:       0.000381 sec

n 78 # edges 102
U=triu(A) time:        0.000018 sec
read A, create U memory usage: 9.463e-06 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000008 sec
# triangles 0

tricount time:         0.000066 sec (dot product method)
tri+prep time:         0.000092 sec (incl time to compute L and U)
compute C time:        0.000052 sec
reduce (C) time:       0.000014 sec
rate       1.11 million edges/sec (incl time for U=triu(A))
rate       1.54 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 1.0641e-05 GB

----------------------------------- outer product method:
tricount time:         0.000075 sec (outer product method)
tri+prep time:         0.000083 sec (incl time to compute L)
compute C time:        0.000052 sec
reduce (C) time:       0.000023 sec
rate       1.23 million edges/sec (incl time for L=tril(A))
rate       1.37 million edges/sec (just tricount itself)

tricount (outer) memory usage: 9.7e-06 GB

--------------------------------------------------------------
ntuples: 49920
nrows 492 ncols 490
time to prune self-edges:     0.000005
time to build the graph with GrB_Matrix_build:     0.010823
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.008855

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 982 ncols: 982 max # entries: 99840
format: standard CSR vlen: 982 nvec_nonempty: 933 nvec: 982 plen: 982 vdim: 982
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 99840 
row: 0 : 40 entries [0:39]
    column 494: bool 1
    column 496: bool 1
    column 497: bool 1
    column 498: bool 1
    column 500: bool 1
    column 501: bool 1
    column 503: bool 1
    column 506: bool 1
    column 510: bool 1
    column 574: bool 1
    column 575: bool 1
    column 578: bool 1
    column 579: bool 1
    column 580: bool 1
    column 581: bool 1
    column 582: bool 1
    column 583: bool 1
    column 584: bool 1
    column 585: bool 1
    column 587: bool 1
    column 589: bool 1
    column 591: bool 1
    column 592: bool 1
    column 594: bool 1
    column 597: bool 1
    column 600: bool 1
    column 607: bool 1
    column 608: bool 1
    column 614: bool 1
    column 616: bool 1
    ...
row: 1 : 34 entries [40:73]
    ...
row: 2 : 41 entries [74:114]
    ...
row: 3 : 50 entries [115:164]
    ...
row: 4 : 40 entries [165:204]
    ...
row: 5 : 44 entries [205:248]
    ...
row: 6 : 50 entries [249:298]
    ...
row: 7 : 35 entries [299:333]
    ...
row: 8 : 4 entries [334:337]
    ...
row: 9 : 190 entries [338:527]
    ...
...
matrix 982 by 982, 99840 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 982 ncols: 982 max # entries: 99840
format: standard CSR vlen: 982 nvec_nonempty: 933 nvec: 982 plen: 982 vdim: 982
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 99840 
row: 0 : 40 entries [0:39]
    column 494: bool 1
    column 496: bool 1
    column 497: bool 1
    column 498: bool 1
    column 500: bool 1
    column 501: bool 1
    column 503: bool 1
    column 506: bool 1
    column 510: bool 1
    column 574: bool 1
    column 575: bool 1
    column 578: bool 1
    column 579: bool 1
    column 580: bool 1
    column 581: bool 1
    column 582: bool 1
    column 583: bool 1
    column 584: bool 1
    column 585: bool 1
    column 587: bool 1
    column 589: bool 1
    column 591: bool 1
    column 592: bool 1
    column 594: bool 1
    column 597: bool 1
    column 600: bool 1
    column 607: bool 1
    column 608: bool 1
    column 614: bool 1
    column 616: bool 1
    ...
row: 1 : 34 entries [40:73]
    ...
row: 2 : 41 entries [74:114]
    ...
row: 3 : 50 entries [115:164]
    ...
row: 4 : 40 entries [165:204]
    ...
row: 5 : 44 entries [205:248]
    ...
row: 6 : 50 entries [249:298]
    ...
row: 7 : 35 entries [299:333]
    ...
row: 8 : 4 entries [334:337]
    ...
row: 9 : 190 entries [338:527]
    ...
...

total time to read A matrix:       0.043441 sec

n 982 # edges 49920
U=triu(A) time:        0.000347 sec
read A, create U memory usage: 0.0034997 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000267 sec
# triangles 0

tricount time:         0.000313 sec (dot product method)
tri+prep time:         0.000927 sec (incl time to compute L and U)
compute C time:        0.000299 sec
reduce (C) time:       0.000014 sec
rate      53.85 million edges/sec (incl time for U=triu(A))
rate     159.52 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00362275 GB

----------------------------------- outer product method:
tricount time:         0.000104 sec (outer product method)
tri+prep time:         0.000371 sec (incl time to compute L)
compute C time:        0.000086 sec
reduce (C) time:       0.000018 sec
rate     134.38 million edges/sec (incl time for L=tril(A))
rate     478.54 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0034997 GB

--------------------------------------------------------------
ntuples: 299
nrows 67 ncols 67
time to prune self-edges:     0.000005
time to build the graph with GrB_Matrix_build:     0.000084
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000043

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 67 ncols: 67 max # entries: 574
format: standard CSR vlen: 67 nvec_nonempty: 67 nvec: 67 plen: 67 vdim: 67
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 574 
row: 0 : 12 entries [0:11]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    column 8: bool 1
    column 12: bool 1
    column 17: bool 1
    column 24: bool 1
    column 25: bool 1
    column 26: bool 1
    column 27: bool 1
    column 28: bool 1
row: 1 : 7 entries [12:18]
    column 4: bool 1
    column 8: bool 1
    column 13: bool 1
    column 17: bool 1
    column 20: bool 1
    column 24: bool 1
    column 60: bool 1
row: 2 : 7 entries [19:25]
    column 5: bool 1
    column 9: bool 1
    column 14: bool 1
    column 17: bool 1
    column 21: bool 1
    column 25: bool 1
    column 60: bool 1
row: 3 : 7 entries [26:32]
    column 6: bool 1
    column 10: bool 1
    column 15: bool 1
    column 17: bool 1
    ...
row: 4 : 8 entries [33:40]
    ...
row: 5 : 7 entries [41:47]
    ...
row: 6 : 8 entries [48:55]
    ...
row: 7 : 6 entries [56:61]
    ...
row: 8 : 7 entries [62:68]
    ...
row: 9 : 9 entries [69:77]
    ...
...
matrix 67 by 67, 574 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 67 ncols: 67 max # entries: 574
format: standard CSR vlen: 67 nvec_nonempty: 67 nvec: 67 plen: 67 vdim: 67
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 574 
row: 0 : 12 entries [0:11]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    column 8: bool 1
    column 12: bool 1
    column 17: bool 1
    column 24: bool 1
    column 25: bool 1
    column 26: bool 1
    column 27: bool 1
    column 28: bool 1
row: 1 : 7 entries [12:18]
    column 4: bool 1
    column 8: bool 1
    column 13: bool 1
    column 17: bool 1
    column 20: bool 1
    column 24: bool 1
    column 60: bool 1
row: 2 : 7 entries [19:25]
    column 5: bool 1
    column 9: bool 1
    column 14: bool 1
    column 17: bool 1
    column 21: bool 1
    column 25: bool 1
    column 60: bool 1
row: 3 : 7 entries [26:32]
    column 6: bool 1
    column 10: bool 1
    column 15: bool 1
    column 17: bool 1
    ...
row: 4 : 8 entries [33:40]
    ...
row: 5 : 7 entries [41:47]
    ...
row: 6 : 8 entries [48:55]
    ...
row: 7 : 6 entries [56:61]
    ...
row: 8 : 7 entries [62:68]
    ...
row: 9 : 9 entries [69:77]
    ...
...

total time to read A matrix:       0.000426 sec

n 67 # edges 287
U=triu(A) time:        0.000024 sec
read A, create U memory usage: 1.6201e-05 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000043 sec
# triangles 120

tricount time:         0.000078 sec (dot product method)
tri+prep time:         0.000145 sec (incl time to compute L and U)
compute C time:        0.000065 sec
reduce (C) time:       0.000013 sec
rate       1.98 million edges/sec (incl time for U=triu(A))
rate       3.68 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 2.3825e-05 GB

----------------------------------- outer product method:
tricount time:         0.000058 sec (outer product method)
tri+prep time:         0.000100 sec (incl time to compute L)
compute C time:        0.000040 sec
reduce (C) time:       0.000018 sec
rate       2.86 million edges/sec (incl time for L=tril(A))
rate       4.98 million edges/sec (just tricount itself)

tricount (outer) memory usage: 2.0653e-05 GB

--------------------------------------------------------------
Wathen: nx 200 ny 200 n 120801 nz 1883201 method 0, time: 0.284 sec

GraphBLAS matrix: from get_matrix: 
nrows: 120801 ncols: 120801 max # entries: 1883201
format: standard CSR vlen: 120801 nvec_nonempty: 120801 nvec: 120801 plen: 120801 vdim: 120801
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 1762400 
row: 0 : 7 entries [0:6]
    column 1: double -6.85160883409121
    column 2: double 2.28386961136374
    column 401: double -6.85160883409121
    column 402: double -9.13547844545495
    column 602: double 2.28386961136374
    column 603: double -9.13547844545495
    column 604: double 3.42580441704561
row: 1 : 7 entries [7:13]
    column 0: double -6.85160883409121
    column 2: double -6.85160883409121
    column 401: double 22.8386961136374
    column 402: double 22.8386961136374
    column 602: double -9.13547844545495
    column 603: double 18.2709568909099
    column 604: double -9.13547844545495
row: 2 : 12 entries [14:25]
    column 0: double 2.28386961136374
    column 1: double -6.85160883409121
    column 3: double -2.34300770083722
    column 4: double 0.781002566945742
    column 401: double -9.13547844545495
    column 402: double -9.19461653492844
    column 403: double -3.12401026778297
    column 602: double 3.42580441704561
    column 603: double -9.13547844545495
    column 604: double 3.06487217830948
    column 605: double -3.12401026778297
    column 606: double 1.17150385041861
row: 3 : 7 entries [26:32]
    column 2: double -2.34300770083722
    column 4: double -2.34300770083722
    column 402: double 7.81002566945742
    column 403: double 7.81002566945742
    ...
row: 4 : 12 entries [33:44]
    ...
row: 5 : 7 entries [45:51]
    ...
row: 6 : 12 entries [52:63]
    ...
row: 7 : 7 entries [64:70]
    ...
row: 8 : 12 entries [71:82]
    ...
row: 9 : 7 entries [83:89]
    ...
...

total time to read A matrix:       0.361573 sec

n 120801 # edges 881200
U=triu(A) time:        0.010706 sec
read A, create U memory usage: 0.0642497 GB

------------------------------------- dot product method:
L=tril(A) time:        0.011777 sec
# triangles 2160400

tricount time:         0.020860 sec (dot product method)
tri+prep time:         0.043342 sec (incl time to compute L and U)
compute C time:        0.017968 sec
reduce (C) time:       0.002892 sec
rate      20.33 million edges/sec (incl time for U=triu(A))
rate      42.24 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0663466 GB

----------------------------------- outer product method:
tricount time:         0.017708 sec (outer product method)
tri+prep time:         0.029485 sec (incl time to compute L)
compute C time:        0.014865 sec
reduce (C) time:       0.002843 sec
rate      29.89 million edges/sec (incl time for L=tril(A))
rate      49.76 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0642497 GB

--------------------------------------------------------------
random 10000 by 10000, nz: 199746, method 0 time 0.049 sec

GraphBLAS matrix: from get_matrix: 
nrows: 10000 ncols: 10000 max # entries: 199746
format: standard CSR vlen: 10000 nvec_nonempty: 10000 nvec: 10000 plen: 10000 vdim: 10000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 199746 
row: 0 : 18 entries [0:17]
    column 3143: double 0.782006286812952
    column 3238: double 0.645985290078433
    column 3371: double 0.50297555467391
    column 3825: double 0.460524307992798
    column 4050: double 0.971861934263131
    column 4513: double 0.410321359904782
    column 5038: double 0.570909756767479
    column 5240: double 0.578295236060671
    column 5464: double 0.300881984923856
    column 6319: double 0.275124362926115
    column 6677: double 0.84743797112949
    column 7119: double 0.40964995269631
    column 7891: double 0.120975371562853
    column 8001: double 0.408520767845698
    column 8797: double 0.390728476821192
    column 9203: double 0.541062654499954
    column 9414: double 0.551927243873409
    column 9469: double 0.729483932004761
row: 1 : 18 entries [18:35]
    column 1047: double 0.184179204687643
    column 2165: double 0.833704641865291
    column 2440: double 0.50007629627369
    column 3153: double 0.576281014435255
    column 3154: double 0.032624286629841
    column 3793: double 0.164860988189337
    column 3811: double 0.879757072664571
    column 3950: double 0.0151371807000946
    column 4019: double 0.136539811395611
    column 5055: double 0.671987060151982
    column 5712: double 0.970946378978851
    column 6151: double 0.0406811731315043
    ...
row: 2 : 25 entries [36:60]
    ...
row: 3 : 19 entries [61:79]
    ...
row: 4 : 22 entries [80:101]
    ...
row: 5 : 25 entries [102:126]
    ...
row: 6 : 19 entries [127:145]
    ...
row: 7 : 29 entries [146:174]
    ...
row: 8 : 26 entries [175:200]
    ...
row: 9 : 29 entries [201:229]
    ...
...

total time to read A matrix:       0.051760 sec

n 10000 # edges 99873
U=triu(A) time:        0.002339 sec
read A, create U memory usage: 0.0080517 GB

------------------------------------- dot product method:
L=tril(A) time:        0.001037 sec
# triangles 1301

tricount time:         0.009082 sec (dot product method)
tri+prep time:         0.012457 sec (incl time to compute L and U)
compute C time:        0.009051 sec
reduce (C) time:       0.000031 sec
rate       8.02 million edges/sec (incl time for U=triu(A))
rate      11.00 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.0080517 GB

----------------------------------- outer product method:
tricount time:         0.002732 sec (outer product method)
tri+prep time:         0.003769 sec (incl time to compute L)
compute C time:        0.002700 sec
reduce (C) time:       0.000032 sec
rate      26.50 million edges/sec (incl time for L=tril(A))
rate      36.56 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.0080517 GB

--------------------------------------------------------------
random 10000 by 10000, nz: 199746, method 1 time 0.035 sec

GraphBLAS matrix: from get_matrix: 
nrows: 10000 ncols: 10000 max # entries: 199746
format: standard CSR vlen: 10000 nvec_nonempty: 10000 nvec: 10000 plen: 10000 vdim: 10000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 199746 
row: 0 : 18 entries [0:17]
    column 3143: double 0.782006286812952
    column 3238: double 0.645985290078433
    column 3371: double 0.50297555467391
    column 3825: double 0.460524307992798
    column 4050: double 0.971861934263131
    column 4513: double 0.410321359904782
    column 5038: double 0.570909756767479
    column 5240: double 0.578295236060671
    column 5464: double 0.300881984923856
    column 6319: double 0.275124362926115
    column 6677: double 0.84743797112949
    column 7119: double 0.40964995269631
    column 7891: double 0.120975371562853
    column 8001: double 0.408520767845698
    column 8797: double 0.390728476821192
    column 9203: double 0.541062654499954
    column 9414: double 0.551927243873409
    column 9469: double 0.729483932004761
row: 1 : 18 entries [18:35]
    column 1047: double 0.184179204687643
    column 2165: double 0.833704641865291
    column 2440: double 0.50007629627369
    column 3153: double 0.576281014435255
    column 3154: double 0.032624286629841
    column 3793: double 0.164860988189337
    column 3811: double 0.879757072664571
    column 3950: double 0.0151371807000946
    column 4019: double 0.136539811395611
    column 5055: double 0.671987060151982
    column 5712: double 0.970946378978851
    column 6151: double 0.0406811731315043
    ...
row: 2 : 25 entries [36:60]
    ...
row: 3 : 19 entries [61:79]
    ...
row: 4 : 22 entries [80:101]
    ...
row: 5 : 25 entries [102:126]
    ...
row: 6 : 19 entries [127:145]
    ...
row: 7 : 29 entries [146:174]
    ...
row: 8 : 26 entries [175:200]
    ...
row: 9 : 29 entries [201:229]
    ...
...

total time to read A matrix:       0.036802 sec

n 10000 # edges 99873
U=triu(A) time:        0.000825 sec
read A, create U memory usage: 0.0057537 GB

------------------------------------- dot product method:
L=tril(A) time:        0.000647 sec
# triangles 1301

tricount time:         0.004266 sec (dot product method)
tri+prep time:         0.005738 sec (incl time to compute L and U)
compute C time:        0.004240 sec
reduce (C) time:       0.000026 sec
rate      17.41 million edges/sec (incl time for U=triu(A))
rate      23.41 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.00743186 GB

----------------------------------- outer product method:
tricount time:         0.002661 sec (outer product method)
tri+prep time:         0.003307 sec (incl time to compute L)
compute C time:        0.002647 sec
reduce (C) time:       0.000014 sec
rate      30.20 million edges/sec (incl time for L=tril(A))
rate      37.54 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.00628359 GB

--------------------------------------------------------------
random 100000 by 100000, nz: 19979838, method 0 time 4.679 sec

GraphBLAS matrix: from get_matrix: 
nrows: 100000 ncols: 100000 max # entries: 19979838
format: standard CSR vlen: 100000 nvec_nonempty: 100000 nvec: 100000 plen: 100000 vdim: 100000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 19979838 
row: 0 : 174 entries [0:173]
    column 46: double 0.839075899533067
    column 170: double 0.728598895229957
    column 798: double 0.881557664723655
    column 2726: double 0.329691457869198
    column 2762: double 0.448011719107639
    column 3535: double 0.0736106448561052
    column 3921: double 0.722190008239998
    column 4491: double 0.945402386547441
    column 4808: double 0.825495162816248
    column 5290: double 0.0121463667714469
    column 5514: double 0.153294473097934
    column 6015: double 0.0816064943388165
    column 6022: double 0.464827417828913
    column 6822: double 0.928586687826167
    column 7237: double 0.931943723868526
    column 8100: double 0.886684774315622
    column 8420: double 0.845210119937742
    column 8797: double 0.390728476821192
    column 8979: double 0.402142399365215
    column 9648: double 0.181340983306375
    column 10387: double 0.205145420697653
    column 11015: double 0.779412213507492
    column 11243: double 0.054475539414655
    column 11903: double 0.434827723014008
    column 11996: double 0.701254310739464
    column 12390: double 0.84621723075045
    column 13056: double 0.750144962920011
    column 13111: double 0.548020874660482
    column 14644: double 0.688772240363781
    column 14724: double 0.186590166936247
    ...
row: 1 : 197 entries [174:370]
    ...
row: 2 : 198 entries [371:568]
    ...
row: 3 : 176 entries [569:744]
    ...
row: 4 : 170 entries [745:914]
    ...
row: 5 : 203 entries [915:1117]
    ...
row: 6 : 205 entries [1118:1322]
    ...
row: 7 : 191 entries [1323:1513]
    ...
row: 8 : 214 entries [1514:1727]
    ...
row: 9 : 197 entries [1728:1924]
    ...
...

total time to read A matrix:       5.028265 sec

n 100000 # edges 9989919
U=triu(A) time:        0.148992 sec
read A, create U memory usage: 0.966905 GB

------------------------------------- dot product method:
L=tril(A) time:        0.128025 sec
# triangles 1328523

tricount time:         4.295828 sec (dot product method)
tri+prep time:         4.572845 sec (incl time to compute L and U)
compute C time:        4.290252 sec
reduce (C) time:       0.005576 sec
rate       2.18 million edges/sec (incl time for U=triu(A))
rate       2.33 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.966905 GB

----------------------------------- outer product method:
tricount time:         2.611437 sec (outer product method)
tri+prep time:         2.739462 sec (incl time to compute L)
compute C time:        2.601513 sec
reduce (C) time:       0.009925 sec
rate       3.65 million edges/sec (incl time for L=tril(A))
rate       3.83 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.966905 GB

--------------------------------------------------------------
random 100000 by 100000, nz: 19979838, method 1 time 4.158 sec

GraphBLAS matrix: from get_matrix: 
nrows: 100000 ncols: 100000 max # entries: 19979838
format: standard CSR vlen: 100000 nvec_nonempty: 100000 nvec: 100000 plen: 100000 vdim: 100000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 19979838 
row: 0 : 174 entries [0:173]
    column 46: double 0.839075899533067
    column 170: double 0.728598895229957
    column 798: double 0.881557664723655
    column 2726: double 0.329691457869198
    column 2762: double 0.448011719107639
    column 3535: double 0.0736106448561052
    column 3921: double 0.722190008239998
    column 4491: double 0.945402386547441
    column 4808: double 0.825495162816248
    column 5290: double 0.0121463667714469
    column 5514: double 0.153294473097934
    column 6015: double 0.0816064943388165
    column 6022: double 0.464827417828913
    column 6822: double 0.928586687826167
    column 7237: double 0.931943723868526
    column 8100: double 0.886684774315622
    column 8420: double 0.845210119937742
    column 8797: double 0.390728476821192
    column 8979: double 0.402142399365215
    column 9648: double 0.181340983306375
    column 10387: double 0.205145420697653
    column 11015: double 0.779412213507492
    column 11243: double 0.054475539414655
    column 11903: double 0.434827723014008
    column 11996: double 0.701254310739464
    column 12390: double 0.84621723075045
    column 13056: double 0.750144962920011
    column 13111: double 0.548020874660482
    column 14644: double 0.688772240363781
    column 14724: double 0.186590166936247
    ...
row: 1 : 197 entries [174:370]
    ...
row: 2 : 198 entries [371:568]
    ...
row: 3 : 176 entries [569:744]
    ...
row: 4 : 170 entries [745:914]
    ...
row: 5 : 203 entries [915:1117]
    ...
row: 6 : 205 entries [1118:1322]
    ...
row: 7 : 191 entries [1323:1513]
    ...
row: 8 : 214 entries [1514:1727]
    ...
row: 9 : 197 entries [1728:1924]
    ...
...

total time to read A matrix:       4.486128 sec

n 100000 # edges 9989919
U=triu(A) time:        0.167150 sec
read A, create U memory usage: 0.561036 GB

------------------------------------- dot product method:
L=tril(A) time:        0.153089 sec
# triangles 1328523

tricount time:         4.724267 sec (dot product method)
tri+prep time:         5.044506 sec (incl time to compute L and U)
compute C time:        4.719060 sec
reduce (C) time:       0.005207 sec
rate       1.98 million edges/sec (incl time for U=triu(A))
rate       2.11 million edges/sec (just tricount itself)

tricount (dot)   memory usage: 0.721675 GB

----------------------------------- outer product method:
tricount time:         2.729942 sec (outer product method)
tri+prep time:         2.883031 sec (incl time to compute L)
compute C time:        2.722284 sec
reduce (C) time:       0.007658 sec
rate       3.47 million edges/sec (incl time for L=tril(A))
rate       3.66 million edges/sec (just tricount itself)

tricount (outer) memory usage: 0.602296 GB

