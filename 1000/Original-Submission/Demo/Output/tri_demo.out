--------------------------------------------------------------
Wathen: nx 4 ny 4 n 65 nz 752 method 0, time: 0.000 sec

GraphBLAS matrix: from get_matrix: 
nrows: 65 ncols: 65 max # entries: 817
format: standard CSR vlen: 65 nvec_nonempty: 65 nvec: 65 plen: 65 vdim: 65
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 752 
row: 0 : 7 entries [0:6]
    column 1: double -3.43365642660378
    column 2: double 1.14455214220126
    column 9: double -3.43365642660378
    column 10: double -4.57820856880504
    column 14: double 1.14455214220126
    column 15: double -4.57820856880504
    column 16: double 1.71682821330189
row: 1 : 7 entries [7:13]
    column 0: double -3.43365642660378
    column 2: double -3.43365642660378
    column 9: double 11.4455214220126
    column 10: double 11.4455214220126
    column 14: double -4.57820856880504
    column 15: double 9.15641713761008
    column 16: double -4.57820856880504
row: 2 : 12 entries [14:25]
    column 0: double 1.14455214220126
    column 1: double -3.43365642660378
    column 3: double -9.1794115743147
    column 4: double 3.0598038581049
    column 9: double -4.57820856880504
    column 10: double -12.6130680009185
    column 11: double -12.2392154324196
    column 14: double 1.71682821330189
    column 15: double -4.57820856880504
    column 16: double 4.20435600030616
    column 17: double -12.2392154324196
    column 18: double 4.58970578715735
row: 3 : 7 entries [26:32]
    column 2: double -9.1794115743147
    column 4: double -9.1794115743147
    column 10: double 30.598038581049
    column 11: double 30.598038581049
    ...
row: 4 : 12 entries [33:44]
    ...
row: 5 : 7 entries [45:51]
    ...
row: 6 : 12 entries [52:63]
    ...
row: 7 : 7 entries [64:70]
    ...
row: 8 : 7 entries [71:77]
    ...
row: 9 : 7 entries [78:84]
    ...
...

total time to read A matrix:       0.000703 sec

n 65 # edges 376
U=triu(A) time:        0.000030 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000017 sec
# triangles 872

tricount time:         0.000087 sec (dot product method)
tri+prep time:         0.000134 sec (incl time to compute L and U)
compute C time:        0.000065 sec
reduce (C) time:       0.000022 sec
rate       2.80 million edges/sec (incl time for U=triu(A))
rate       4.32 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000067 sec (outer product method)
tri+prep time:         0.000084 sec (incl time to compute L)
compute C time:        0.000055 sec
reduce (C) time:       0.000012 sec
rate       4.49 million edges/sec (incl time for L=tril(A))
rate       5.62 million edges/sec (just tricount itself)


--------------------------------------------------------------
random 5 by 5, nz: 18, method 1 time 0.000 sec

GraphBLAS matrix: from get_matrix: 
nrows: 5 ncols: 5 max # entries: 18
format: standard CSR vlen: 5 nvec_nonempty: 5 nvec: 5 plen: 5 vdim: 5
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 18 
row: 0 : 3 entries [0:2]
    column 1: double 0.717388479790099
    column 2: double 0.159899455348467
    column 3: double 0.937600838142916
row: 1 : 4 entries [3:6]
    column 0: double 0.717388479790099
    column 2: double 0.951473352740709
    column 3: double 0.82691712979873
    column 4: double 0.620002095185994
row: 2 : 4 entries [7:10]
    column 0: double 0.159899455348467
    column 1: double 0.951473352740709
    column 3: double 0.855698335145892
    column 4: double 0.867500482629324
row: 3 : 4 entries [11:14]
    column 0: double 0.937600838142916
    column 1: double 0.82691712979873
    column 2: double 0.855698335145892
    column 4: double 0.992311681061557
row: 4 : 3 entries [15:17]
    column 1: double 0.620002095185994
    column 2: double 0.867500482629324
    column 3: double 0.992311681061557

total time to read A matrix:       0.000324 sec

n 5 # edges 9
U=triu(A) time:        0.000042 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000009 sec
# triangles 7

tricount time:         0.000060 sec (dot product method)
tri+prep time:         0.000111 sec (incl time to compute L and U)
compute C time:        0.000043 sec
reduce (C) time:       0.000017 sec
rate       0.08 million edges/sec (incl time for U=triu(A))
rate       0.15 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000085 sec (outer product method)
tri+prep time:         0.000094 sec (incl time to compute L)
compute C time:        0.000075 sec
reduce (C) time:       0.000010 sec
rate       0.10 million edges/sec (incl time for L=tril(A))
rate       0.11 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 3 by 3, 0 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 3 ncols: 3 max # entries: 0
format: hypersparse CSR vlen: 3 nvec_nonempty: 0 nvec: 0 plen: 0 vdim: 3
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
empty
number of entries: 0 

total time to read A matrix:       0.000586 sec

n 3 # edges 0
U=triu(A) time:        0.000023 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000012 sec
# triangles 0

tricount time:         0.000071 sec (dot product method)
tri+prep time:         0.000105 sec (incl time to compute L and U)
compute C time:        0.000051 sec
reduce (C) time:       0.000019 sec
rate       0.00 million edges/sec (incl time for U=triu(A))
rate       0.00 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000071 sec (outer product method)
tri+prep time:         0.000084 sec (incl time to compute L)
compute C time:        0.000063 sec
reduce (C) time:       0.000009 sec
rate       0.00 million edges/sec (incl time for L=tril(A))
rate       0.00 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 4 by 4, 4 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4 ncols: 4 max # entries: 4
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 4 
row: 0 : 1 entries [0:0]
    column 1: bool 1
row: 1 : 1 entries [1:1]
    column 0: bool 1
row: 2 : 1 entries [2:2]
    column 3: bool 1
row: 3 : 1 entries [3:3]
    column 2: bool 1

total time to read A matrix:       0.000726 sec

n 4 # edges 2
U=triu(A) time:        0.000023 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000017 sec
# triangles 0

tricount time:         0.000065 sec (dot product method)
tri+prep time:         0.000105 sec (incl time to compute L and U)
compute C time:        0.000050 sec
reduce (C) time:       0.000015 sec
rate       0.02 million edges/sec (incl time for U=triu(A))
rate       0.03 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000053 sec (outer product method)
tri+prep time:         0.000070 sec (incl time to compute L)
compute C time:        0.000046 sec
reduce (C) time:       0.000006 sec
rate       0.03 million edges/sec (incl time for L=tril(A))
rate       0.04 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 4 by 4, 10 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4 ncols: 4 max # entries: 10
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 10 
row: 0 : 3 entries [0:2]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
row: 1 : 3 entries [3:5]
    column 0: bool 1
    column 2: bool 1
    column 3: bool 1
row: 2 : 2 entries [6:7]
    column 0: bool 1
    column 1: bool 1
row: 3 : 2 entries [8:9]
    column 0: bool 1
    column 1: bool 1

total time to read A matrix:       0.000558 sec

n 4 # edges 5
U=triu(A) time:        0.000020 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000012 sec
# triangles 2

tricount time:         0.000069 sec (dot product method)
tri+prep time:         0.000101 sec (incl time to compute L and U)
compute C time:        0.000048 sec
reduce (C) time:       0.000021 sec
rate       0.05 million edges/sec (incl time for U=triu(A))
rate       0.07 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000048 sec (outer product method)
tri+prep time:         0.000060 sec (incl time to compute L)
compute C time:        0.000039 sec
reduce (C) time:       0.000009 sec
rate       0.08 million edges/sec (incl time for L=tril(A))
rate       0.10 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 7 by 7, 16 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 7 ncols: 7 max # entries: 16
format: standard CSR vlen: 7 nvec_nonempty: 7 nvec: 7 plen: 7 vdim: 7
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 16 
row: 0 : 2 entries [0:1]
    column 5: bool 1
    column 6: bool 1
row: 1 : 2 entries [2:3]
    column 5: bool 1
    column 6: bool 1
row: 2 : 1 entries [4:4]
    column 4: bool 1
row: 3 : 3 entries [5:7]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
row: 4 : 2 entries [8:9]
    column 2: bool 1
    column 3: bool 1
row: 5 : 3 entries [10:12]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
row: 6 : 3 entries [13:15]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1

total time to read A matrix:       0.000548 sec

n 7 # edges 8
U=triu(A) time:        0.000016 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000033 sec
# triangles 0

tricount time:         0.000072 sec (dot product method)
tri+prep time:         0.000121 sec (incl time to compute L and U)
compute C time:        0.000056 sec
reduce (C) time:       0.000016 sec
rate       0.07 million edges/sec (incl time for U=triu(A))
rate       0.11 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000069 sec (outer product method)
tri+prep time:         0.000102 sec (incl time to compute L)
compute C time:        0.000062 sec
reduce (C) time:       0.000007 sec
rate       0.08 million edges/sec (incl time for L=tril(A))
rate       0.12 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 304 by 304, 876 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 304 ncols: 304 max # entries: 876
format: standard CSR vlen: 304 nvec_nonempty: 304 nvec: 304 plen: 304 vdim: 304
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 876 
row: 0 : 2 entries [0:1]
    column 219: bool 1
    column 220: bool 1
row: 1 : 2 entries [2:3]
    column 219: bool 1
    column 226: bool 1
row: 2 : 2 entries [4:5]
    column 219: bool 1
    column 225: bool 1
row: 3 : 2 entries [6:7]
    column 219: bool 1
    column 224: bool 1
row: 4 : 2 entries [8:9]
    column 220: bool 1
    column 221: bool 1
row: 5 : 2 entries [10:11]
    column 220: bool 1
    column 228: bool 1
row: 6 : 2 entries [12:13]
    column 220: bool 1
    column 227: bool 1
row: 7 : 2 entries [14:15]
    column 220: bool 1
    column 226: bool 1
row: 8 : 2 entries [16:17]
    column 221: bool 1
    column 222: bool 1
row: 9 : 2 entries [18:19]
    column 221: bool 1
...

total time to read A matrix:       0.001309 sec

n 304 # edges 438
U=triu(A) time:        0.000035 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000026 sec
# triangles 0

tricount time:         0.000085 sec (dot product method)
tri+prep time:         0.000146 sec (incl time to compute L and U)
compute C time:        0.000065 sec
reduce (C) time:       0.000020 sec
rate       3.00 million edges/sec (incl time for U=triu(A))
rate       5.15 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000106 sec (outer product method)
tri+prep time:         0.000132 sec (incl time to compute L)
compute C time:        0.000097 sec
reduce (C) time:       0.000010 sec
rate       3.32 million edges/sec (incl time for L=tril(A))
rate       4.12 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 48 by 48, 352 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 48 ncols: 48 max # entries: 352
format: standard CSR vlen: 48 nvec_nonempty: 48 nvec: 48 plen: 48 vdim: 48
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 352 
row: 0 : 7 entries [0:6]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 10: bool 1
    column 18: bool 1
    column 24: bool 1
    column 29: bool 1
row: 1 : 7 entries [7:13]
    column 3: bool 1
    column 5: bool 1
    column 7: bool 1
    column 9: bool 1
    column 19: bool 1
    column 23: bool 1
    column 25: bool 1
row: 2 : 7 entries [14:20]
    column 3: bool 1
    column 4: bool 1
    column 8: bool 1
    column 20: bool 1
    column 22: bool 1
    column 26: bool 1
    column 27: bool 1
row: 3 : 7 entries [21:27]
    column 1: bool 1
    column 2: bool 1
    column 7: bool 1
    column 9: bool 1
    column 21: bool 1
    column 26: bool 1
    column 27: bool 1
row: 4 : 7 entries [28:34]
    column 0: bool 1
    column 2: bool 1
    ...
row: 5 : 7 entries [35:41]
    ...
row: 6 : 7 entries [42:48]
    ...
row: 7 : 7 entries [49:55]
    ...
row: 8 : 7 entries [56:62]
    ...
row: 9 : 7 entries [63:69]
    ...
...

total time to read A matrix:       0.001199 sec

n 48 # edges 176
U=triu(A) time:        0.000033 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000020 sec
# triangles 160

tricount time:         0.000092 sec (dot product method)
tri+prep time:         0.000145 sec (incl time to compute L and U)
compute C time:        0.000068 sec
reduce (C) time:       0.000024 sec
rate       1.21 million edges/sec (incl time for U=triu(A))
rate       1.92 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000045 sec (outer product method)
tri+prep time:         0.000066 sec (incl time to compute L)
compute C time:        0.000039 sec
reduce (C) time:       0.000007 sec
rate       2.67 million edges/sec (incl time for L=tril(A))
rate       3.88 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 4884 by 4884, 285494 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4884 ncols: 4884 max # entries: 285494
format: standard CSR vlen: 4884 nvec_nonempty: 4810 nvec: 4884 plen: 4884 vdim: 4884
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 285494 
row: 0 : 14 entries [0:13]
    column 1: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 1 : 14 entries [14:27]
    column 0: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 3 : 24 entries [28:51]
    column 0: bool 1
    column 1: bool 1
    ...
row: 4 : 24 entries [52:75]
    ...
row: 6 : 29 entries [76:104]
    ...
row: 7 : 29 entries [105:133]
    ...
row: 9 : 29 entries [134:162]
    ...
row: 10 : 29 entries [163:191]
    ...
row: 12 : 39 entries [192:230]
    ...
row: 13 : 39 entries [231:269]
    ...
...

total time to read A matrix:       0.173033 sec

n 4884 # edges 142747
U=triu(A) time:        0.004681 sec

------------------------------------- dot product method:
L=tril(A) time:        0.001643 sec
# triangles 1512964

tricount time:         0.015815 sec (dot product method)
tri+prep time:         0.022139 sec (incl time to compute L and U)
compute C time:        0.015058 sec
reduce (C) time:       0.000757 sec
rate       6.45 million edges/sec (incl time for U=triu(A))
rate       9.03 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.011032 sec (outer product method)
tri+prep time:         0.012675 sec (incl time to compute L)
compute C time:        0.010305 sec
reduce (C) time:       0.000727 sec
rate      11.26 million edges/sec (incl time for L=tril(A))
rate      12.94 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 183 by 183, 1402 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 183 ncols: 183 max # entries: 1402
format: standard CSR vlen: 183 nvec_nonempty: 183 nvec: 183 plen: 183 vdim: 183
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1402 
row: 0 : 104 entries [0:103]
    column 1: bool 1
    column 19: bool 1
    column 20: bool 1
    column 21: bool 1
    column 22: bool 1
    column 23: bool 1
    column 25: bool 1
    column 26: bool 1
    column 41: bool 1
    column 42: bool 1
    column 43: bool 1
    column 48: bool 1
    column 49: bool 1
    column 50: bool 1
    column 55: bool 1
    column 56: bool 1
    column 58: bool 1
    column 59: bool 1
    column 60: bool 1
    column 61: bool 1
    column 63: bool 1
    column 64: bool 1
    column 66: bool 1
    column 67: bool 1
    column 69: bool 1
    column 70: bool 1
    column 71: bool 1
    column 72: bool 1
    column 73: bool 1
    column 74: bool 1
    ...
row: 1 : 76 entries [104:179]
    ...
row: 2 : 6 entries [180:185]
    ...
row: 3 : 15 entries [186:200]
    ...
row: 4 : 2 entries [201:202]
    ...
row: 5 : 3 entries [203:205]
    ...
row: 6 : 5 entries [206:210]
    ...
row: 7 : 5 entries [211:215]
    ...
row: 8 : 4 entries [216:219]
    ...
row: 9 : 4 entries [220:223]
    ...
...

total time to read A matrix:       0.002149 sec

n 183 # edges 701
U=triu(A) time:        0.000068 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000039 sec
# triangles 863

tricount time:         0.000156 sec (dot product method)
tri+prep time:         0.000262 sec (incl time to compute L and U)
compute C time:        0.000126 sec
reduce (C) time:       0.000030 sec
rate       2.67 million edges/sec (incl time for U=triu(A))
rate       4.51 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000088 sec (outer product method)
tri+prep time:         0.000128 sec (incl time to compute L)
compute C time:        0.000076 sec
reduce (C) time:       0.000012 sec
rate       5.50 million edges/sec (incl time for L=tril(A))
rate       7.93 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 63 by 63, 246 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 32: bool 1
    column 33: bool 1
    column 37: bool 1
    column 39: bool 1
    column 41: bool 1
    column 50: bool 1
row: 1 : 6 entries [6:11]
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 42: bool 1
    column 46: bool 1
    column 54: bool 1
row: 2 : 8 entries [12:19]
    column 32: bool 1
    column 34: bool 1
    column 35: bool 1
    column 36: bool 1
    column 38: bool 1
    column 45: bool 1
    column 52: bool 1
    column 60: bool 1
row: 3 : 4 entries [20:23]
    column 32: bool 1
    column 35: bool 1
    column 47: bool 1
    column 48: bool 1
row: 4 : 4 entries [24:27]
    column 35: bool 1
    column 36: bool 1
    column 58: bool 1
    column 60: bool 1
row: 5 : 5 entries [28:32]
    column 34: bool 1
    column 37: bool 1
    ...
row: 6 : 3 entries [33:35]
    ...
row: 7 : 3 entries [36:38]
    ...
row: 8 : 4 entries [39:42]
    ...
row: 9 : 3 entries [43:45]
    ...
...

total time to read A matrix:       0.000830 sec

n 63 # edges 123
U=triu(A) time:        0.000027 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000016 sec
# triangles 0

tricount time:         0.000078 sec (dot product method)
tri+prep time:         0.000122 sec (incl time to compute L and U)
compute C time:        0.000058 sec
reduce (C) time:       0.000020 sec
rate       1.01 million edges/sec (incl time for U=triu(A))
rate       1.57 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000117 sec (outer product method)
tri+prep time:         0.000133 sec (incl time to compute L)
compute C time:        0.000107 sec
reduce (C) time:       0.000010 sec
rate       0.93 million edges/sec (incl time for L=tril(A))
rate       1.05 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 63 by 63, 246 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 31: bool 1
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 37: bool 1
    column 56: bool 1
row: 1 : 5 entries [6:10]
    column 31: bool 1
    column 32: bool 1
    column 39: bool 1
    column 51: bool 1
    column 58: bool 1
row: 2 : 6 entries [11:16]
    column 32: bool 1
    column 33: bool 1
    column 36: bool 1
    column 38: bool 1
    column 39: bool 1
    column 59: bool 1
row: 3 : 4 entries [17:20]
    column 33: bool 1
    column 34: bool 1
    column 35: bool 1
    column 42: bool 1
row: 4 : 4 entries [21:24]
    column 33: bool 1
    column 35: bool 1
    column 53: bool 1
    column 57: bool 1
row: 5 : 3 entries [25:27]
    column 31: bool 1
    column 36: bool 1
    column 46: bool 1
row: 6 : 5 entries [28:32]
    column 33: bool 1
    column 37: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 7 entries [38:44]
    ...
row: 9 : 7 entries [45:51]
    ...
...

total time to read A matrix:       0.000899 sec

n 63 # edges 123
U=triu(A) time:        0.000026 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000014 sec
# triangles 0

tricount time:         0.000077 sec (dot product method)
tri+prep time:         0.000117 sec (incl time to compute L and U)
compute C time:        0.000058 sec
reduce (C) time:       0.000019 sec
rate       1.06 million edges/sec (incl time for U=triu(A))
rate       1.60 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000103 sec (outer product method)
tri+prep time:         0.000117 sec (incl time to compute L)
compute C time:        0.000094 sec
reduce (C) time:       0.000010 sec
rate       1.05 million edges/sec (incl time for L=tril(A))
rate       1.19 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 78 by 78, 204 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 78 ncols: 78 max # entries: 204
format: standard CSR vlen: 78 nvec_nonempty: 78 nvec: 78 plen: 78 vdim: 78
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 204 
row: 0 : 3 entries [0:2]
    column 46: bool 1
    column 47: bool 1
    column 48: bool 1
row: 1 : 2 entries [3:4]
    column 46: bool 1
    column 49: bool 1
row: 2 : 2 entries [5:6]
    column 27: bool 1
    column 46: bool 1
row: 3 : 3 entries [7:9]
    column 28: bool 1
    column 47: bool 1
    column 58: bool 1
row: 4 : 6 entries [10:15]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 58: bool 1
    column 59: bool 1
row: 5 : 5 entries [16:20]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 60: bool 1
row: 6 : 3 entries [21:23]
    column 29: bool 1
    column 50: bool 1
    column 54: bool 1
row: 7 : 3 entries [24:26]
    column 30: bool 1
    column 51: bool 1
    column 55: bool 1
row: 8 : 3 entries [27:29]
    column 31: bool 1
    column 52: bool 1
    column 56: bool 1
row: 9 : 3 entries [30:32]
    ...
...

total time to read A matrix:       0.000787 sec

n 78 # edges 102
U=triu(A) time:        0.000031 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000018 sec
# triangles 0

tricount time:         0.000059 sec (dot product method)
tri+prep time:         0.000108 sec (incl time to compute L and U)
compute C time:        0.000045 sec
reduce (C) time:       0.000014 sec
rate       0.95 million edges/sec (incl time for U=triu(A))
rate       1.73 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000101 sec (outer product method)
tri+prep time:         0.000119 sec (incl time to compute L)
compute C time:        0.000091 sec
reduce (C) time:       0.000010 sec
rate       0.86 million edges/sec (incl time for L=tril(A))
rate       1.01 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 982 by 982, 99840 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 982 ncols: 982 max # entries: 99840
format: standard CSR vlen: 982 nvec_nonempty: 933 nvec: 982 plen: 982 vdim: 982
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 99840 
row: 0 : 40 entries [0:39]
    column 494: bool 1
    column 496: bool 1
    column 497: bool 1
    column 498: bool 1
    column 500: bool 1
    column 501: bool 1
    column 503: bool 1
    column 506: bool 1
    column 510: bool 1
    column 574: bool 1
    column 575: bool 1
    column 578: bool 1
    column 579: bool 1
    column 580: bool 1
    column 581: bool 1
    column 582: bool 1
    column 583: bool 1
    column 584: bool 1
    column 585: bool 1
    column 587: bool 1
    column 589: bool 1
    column 591: bool 1
    column 592: bool 1
    column 594: bool 1
    column 597: bool 1
    column 600: bool 1
    column 607: bool 1
    column 608: bool 1
    column 614: bool 1
    column 616: bool 1
    ...
row: 1 : 34 entries [40:73]
    ...
row: 2 : 41 entries [74:114]
    ...
row: 3 : 50 entries [115:164]
    ...
row: 4 : 40 entries [165:204]
    ...
row: 5 : 44 entries [205:248]
    ...
row: 6 : 50 entries [249:298]
    ...
row: 7 : 35 entries [299:333]
    ...
row: 8 : 4 entries [334:337]
    ...
row: 9 : 190 entries [338:527]
    ...
...

total time to read A matrix:       0.058195 sec

n 982 # edges 49920
U=triu(A) time:        0.000625 sec

------------------------------------- dot product method:
L=tril(A) time:        0.001184 sec
# triangles 0

tricount time:         0.000583 sec (dot product method)
tri+prep time:         0.002393 sec (incl time to compute L and U)
compute C time:        0.000560 sec
reduce (C) time:       0.000023 sec
rate      20.86 million edges/sec (incl time for U=triu(A))
rate      85.56 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000264 sec (outer product method)
tri+prep time:         0.001448 sec (incl time to compute L)
compute C time:        0.000255 sec
reduce (C) time:       0.000009 sec
rate      34.47 million edges/sec (incl time for L=tril(A))
rate     188.85 million edges/sec (just tricount itself)


--------------------------------------------------------------
matrix 67 by 67, 574 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 67 ncols: 67 max # entries: 574
format: standard CSR vlen: 67 nvec_nonempty: 67 nvec: 67 plen: 67 vdim: 67
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 574 
row: 0 : 12 entries [0:11]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    column 8: bool 1
    column 12: bool 1
    column 17: bool 1
    column 24: bool 1
    column 25: bool 1
    column 26: bool 1
    column 27: bool 1
    column 28: bool 1
row: 1 : 7 entries [12:18]
    column 4: bool 1
    column 8: bool 1
    column 13: bool 1
    column 17: bool 1
    column 20: bool 1
    column 24: bool 1
    column 60: bool 1
row: 2 : 7 entries [19:25]
    column 5: bool 1
    column 9: bool 1
    column 14: bool 1
    column 17: bool 1
    column 21: bool 1
    column 25: bool 1
    column 60: bool 1
row: 3 : 7 entries [26:32]
    column 6: bool 1
    column 10: bool 1
    column 15: bool 1
    column 17: bool 1
    ...
row: 4 : 8 entries [33:40]
    ...
row: 5 : 7 entries [41:47]
    ...
row: 6 : 8 entries [48:55]
    ...
row: 7 : 6 entries [56:61]
    ...
row: 8 : 7 entries [62:68]
    ...
row: 9 : 9 entries [69:77]
    ...
...

total time to read A matrix:       0.001001 sec

n 67 # edges 287
U=triu(A) time:        0.000034 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000024 sec
# triangles 120

tricount time:         0.000096 sec (dot product method)
tri+prep time:         0.000153 sec (incl time to compute L and U)
compute C time:        0.000073 sec
reduce (C) time:       0.000022 sec
rate       1.87 million edges/sec (incl time for U=triu(A))
rate       3.00 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.000068 sec (outer product method)
tri+prep time:         0.000092 sec (incl time to compute L)
compute C time:        0.000056 sec
reduce (C) time:       0.000012 sec
rate       3.13 million edges/sec (incl time for L=tril(A))
rate       4.24 million edges/sec (just tricount itself)


--------------------------------------------------------------
Wathen: nx 200 ny 200 n 120801 nz 1762400 method 0, time: 0.470 sec

GraphBLAS matrix: from get_matrix: 
nrows: 120801 ncols: 120801 max # entries: 1883201
format: standard CSR vlen: 120801 nvec_nonempty: 120801 nvec: 120801 plen: 120801 vdim: 120801
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 1762400 
row: 0 : 7 entries [0:6]
    column 1: double -3.43365642660378
    column 2: double 1.14455214220126
    column 401: double -3.43365642660378
    column 402: double -4.57820856880504
    column 602: double 1.14455214220126
    column 603: double -4.57820856880504
    column 604: double 1.71682821330189
row: 1 : 7 entries [7:13]
    column 0: double -3.43365642660378
    column 2: double -3.43365642660378
    column 401: double 11.4455214220126
    column 402: double 11.4455214220126
    column 602: double -4.57820856880504
    column 603: double 9.15641713761008
    column 604: double -4.57820856880504
row: 2 : 12 entries [14:25]
    column 0: double 1.14455214220126
    column 1: double -3.43365642660378
    column 3: double -9.1794115743147
    column 4: double 3.0598038581049
    column 401: double -4.57820856880504
    column 402: double -12.6130680009185
    column 403: double -12.2392154324196
    column 602: double 1.71682821330189
    column 603: double -4.57820856880504
    column 604: double 4.20435600030616
    column 605: double -12.2392154324196
    column 606: double 4.58970578715735
row: 3 : 7 entries [26:32]
    column 2: double -9.1794115743147
    column 4: double -9.1794115743147
    column 402: double 30.598038581049
    column 403: double 30.598038581049
    ...
row: 4 : 12 entries [33:44]
    ...
row: 5 : 7 entries [45:51]
    ...
row: 6 : 12 entries [52:63]
    ...
row: 7 : 7 entries [64:70]
    ...
row: 8 : 12 entries [71:82]
    ...
row: 9 : 7 entries [83:89]
    ...
...

total time to read A matrix:       0.500207 sec

n 120801 # edges 881200
U=triu(A) time:        0.010464 sec

------------------------------------- dot product method:
L=tril(A) time:        0.008937 sec
# triangles 2160400

tricount time:         0.026678 sec (dot product method)
tri+prep time:         0.046079 sec (incl time to compute L and U)
compute C time:        0.022880 sec
reduce (C) time:       0.003798 sec
rate      19.12 million edges/sec (incl time for U=triu(A))
rate      33.03 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.021253 sec (outer product method)
tri+prep time:         0.030190 sec (incl time to compute L)
compute C time:        0.018004 sec
reduce (C) time:       0.003248 sec
rate      29.19 million edges/sec (incl time for L=tril(A))
rate      41.46 million edges/sec (just tricount itself)


--------------------------------------------------------------
random 10000 by 10000, nz: 199768, method 0 time 0.046 sec

GraphBLAS matrix: from get_matrix: 
nrows: 10000 ncols: 10000 max # entries: 199768
format: standard CSR vlen: 10000 nvec_nonempty: 10000 nvec: 10000 plen: 10000 vdim: 10000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 199768 
row: 0 : 27 entries [0:26]
    column 214: double 0.611428854126681
    column 599: double 0.759817736907767
    column 687: double 0.490404969132481
    column 1945: double 0.220198646141235
    column 2206: double 0.469879566865097
    column 3108: double 0.861235641490359
    column 3938: double 0.161881899547966
    column 4048: double 0.974307955822525
    column 4050: double 0.0806984691326516
    column 4327: double 0.845122101573719
    column 4526: double 0.917189450706256
    column 4651: double 0.953684565813323
    column 5080: double 0.524531191328185
    column 5289: double 0.373677450804412
    column 5397: double 0.147001725909933
    column 5574: double 0.741414052708653
    column 5603: double 0.0243003910252495
    column 6319: double 0.386650481372716
    column 6693: double 0.985725408162066
    column 7242: double 0.387267836971157
    column 7597: double 0.148198968114398
    column 7855: double 0.161521142087958
    column 8149: double 0.80591885984148
    column 8307: double 0.583442051968559
    column 8807: double 0.201124811360069
    column 9224: double 0.246570360972623
    column 9320: double 0.810676243146442
row: 1 : 18 entries [27:44]
    column 222: double 0.199748643507498
    column 1002: double 0.723475211370372
    column 1776: double 0.424430120199892
    ...
row: 2 : 18 entries [45:62]
    ...
row: 3 : 20 entries [63:82]
    ...
row: 4 : 27 entries [83:109]
    ...
row: 5 : 23 entries [110:132]
    ...
row: 6 : 23 entries [133:155]
    ...
row: 7 : 18 entries [156:173]
    ...
row: 8 : 22 entries [174:195]
    ...
row: 9 : 17 entries [196:212]
    ...
...

total time to read A matrix:       0.053126 sec

n 10000 # edges 99884
U=triu(A) time:        0.001366 sec

------------------------------------- dot product method:
L=tril(A) time:        0.001113 sec
# triangles 1357

tricount time:         0.017467 sec (dot product method)
tri+prep time:         0.019946 sec (incl time to compute L and U)
compute C time:        0.017426 sec
reduce (C) time:       0.000041 sec
rate       5.01 million edges/sec (incl time for U=triu(A))
rate       5.72 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.005752 sec (outer product method)
tri+prep time:         0.006866 sec (incl time to compute L)
compute C time:        0.005697 sec
reduce (C) time:       0.000055 sec
rate      14.55 million edges/sec (incl time for L=tril(A))
rate      17.36 million edges/sec (just tricount itself)


--------------------------------------------------------------
random 10000 by 10000, nz: 199768, method 1 time 0.041 sec

GraphBLAS matrix: from get_matrix: 
nrows: 10000 ncols: 10000 max # entries: 199768
format: standard CSR vlen: 10000 nvec_nonempty: 10000 nvec: 10000 plen: 10000 vdim: 10000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 199768 
row: 0 : 27 entries [0:26]
    column 214: double 0.611428854126681
    column 599: double 0.759817736907767
    column 687: double 0.490404969132481
    column 1945: double 0.220198646141235
    column 2206: double 0.469879566865097
    column 3108: double 0.861235641490359
    column 3938: double 0.161881899547966
    column 4048: double 0.974307955822525
    column 4050: double 0.0806984691326516
    column 4327: double 0.845122101573719
    column 4526: double 0.917189450706256
    column 4651: double 0.953684565813323
    column 5080: double 0.524531191328185
    column 5289: double 0.373677450804412
    column 5397: double 0.147001725909933
    column 5574: double 0.741414052708653
    column 5603: double 0.0243003910252495
    column 6319: double 0.386650481372716
    column 6693: double 0.985725408162066
    column 7242: double 0.387267836971157
    column 7597: double 0.148198968114398
    column 7855: double 0.161521142087958
    column 8149: double 0.80591885984148
    column 8307: double 0.583442051968559
    column 8807: double 0.201124811360069
    column 9224: double 0.246570360972623
    column 9320: double 0.810676243146442
row: 1 : 18 entries [27:44]
    column 222: double 0.199748643507498
    column 1002: double 0.723475211370372
    column 1776: double 0.424430120199892
    ...
row: 2 : 18 entries [45:62]
    ...
row: 3 : 20 entries [63:82]
    ...
row: 4 : 27 entries [83:109]
    ...
row: 5 : 23 entries [110:132]
    ...
row: 6 : 23 entries [133:155]
    ...
row: 7 : 18 entries [156:173]
    ...
row: 8 : 22 entries [174:195]
    ...
row: 9 : 17 entries [196:212]
    ...
...

total time to read A matrix:       0.045037 sec

n 10000 # edges 99884
U=triu(A) time:        0.001321 sec

------------------------------------- dot product method:
L=tril(A) time:        0.000779 sec
# triangles 1357

tricount time:         0.016029 sec (dot product method)
tri+prep time:         0.018128 sec (incl time to compute L and U)
compute C time:        0.015983 sec
reduce (C) time:       0.000045 sec
rate       5.51 million edges/sec (incl time for U=triu(A))
rate       6.23 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         0.005097 sec (outer product method)
tri+prep time:         0.005876 sec (incl time to compute L)
compute C time:        0.005070 sec
reduce (C) time:       0.000028 sec
rate      17.00 million edges/sec (incl time for L=tril(A))
rate      19.60 million edges/sec (just tricount itself)


--------------------------------------------------------------
random 100000 by 100000, nz: 19980330, method 0 time 6.241 sec

GraphBLAS matrix: from get_matrix: 
nrows: 100000 ncols: 100000 max # entries: 19980330
format: standard CSR vlen: 100000 nvec_nonempty: 100000 nvec: 100000 plen: 100000 vdim: 100000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 19980330 
row: 0 : 189 entries [0:188]
    column 68: double 0.661716873588655
    column 778: double 0.346667912736641
    column 1801: double 0.371952817962016
    column 1839: double 0.197836379076741
    column 3356: double 0.878444087311034
    column 3756: double 0.217022247656947
    column 4441: double 0.2577766982832
    column 4808: double 0.392707915752597
    column 4922: double 0.0962031972027673
    column 5075: double 0.691830102660204
    column 6296: double 0.917483099015425
    column 7151: double 0.193326447087741
    column 7221: double 0.230494023532692
    column 8657: double 0.934093089488637
    column 9473: double 0.795621154107574
    column 9524: double 0.0817629687243753
    column 9648: double 0.357546753659551
    column 11313: double 0.0928425661313169
    column 11744: double 0.444733012853217
    column 12263: double 0.615758200269077
    column 12332: double 0.251131194044459
    column 13111: double 0.219714040656976
    column 13699: double 0.761268198442996
    column 14471: double 0.123158921695327
    column 14892: double 0.85213404597076
    column 15591: double 0.442234173393239
    column 16106: double 0.422217457293673
    column 16346: double 0.705855402008225
    column 16403: double 0.434678226736306
    column 16612: double 0.994128715640082
    ...
row: 1 : 163 entries [189:351]
    ...
row: 2 : 201 entries [352:552]
    ...
row: 3 : 205 entries [553:757]
    ...
row: 4 : 214 entries [758:971]
    ...
row: 5 : 193 entries [972:1164]
    ...
row: 6 : 215 entries [1165:1379]
    ...
row: 7 : 195 entries [1380:1574]
    ...
row: 8 : 210 entries [1575:1784]
    ...
row: 9 : 205 entries [1785:1989]
    ...
...

total time to read A matrix:       6.672073 sec

n 100000 # edges 9990165
U=triu(A) time:        0.166200 sec

------------------------------------- dot product method:
L=tril(A) time:        0.136051 sec
# triangles 1330131

tricount time:        10.895035 sec (dot product method)
tri+prep time:        11.197286 sec (incl time to compute L and U)
compute C time:       10.888513 sec
reduce (C) time:       0.006522 sec
rate       0.89 million edges/sec (incl time for U=triu(A))
rate       0.92 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         3.647234 sec (outer product method)
tri+prep time:         3.783285 sec (incl time to compute L)
compute C time:        3.632954 sec
reduce (C) time:       0.014280 sec
rate       2.64 million edges/sec (incl time for L=tril(A))
rate       2.74 million edges/sec (just tricount itself)


--------------------------------------------------------------
random 100000 by 100000, nz: 19980330, method 1 time 5.050 sec

GraphBLAS matrix: from get_matrix: 
nrows: 100000 ncols: 100000 max # entries: 19980330
format: standard CSR vlen: 100000 nvec_nonempty: 100000 nvec: 100000 plen: 100000 vdim: 100000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 19980330 
row: 0 : 189 entries [0:188]
    column 68: double 0.661716873588655
    column 778: double 0.346667912736641
    column 1801: double 0.371952817962016
    column 1839: double 0.197836379076741
    column 3356: double 0.878444087311034
    column 3756: double 0.217022247656947
    column 4441: double 0.2577766982832
    column 4808: double 0.392707915752597
    column 4922: double 0.0962031972027673
    column 5075: double 0.691830102660204
    column 6296: double 0.917483099015425
    column 7151: double 0.193326447087741
    column 7221: double 0.230494023532692
    column 8657: double 0.934093089488637
    column 9473: double 0.795621154107574
    column 9524: double 0.0817629687243753
    column 9648: double 0.357546753659551
    column 11313: double 0.0928425661313169
    column 11744: double 0.444733012853217
    column 12263: double 0.615758200269077
    column 12332: double 0.251131194044459
    column 13111: double 0.219714040656976
    column 13699: double 0.761268198442996
    column 14471: double 0.123158921695327
    column 14892: double 0.85213404597076
    column 15591: double 0.442234173393239
    column 16106: double 0.422217457293673
    column 16346: double 0.705855402008225
    column 16403: double 0.434678226736306
    column 16612: double 0.994128715640082
    ...
row: 1 : 163 entries [189:351]
    ...
row: 2 : 201 entries [352:552]
    ...
row: 3 : 205 entries [553:757]
    ...
row: 4 : 214 entries [758:971]
    ...
row: 5 : 193 entries [972:1164]
    ...
row: 6 : 215 entries [1165:1379]
    ...
row: 7 : 195 entries [1380:1574]
    ...
row: 8 : 210 entries [1575:1784]
    ...
row: 9 : 205 entries [1785:1989]
    ...
...

total time to read A matrix:       5.476703 sec

n 100000 # edges 9990165
U=triu(A) time:        0.158366 sec

------------------------------------- dot product method:
L=tril(A) time:        0.150133 sec
# triangles 1330131

tricount time:        11.709715 sec (dot product method)
tri+prep time:        12.018214 sec (incl time to compute L and U)
compute C time:       11.703620 sec
reduce (C) time:       0.006095 sec
rate       0.83 million edges/sec (incl time for U=triu(A))
rate       0.85 million edges/sec (just tricount itself)


----------------------------------- outer product method:
tricount time:         3.455971 sec (outer product method)
tri+prep time:         3.606104 sec (incl time to compute L)
compute C time:        3.445793 sec
reduce (C) time:       0.010178 sec
rate       2.77 million edges/sec (incl time for L=tril(A))
rate       2.89 million edges/sec (just tricount itself)


