Wathen: nx 4 ny 4 n 65 nz 817 method 0, time: 0.000 sec

GraphBLAS matrix: from get_matrix: 
nrows: 65 ncols: 65 max # entries: 817
format: standard CSR vlen: 65 nvec_nonempty: 65 nvec: 65 plen: 65 vdim: 65
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 817 
row: 0 : 8 entries [0:7]
    column 0: double 6.85160883409121
    column 1: double -6.85160883409121
    column 2: double 2.28386961136374
    column 9: double -6.85160883409121
    column 10: double -9.13547844545495
    column 14: double 2.28386961136374
    column 15: double -9.13547844545495
    column 16: double 3.42580441704561
row: 1 : 8 entries [8:15]
    column 0: double -6.85160883409121
    column 1: double 36.5419137818198
    column 2: double -6.85160883409121
    column 9: double 22.8386961136374
    column 10: double 22.8386961136374
    column 14: double -9.13547844545495
    column 15: double 18.2709568909099
    column 16: double -9.13547844545495
row: 2 : 13 entries [16:28]
    column 0: double 2.28386961136374
    column 1: double -6.85160883409121
    column 2: double 9.19461653492844
    column 3: double -2.34300770083722
    column 4: double 0.781002566945742
    column 9: double -9.13547844545495
    column 10: double -9.19461653492844
    column 11: double -3.12401026778297
    column 14: double 3.42580441704561
    column 15: double -9.13547844545495
    column 16: double 3.06487217830948
    column 17: double -3.12401026778297
    column 18: double 1.17150385041861
row: 3 : 8 entries [29:36]
    column 2: double -2.34300770083722
    ...
row: 4 : 13 entries [37:49]
    ...
row: 5 : 8 entries [50:57]
    ...
row: 6 : 13 entries [58:70]
    ...
row: 7 : 8 entries [71:78]
    ...
row: 8 : 8 entries [79:86]
    ...
row: 9 : 8 entries [87:94]
    ...
...
number of nodes: 65

method 5: vector assign and reduce:
BFS time in seconds:       0.000224
nodes reachable from node 0: 65 out of 65
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.000079
nodes reachable from node 0: 65 out of 65
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.000083
nodes reachable from node 0: 65 out of 65
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.000068
nodes reachable from node 0: 65 out of 65
max BFS level: 5
random 5 by 5, nz: 23, method 1 time 0.000 sec

GraphBLAS matrix: from get_matrix: 
nrows: 5 ncols: 5 max # entries: 23
format: standard CSR vlen: 5 nvec_nonempty: 5 nvec: 5 plen: 5 vdim: 5
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 23 
row: 0 : 5 entries [0:4]
    column 0: double 0.344126712851344
    column 1: double 0.674092837305826
    column 2: double 0.738242744224372
    column 3: double 0.184392834253975
    column 4: double 0.1721549119541
row: 1 : 4 entries [5:8]
    column 0: double 0.674092837305826
    column 2: double 0.977111117893002
    column 3: double 0.171788689840388
    column 4: double 0.0787987914670247
row: 2 : 5 entries [9:13]
    column 0: double 0.738242744224372
    column 1: double 0.977111117893002
    column 2: double 0.565385906552324
    column 3: double 0.126438184759056
    column 4: double 0.0278939176610614
row: 3 : 5 entries [14:18]
    column 0: double 0.184392834253975
    column 1: double 0.171788689840388
    column 2: double 0.126438184759056
    column 3: double 0.880855739005707
    column 4: double 0.690511795403912
row: 4 : 4 entries [19:22]
    column 0: double 0.1721549119541
    column 1: double 0.0787987914670247
    column 2: double 0.0278939176610614
    column 3: double 0.690511795403912
number of nodes: 5

method 5: vector assign and reduce:
BFS time in seconds:       0.000179
nodes reachable from node 0: 5 out of 5
max BFS level: 2

method 5: same but check each result
BFS time in seconds:       0.000036
nodes reachable from node 0: 5 out of 5
max BFS level: 2

method 6: apply unary operator
BFS time in seconds:       0.000045
nodes reachable from node 0: 5 out of 5
max BFS level: 2

method 6: same but check each result
BFS time in seconds:       0.000032
nodes reachable from node 0: 5 out of 5
max BFS level: 2
ntuples: 3
nrows 3 ncols 3
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000077
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000053

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 3 ncols: 3 max # entries: 3
format: standard CSR vlen: 3 nvec_nonempty: 3 nvec: 3 plen: 3 vdim: 3
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 3 
row: 0 : 1 entries [0:0]
    column 0: bool 1
row: 1 : 1 entries [1:1]
    column 1: bool 1
row: 2 : 1 entries [2:2]
    column 2: bool 1
matrix 3 by 3, 3 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 3 ncols: 3 max # entries: 3
format: standard CSR vlen: 3 nvec_nonempty: 3 nvec: 3 plen: 3 vdim: 3
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 3 
row: 0 : 1 entries [0:0]
    column 0: bool 1
row: 1 : 1 entries [1:1]
    column 1: bool 1
row: 2 : 1 entries [2:2]
    column 2: bool 1
number of nodes: 3

method 5: vector assign and reduce:
BFS time in seconds:       0.000147
nodes reachable from node 0: 1 out of 3
max BFS level: 1

method 5: same but check each result
BFS time in seconds:       0.000029
nodes reachable from node 0: 1 out of 3
max BFS level: 1

method 6: apply unary operator
BFS time in seconds:       0.000038
nodes reachable from node 0: 1 out of 3
max BFS level: 1

method 6: same but check each result
BFS time in seconds:       0.000023
nodes reachable from node 0: 1 out of 3
max BFS level: 1
ntuples: 8
nrows 4 ncols 4
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000063
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000053

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 4 ncols: 4 max # entries: 8
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 8 
row: 0 : 2 entries [0:1]
    column 0: bool 1
    column 1: bool 1
row: 1 : 2 entries [2:3]
    column 0: bool 1
    column 1: bool 1
row: 2 : 2 entries [4:5]
    column 2: bool 1
    column 3: bool 1
row: 3 : 2 entries [6:7]
    column 2: bool 1
    column 3: bool 1
matrix 4 by 4, 8 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4 ncols: 4 max # entries: 8
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 8 
row: 0 : 2 entries [0:1]
    column 0: bool 1
    column 1: bool 1
row: 1 : 2 entries [2:3]
    column 0: bool 1
    column 1: bool 1
row: 2 : 2 entries [4:5]
    column 2: bool 1
    column 3: bool 1
row: 3 : 2 entries [6:7]
    column 2: bool 1
    column 3: bool 1
number of nodes: 4

method 5: vector assign and reduce:
BFS time in seconds:       0.000140
nodes reachable from node 0: 2 out of 4
max BFS level: 2

method 5: same but check each result
BFS time in seconds:       0.000030
nodes reachable from node 0: 2 out of 4
max BFS level: 2

method 6: apply unary operator
BFS time in seconds:       0.000039
nodes reachable from node 0: 2 out of 4
max BFS level: 2

method 6: same but check each result
BFS time in seconds:       0.000026
nodes reachable from node 0: 2 out of 4
max BFS level: 2

------------------- this fails:

=================================================================
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Monoid_new_INT32 (&monoid, op, identity)
Identity type [int32_t]
must be identical to monoid operator z=or(x,y) of type [bool]
=================================================================


------------------- this is OK:

=================================================================
SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2018, All Rights Reserved.
http://suitesparse.com  Dept of Computer Sci. & Eng, Texas A&M University
SuiteSparse:GraphBLAS version: 2.2.0  Date: Nov 13, 2018 (BETA2)
SuiteSparse:GraphBLAS, Copyright 2017-2018, Timothy A. Davis

Licensed under the Apache License, Version 2.0 (the "License");
you may not use SuiteSparse:GraphBLAS except in compliance with the
License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
Conforms to GraphBLAS spec:    1.2.0  Date: May 18, 2018
GraphBLAS C API, by Aydin Buluc, Timothy Mattson, Scott McMillan,
Jose' Moreira, Carl Yang.  Based on "GraphBLAS Mathematics" by
Jeremy Kepner.  See also "Graph Algorithms in the Language of
Linear Algebra", edited by J. Kepner and J. Gilbert, SIAM, 2011.
=================================================================
GraphBLAS status: GrB_SUCCESS
=================================================================

ntuples: 10
nrows 4 ncols 4
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000066
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000053

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 4 ncols: 4 max # entries: 14
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 14 
row: 0 : 4 entries [0:3]
    column 0: bool 1
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
row: 1 : 4 entries [4:7]
    column 0: bool 1
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
row: 2 : 3 entries [8:10]
    column 0: bool 1
    column 1: bool 1
    column 2: bool 1
row: 3 : 3 entries [11:13]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
matrix 4 by 4, 14 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4 ncols: 4 max # entries: 14
format: standard CSR vlen: 4 nvec_nonempty: 4 nvec: 4 plen: 4 vdim: 4
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 14 
row: 0 : 4 entries [0:3]
    column 0: bool 1
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
row: 1 : 4 entries [4:7]
    column 0: bool 1
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
row: 2 : 3 entries [8:10]
    column 0: bool 1
    column 1: bool 1
    column 2: bool 1
row: 3 : 3 entries [11:13]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
number of nodes: 4

method 5: vector assign and reduce:
BFS time in seconds:       0.000173
nodes reachable from node 0: 4 out of 4
max BFS level: 2

method 5: same but check each result
BFS time in seconds:       0.000035
nodes reachable from node 0: 4 out of 4
max BFS level: 2

method 6: apply unary operator
BFS time in seconds:       0.000043
nodes reachable from node 0: 4 out of 4
max BFS level: 2

method 6: same but check each result
BFS time in seconds:       0.000030
nodes reachable from node 0: 4 out of 4
max BFS level: 2

------------------- this fails:

=================================================================
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Monoid_new_INT32 (&monoid, op, identity)
Identity type [int32_t]
must be identical to monoid operator z=or(x,y) of type [bool]
=================================================================


------------------- this is OK:

=================================================================
SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2018, All Rights Reserved.
http://suitesparse.com  Dept of Computer Sci. & Eng, Texas A&M University
SuiteSparse:GraphBLAS version: 2.2.0  Date: Nov 13, 2018 (BETA2)
SuiteSparse:GraphBLAS, Copyright 2017-2018, Timothy A. Davis

Licensed under the Apache License, Version 2.0 (the "License");
you may not use SuiteSparse:GraphBLAS except in compliance with the
License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
Conforms to GraphBLAS spec:    1.2.0  Date: May 18, 2018
GraphBLAS C API, by Aydin Buluc, Timothy Mattson, Scott McMillan,
Jose' Moreira, Carl Yang.  Based on "GraphBLAS Mathematics" by
Jeremy Kepner.  See also "Graph Algorithms in the Language of
Linear Algebra", edited by J. Kepner and J. Gilbert, SIAM, 2011.
=================================================================
GraphBLAS status: GrB_SUCCESS
=================================================================

ntuples: 8
nrows 4 ncols 3
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000063
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000074

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 7 ncols: 7 max # entries: 16
format: standard CSR vlen: 7 nvec_nonempty: 7 nvec: 7 plen: 7 vdim: 7
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 16 
row: 0 : 2 entries [0:1]
    column 5: bool 1
    column 6: bool 1
row: 1 : 2 entries [2:3]
    column 5: bool 1
    column 6: bool 1
row: 2 : 1 entries [4:4]
    column 4: bool 1
row: 3 : 3 entries [5:7]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
row: 4 : 2 entries [8:9]
    column 2: bool 1
    column 3: bool 1
row: 5 : 3 entries [10:12]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
row: 6 : 3 entries [13:15]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
matrix 7 by 7, 16 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 7 ncols: 7 max # entries: 16
format: standard CSR vlen: 7 nvec_nonempty: 7 nvec: 7 plen: 7 vdim: 7
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 16 
row: 0 : 2 entries [0:1]
    column 5: bool 1
    column 6: bool 1
row: 1 : 2 entries [2:3]
    column 5: bool 1
    column 6: bool 1
row: 2 : 1 entries [4:4]
    column 4: bool 1
row: 3 : 3 entries [5:7]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
row: 4 : 2 entries [8:9]
    column 2: bool 1
    column 3: bool 1
row: 5 : 3 entries [10:12]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
row: 6 : 3 entries [13:15]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
number of nodes: 7

method 5: vector assign and reduce:
BFS time in seconds:       0.000150
nodes reachable from node 0: 7 out of 7
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.000055
nodes reachable from node 0: 7 out of 7
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.000062
nodes reachable from node 0: 7 out of 7
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.000047
nodes reachable from node 0: 7 out of 7
max BFS level: 5
ntuples: 438
nrows 219 ncols 85
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000137
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000163

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 304 ncols: 304 max # entries: 876
format: standard CSR vlen: 304 nvec_nonempty: 304 nvec: 304 plen: 304 vdim: 304
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 876 
row: 0 : 2 entries [0:1]
    column 219: bool 1
    column 220: bool 1
row: 1 : 2 entries [2:3]
    column 219: bool 1
    column 226: bool 1
row: 2 : 2 entries [4:5]
    column 219: bool 1
    column 225: bool 1
row: 3 : 2 entries [6:7]
    column 219: bool 1
    column 224: bool 1
row: 4 : 2 entries [8:9]
    column 220: bool 1
    column 221: bool 1
row: 5 : 2 entries [10:11]
    column 220: bool 1
    column 228: bool 1
row: 6 : 2 entries [12:13]
    column 220: bool 1
    column 227: bool 1
row: 7 : 2 entries [14:15]
    column 220: bool 1
    column 226: bool 1
row: 8 : 2 entries [16:17]
    column 221: bool 1
    column 222: bool 1
row: 9 : 2 entries [18:19]
    column 221: bool 1
...
matrix 304 by 304, 876 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 304 ncols: 304 max # entries: 876
format: standard CSR vlen: 304 nvec_nonempty: 304 nvec: 304 plen: 304 vdim: 304
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 876 
row: 0 : 2 entries [0:1]
    column 219: bool 1
    column 220: bool 1
row: 1 : 2 entries [2:3]
    column 219: bool 1
    column 226: bool 1
row: 2 : 2 entries [4:5]
    column 219: bool 1
    column 225: bool 1
row: 3 : 2 entries [6:7]
    column 219: bool 1
    column 224: bool 1
row: 4 : 2 entries [8:9]
    column 220: bool 1
    column 221: bool 1
row: 5 : 2 entries [10:11]
    column 220: bool 1
    column 228: bool 1
row: 6 : 2 entries [12:13]
    column 220: bool 1
    column 227: bool 1
row: 7 : 2 entries [14:15]
    column 220: bool 1
    column 226: bool 1
row: 8 : 2 entries [16:17]
    column 221: bool 1
    column 222: bool 1
row: 9 : 2 entries [18:19]
    column 221: bool 1
...
number of nodes: 304

method 5: vector assign and reduce:
BFS time in seconds:       0.000498
nodes reachable from node 0: 304 out of 304
max BFS level: 17

method 5: same but check each result
BFS time in seconds:       0.000245
nodes reachable from node 0: 304 out of 304
max BFS level: 17

method 6: apply unary operator
BFS time in seconds:       0.000228
nodes reachable from node 0: 304 out of 304
max BFS level: 17

method 6: same but check each result
BFS time in seconds:       0.000206
nodes reachable from node 0: 304 out of 304
max BFS level: 17
ntuples: 224
nrows 48 ncols 48
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000078
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000046

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 48 ncols: 48 max # entries: 400
format: standard CSR vlen: 48 nvec_nonempty: 48 nvec: 48 plen: 48 vdim: 48
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 400 
row: 0 : 8 entries [0:7]
    column 0: bool 1
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 10: bool 1
    column 18: bool 1
    column 24: bool 1
    column 29: bool 1
row: 1 : 8 entries [8:15]
    column 1: bool 1
    column 3: bool 1
    column 5: bool 1
    column 7: bool 1
    column 9: bool 1
    column 19: bool 1
    column 23: bool 1
    column 25: bool 1
row: 2 : 8 entries [16:23]
    column 2: bool 1
    column 3: bool 1
    column 4: bool 1
    column 8: bool 1
    column 20: bool 1
    column 22: bool 1
    column 26: bool 1
    column 27: bool 1
row: 3 : 8 entries [24:31]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 7: bool 1
    column 9: bool 1
    column 21: bool 1
    ...
row: 4 : 8 entries [32:39]
    ...
row: 5 : 8 entries [40:47]
    ...
row: 6 : 8 entries [48:55]
    ...
row: 7 : 8 entries [56:63]
    ...
row: 8 : 8 entries [64:71]
    ...
row: 9 : 8 entries [72:79]
    ...
...
matrix 48 by 48, 400 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 48 ncols: 48 max # entries: 400
format: standard CSR vlen: 48 nvec_nonempty: 48 nvec: 48 plen: 48 vdim: 48
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 400 
row: 0 : 8 entries [0:7]
    column 0: bool 1
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 10: bool 1
    column 18: bool 1
    column 24: bool 1
    column 29: bool 1
row: 1 : 8 entries [8:15]
    column 1: bool 1
    column 3: bool 1
    column 5: bool 1
    column 7: bool 1
    column 9: bool 1
    column 19: bool 1
    column 23: bool 1
    column 25: bool 1
row: 2 : 8 entries [16:23]
    column 2: bool 1
    column 3: bool 1
    column 4: bool 1
    column 8: bool 1
    column 20: bool 1
    column 22: bool 1
    column 26: bool 1
    column 27: bool 1
row: 3 : 8 entries [24:31]
    column 1: bool 1
    column 2: bool 1
    column 3: bool 1
    column 7: bool 1
    column 9: bool 1
    column 21: bool 1
    ...
row: 4 : 8 entries [32:39]
    ...
row: 5 : 8 entries [40:47]
    ...
row: 6 : 8 entries [48:55]
    ...
row: 7 : 8 entries [56:63]
    ...
row: 8 : 8 entries [64:71]
    ...
row: 9 : 8 entries [72:79]
    ...
...
number of nodes: 48

method 5: vector assign and reduce:
BFS time in seconds:       0.000199
nodes reachable from node 0: 48 out of 48
max BFS level: 4

method 5: same but check each result
BFS time in seconds:       0.000063
nodes reachable from node 0: 48 out of 48
max BFS level: 4

method 6: apply unary operator
BFS time in seconds:       0.000069
nodes reachable from node 0: 48 out of 48
max BFS level: 4

method 6: same but check each result
BFS time in seconds:       0.000056
nodes reachable from node 0: 48 out of 48
max BFS level: 4
ntuples: 147631
nrows 4884 ncols 4884
time to prune self-edges:     0.000008
time to build the graph with GrB_Matrix_build:     0.018757
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.003641

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 4884 ncols: 4884 max # entries: 290378
format: standard CSR vlen: 4884 nvec_nonempty: 4884 nvec: 4884 plen: 4884 vdim: 4884
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 290378 
row: 0 : 15 entries [0:14]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 1 : 15 entries [15:29]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 2 : 1 entries [30:30]
    ...
row: 3 : 25 entries [31:55]
    ...
row: 4 : 25 entries [56:80]
    ...
row: 5 : 1 entries [81:81]
    ...
row: 6 : 30 entries [82:111]
    ...
row: 7 : 30 entries [112:141]
    ...
row: 8 : 1 entries [142:142]
    ...
row: 9 : 30 entries [143:172]
    ...
...
matrix 4884 by 4884, 290378 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 4884 ncols: 4884 max # entries: 290378
format: standard CSR vlen: 4884 nvec_nonempty: 4884 nvec: 4884 plen: 4884 vdim: 4884
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 290378 
row: 0 : 15 entries [0:14]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 1 : 15 entries [15:29]
    column 0: bool 1
    column 1: bool 1
    column 3: bool 1
    column 4: bool 1
    column 6: bool 1
    column 7: bool 1
    column 111: bool 1
    column 112: bool 1
    column 113: bool 1
    column 114: bool 1
    column 115: bool 1
    column 116: bool 1
    column 117: bool 1
    column 118: bool 1
    column 119: bool 1
row: 2 : 1 entries [30:30]
    ...
row: 3 : 25 entries [31:55]
    ...
row: 4 : 25 entries [56:80]
    ...
row: 5 : 1 entries [81:81]
    ...
row: 6 : 30 entries [82:111]
    ...
row: 7 : 30 entries [112:141]
    ...
row: 8 : 1 entries [142:142]
    ...
row: 9 : 30 entries [143:172]
    ...
...
number of nodes: 4884

method 5: vector assign and reduce:
BFS time in seconds:       0.003839
nodes reachable from node 0: 4810 out of 4884
max BFS level: 44

method 5: same but check each result
BFS time in seconds:       0.003631
nodes reachable from node 0: 4810 out of 4884
max BFS level: 44

method 6: apply unary operator
BFS time in seconds:       0.003244
nodes reachable from node 0: 4810 out of 4884
max BFS level: 44

method 6: same but check each result
BFS time in seconds:       0.003064
nodes reachable from node 0: 4810 out of 4884
max BFS level: 44
ntuples: 1069
nrows 183 ncols 183
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000125
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000064

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 183 ncols: 183 max # entries: 1585
format: standard CSR vlen: 183 nvec_nonempty: 183 nvec: 183 plen: 183 vdim: 183
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1585 
row: 0 : 105 entries [0:104]
    column 0: bool 1
    column 1: bool 1
    column 19: bool 1
    column 20: bool 1
    column 21: bool 1
    column 22: bool 1
    column 23: bool 1
    column 25: bool 1
    column 26: bool 1
    column 41: bool 1
    column 42: bool 1
    column 43: bool 1
    column 48: bool 1
    column 49: bool 1
    column 50: bool 1
    column 55: bool 1
    column 56: bool 1
    column 58: bool 1
    column 59: bool 1
    column 60: bool 1
    column 61: bool 1
    column 63: bool 1
    column 64: bool 1
    column 66: bool 1
    column 67: bool 1
    column 69: bool 1
    column 70: bool 1
    column 71: bool 1
    column 72: bool 1
    column 73: bool 1
    ...
row: 1 : 77 entries [105:181]
    ...
row: 2 : 7 entries [182:188]
    ...
row: 3 : 16 entries [189:204]
    ...
row: 4 : 3 entries [205:207]
    ...
row: 5 : 4 entries [208:211]
    ...
row: 6 : 6 entries [212:217]
    ...
row: 7 : 6 entries [218:223]
    ...
row: 8 : 5 entries [224:228]
    ...
row: 9 : 5 entries [229:233]
    ...
...
matrix 183 by 183, 1585 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 183 ncols: 183 max # entries: 1585
format: standard CSR vlen: 183 nvec_nonempty: 183 nvec: 183 plen: 183 vdim: 183
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 1585 
row: 0 : 105 entries [0:104]
    column 0: bool 1
    column 1: bool 1
    column 19: bool 1
    column 20: bool 1
    column 21: bool 1
    column 22: bool 1
    column 23: bool 1
    column 25: bool 1
    column 26: bool 1
    column 41: bool 1
    column 42: bool 1
    column 43: bool 1
    column 48: bool 1
    column 49: bool 1
    column 50: bool 1
    column 55: bool 1
    column 56: bool 1
    column 58: bool 1
    column 59: bool 1
    column 60: bool 1
    column 61: bool 1
    column 63: bool 1
    column 64: bool 1
    column 66: bool 1
    column 67: bool 1
    column 69: bool 1
    column 70: bool 1
    column 71: bool 1
    column 72: bool 1
    column 73: bool 1
    ...
row: 1 : 77 entries [105:181]
    ...
row: 2 : 7 entries [182:188]
    ...
row: 3 : 16 entries [189:204]
    ...
row: 4 : 3 entries [205:207]
    ...
row: 5 : 4 entries [208:211]
    ...
row: 6 : 6 entries [212:217]
    ...
row: 7 : 6 entries [218:223]
    ...
row: 8 : 5 entries [224:228]
    ...
row: 9 : 5 entries [229:233]
    ...
...
number of nodes: 183

method 5: vector assign and reduce:
BFS time in seconds:       0.000254
nodes reachable from node 0: 183 out of 183
max BFS level: 4

method 5: same but check each result
BFS time in seconds:       0.000100
nodes reachable from node 0: 183 out of 183
max BFS level: 4

method 6: apply unary operator
BFS time in seconds:       0.000098
nodes reachable from node 0: 183 out of 183
max BFS level: 4

method 6: same but check each result
BFS time in seconds:       0.000083
nodes reachable from node 0: 183 out of 183
max BFS level: 4
ntuples: 123
nrows 32 ncols 31
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000079
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000091

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 32: bool 1
    column 33: bool 1
    column 37: bool 1
    column 39: bool 1
    column 41: bool 1
    column 50: bool 1
row: 1 : 6 entries [6:11]
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 42: bool 1
    column 46: bool 1
    column 54: bool 1
row: 2 : 8 entries [12:19]
    column 32: bool 1
    column 34: bool 1
    column 35: bool 1
    column 36: bool 1
    column 38: bool 1
    column 45: bool 1
    column 52: bool 1
    column 60: bool 1
row: 3 : 4 entries [20:23]
    column 32: bool 1
    column 35: bool 1
    column 47: bool 1
    column 48: bool 1
row: 4 : 4 entries [24:27]
    column 35: bool 1
    column 36: bool 1
    column 58: bool 1
    column 60: bool 1
row: 5 : 5 entries [28:32]
    column 34: bool 1
    column 37: bool 1
    ...
row: 6 : 3 entries [33:35]
    ...
row: 7 : 3 entries [36:38]
    ...
row: 8 : 4 entries [39:42]
    ...
row: 9 : 3 entries [43:45]
    ...
...
matrix 63 by 63, 246 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 32: bool 1
    column 33: bool 1
    column 37: bool 1
    column 39: bool 1
    column 41: bool 1
    column 50: bool 1
row: 1 : 6 entries [6:11]
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 42: bool 1
    column 46: bool 1
    column 54: bool 1
row: 2 : 8 entries [12:19]
    column 32: bool 1
    column 34: bool 1
    column 35: bool 1
    column 36: bool 1
    column 38: bool 1
    column 45: bool 1
    column 52: bool 1
    column 60: bool 1
row: 3 : 4 entries [20:23]
    column 32: bool 1
    column 35: bool 1
    column 47: bool 1
    column 48: bool 1
row: 4 : 4 entries [24:27]
    column 35: bool 1
    column 36: bool 1
    column 58: bool 1
    column 60: bool 1
row: 5 : 5 entries [28:32]
    column 34: bool 1
    column 37: bool 1
    ...
row: 6 : 3 entries [33:35]
    ...
row: 7 : 3 entries [36:38]
    ...
row: 8 : 4 entries [39:42]
    ...
row: 9 : 3 entries [43:45]
    ...
...
number of nodes: 63

method 5: vector assign and reduce:
BFS time in seconds:       0.000217
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 5: same but check each result
BFS time in seconds:       0.000081
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 6: apply unary operator
BFS time in seconds:       0.000084
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 6: same but check each result
BFS time in seconds:       0.000071
nodes reachable from node 0: 63 out of 63
max BFS level: 6
ntuples: 123
nrows 31 ncols 32
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000082
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000097

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 31: bool 1
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 37: bool 1
    column 56: bool 1
row: 1 : 5 entries [6:10]
    column 31: bool 1
    column 32: bool 1
    column 39: bool 1
    column 51: bool 1
    column 58: bool 1
row: 2 : 6 entries [11:16]
    column 32: bool 1
    column 33: bool 1
    column 36: bool 1
    column 38: bool 1
    column 39: bool 1
    column 59: bool 1
row: 3 : 4 entries [17:20]
    column 33: bool 1
    column 34: bool 1
    column 35: bool 1
    column 42: bool 1
row: 4 : 4 entries [21:24]
    column 33: bool 1
    column 35: bool 1
    column 53: bool 1
    column 57: bool 1
row: 5 : 3 entries [25:27]
    column 31: bool 1
    column 36: bool 1
    column 46: bool 1
row: 6 : 5 entries [28:32]
    column 33: bool 1
    column 37: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 7 entries [38:44]
    ...
row: 9 : 7 entries [45:51]
    ...
...
matrix 63 by 63, 246 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 63 ncols: 63 max # entries: 246
format: standard CSR vlen: 63 nvec_nonempty: 63 nvec: 63 plen: 63 vdim: 63
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 246 
row: 0 : 6 entries [0:5]
    column 31: bool 1
    column 32: bool 1
    column 33: bool 1
    column 34: bool 1
    column 37: bool 1
    column 56: bool 1
row: 1 : 5 entries [6:10]
    column 31: bool 1
    column 32: bool 1
    column 39: bool 1
    column 51: bool 1
    column 58: bool 1
row: 2 : 6 entries [11:16]
    column 32: bool 1
    column 33: bool 1
    column 36: bool 1
    column 38: bool 1
    column 39: bool 1
    column 59: bool 1
row: 3 : 4 entries [17:20]
    column 33: bool 1
    column 34: bool 1
    column 35: bool 1
    column 42: bool 1
row: 4 : 4 entries [21:24]
    column 33: bool 1
    column 35: bool 1
    column 53: bool 1
    column 57: bool 1
row: 5 : 3 entries [25:27]
    column 31: bool 1
    column 36: bool 1
    column 46: bool 1
row: 6 : 5 entries [28:32]
    column 33: bool 1
    column 37: bool 1
    ...
row: 7 : 5 entries [33:37]
    ...
row: 8 : 7 entries [38:44]
    ...
row: 9 : 7 entries [45:51]
    ...
...
number of nodes: 63

method 5: vector assign and reduce:
BFS time in seconds:       0.000221
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 5: same but check each result
BFS time in seconds:       0.000076
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 6: apply unary operator
BFS time in seconds:       0.000077
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 6: same but check each result
BFS time in seconds:       0.000061
nodes reachable from node 0: 63 out of 63
max BFS level: 6
ntuples: 102
nrows 27 ncols 51
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000073
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000093

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 78 ncols: 78 max # entries: 204
format: standard CSR vlen: 78 nvec_nonempty: 78 nvec: 78 plen: 78 vdim: 78
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 204 
row: 0 : 3 entries [0:2]
    column 46: bool 1
    column 47: bool 1
    column 48: bool 1
row: 1 : 2 entries [3:4]
    column 46: bool 1
    column 49: bool 1
row: 2 : 2 entries [5:6]
    column 27: bool 1
    column 46: bool 1
row: 3 : 3 entries [7:9]
    column 28: bool 1
    column 47: bool 1
    column 58: bool 1
row: 4 : 6 entries [10:15]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 58: bool 1
    column 59: bool 1
row: 5 : 5 entries [16:20]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 60: bool 1
row: 6 : 3 entries [21:23]
    column 29: bool 1
    column 50: bool 1
    column 54: bool 1
row: 7 : 3 entries [24:26]
    column 30: bool 1
    column 51: bool 1
    column 55: bool 1
row: 8 : 3 entries [27:29]
    column 31: bool 1
    column 52: bool 1
    column 56: bool 1
row: 9 : 3 entries [30:32]
    ...
...
matrix 78 by 78, 204 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 78 ncols: 78 max # entries: 204
format: standard CSR vlen: 78 nvec_nonempty: 78 nvec: 78 plen: 78 vdim: 78
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 204 
row: 0 : 3 entries [0:2]
    column 46: bool 1
    column 47: bool 1
    column 48: bool 1
row: 1 : 2 entries [3:4]
    column 46: bool 1
    column 49: bool 1
row: 2 : 2 entries [5:6]
    column 27: bool 1
    column 46: bool 1
row: 3 : 3 entries [7:9]
    column 28: bool 1
    column 47: bool 1
    column 58: bool 1
row: 4 : 6 entries [10:15]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 58: bool 1
    column 59: bool 1
row: 5 : 5 entries [16:20]
    column 50: bool 1
    column 51: bool 1
    column 52: bool 1
    column 53: bool 1
    column 60: bool 1
row: 6 : 3 entries [21:23]
    column 29: bool 1
    column 50: bool 1
    column 54: bool 1
row: 7 : 3 entries [24:26]
    column 30: bool 1
    column 51: bool 1
    column 55: bool 1
row: 8 : 3 entries [27:29]
    column 31: bool 1
    column 52: bool 1
    column 56: bool 1
row: 9 : 3 entries [30:32]
    ...
...
number of nodes: 78

method 5: vector assign and reduce:
BFS time in seconds:       0.000260
nodes reachable from node 0: 78 out of 78
max BFS level: 10

method 5: same but check each result
BFS time in seconds:       0.000128
nodes reachable from node 0: 78 out of 78
max BFS level: 10

method 6: apply unary operator
BFS time in seconds:       0.000124
nodes reachable from node 0: 78 out of 78
max BFS level: 10

method 6: same but check each result
BFS time in seconds:       0.000110
nodes reachable from node 0: 78 out of 78
max BFS level: 10
ntuples: 49920
nrows 492 ncols 490
time to prune self-edges:     0.000008
time to build the graph with GrB_Matrix_build:     0.006732
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.010546

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 982 ncols: 982 max # entries: 99840
format: standard CSR vlen: 982 nvec_nonempty: 933 nvec: 982 plen: 982 vdim: 982
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 99840 
row: 0 : 40 entries [0:39]
    column 494: bool 1
    column 496: bool 1
    column 497: bool 1
    column 498: bool 1
    column 500: bool 1
    column 501: bool 1
    column 503: bool 1
    column 506: bool 1
    column 510: bool 1
    column 574: bool 1
    column 575: bool 1
    column 578: bool 1
    column 579: bool 1
    column 580: bool 1
    column 581: bool 1
    column 582: bool 1
    column 583: bool 1
    column 584: bool 1
    column 585: bool 1
    column 587: bool 1
    column 589: bool 1
    column 591: bool 1
    column 592: bool 1
    column 594: bool 1
    column 597: bool 1
    column 600: bool 1
    column 607: bool 1
    column 608: bool 1
    column 614: bool 1
    column 616: bool 1
    ...
row: 1 : 34 entries [40:73]
    ...
row: 2 : 41 entries [74:114]
    ...
row: 3 : 50 entries [115:164]
    ...
row: 4 : 40 entries [165:204]
    ...
row: 5 : 44 entries [205:248]
    ...
row: 6 : 50 entries [249:298]
    ...
row: 7 : 35 entries [299:333]
    ...
row: 8 : 4 entries [334:337]
    ...
row: 9 : 190 entries [338:527]
    ...
...
matrix 982 by 982, 99840 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 982 ncols: 982 max # entries: 99840
format: standard CSR vlen: 982 nvec_nonempty: 933 nvec: 982 plen: 982 vdim: 982
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 99840 
row: 0 : 40 entries [0:39]
    column 494: bool 1
    column 496: bool 1
    column 497: bool 1
    column 498: bool 1
    column 500: bool 1
    column 501: bool 1
    column 503: bool 1
    column 506: bool 1
    column 510: bool 1
    column 574: bool 1
    column 575: bool 1
    column 578: bool 1
    column 579: bool 1
    column 580: bool 1
    column 581: bool 1
    column 582: bool 1
    column 583: bool 1
    column 584: bool 1
    column 585: bool 1
    column 587: bool 1
    column 589: bool 1
    column 591: bool 1
    column 592: bool 1
    column 594: bool 1
    column 597: bool 1
    column 600: bool 1
    column 607: bool 1
    column 608: bool 1
    column 614: bool 1
    column 616: bool 1
    ...
row: 1 : 34 entries [40:73]
    ...
row: 2 : 41 entries [74:114]
    ...
row: 3 : 50 entries [115:164]
    ...
row: 4 : 40 entries [165:204]
    ...
row: 5 : 44 entries [205:248]
    ...
row: 6 : 50 entries [249:298]
    ...
row: 7 : 35 entries [299:333]
    ...
row: 8 : 4 entries [334:337]
    ...
row: 9 : 190 entries [338:527]
    ...
...
number of nodes: 982

method 5: vector assign and reduce:
BFS time in seconds:       0.000664
nodes reachable from node 0: 933 out of 982
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.000686
nodes reachable from node 0: 933 out of 982
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.000549
nodes reachable from node 0: 933 out of 982
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.000341
nodes reachable from node 0: 933 out of 982
max BFS level: 5
ntuples: 299
nrows 67 ncols 67
time to prune self-edges:     0.000007
time to build the graph with GrB_Matrix_build:     0.000095
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000061

Matrix from file:

GraphBLAS matrix: *A_output 
nrows: 67 ncols: 67 max # entries: 576
format: standard CSR vlen: 67 nvec_nonempty: 67 nvec: 67 plen: 67 vdim: 67
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 576 
row: 0 : 12 entries [0:11]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    column 8: bool 1
    column 12: bool 1
    column 17: bool 1
    column 24: bool 1
    column 25: bool 1
    column 26: bool 1
    column 27: bool 1
    column 28: bool 1
row: 1 : 7 entries [12:18]
    column 4: bool 1
    column 8: bool 1
    column 13: bool 1
    column 17: bool 1
    column 20: bool 1
    column 24: bool 1
    column 60: bool 1
row: 2 : 7 entries [19:25]
    column 5: bool 1
    column 9: bool 1
    column 14: bool 1
    column 17: bool 1
    column 21: bool 1
    column 25: bool 1
    column 60: bool 1
row: 3 : 7 entries [26:32]
    column 6: bool 1
    column 10: bool 1
    column 15: bool 1
    column 17: bool 1
    ...
row: 4 : 8 entries [33:40]
    ...
row: 5 : 7 entries [41:47]
    ...
row: 6 : 9 entries [48:56]
    ...
row: 7 : 6 entries [57:62]
    ...
row: 8 : 7 entries [63:69]
    ...
row: 9 : 9 entries [70:78]
    ...
...
matrix 67 by 67, 576 entries, from stdin

GraphBLAS matrix: from get_matrix: 
nrows: 67 ncols: 67 max # entries: 576
format: standard CSR vlen: 67 nvec_nonempty: 67 nvec: 67 plen: 67 vdim: 67
hyper_ratio 0.0625
GraphBLAS type:  bool size: 1
number of entries: 576 
row: 0 : 12 entries [0:11]
    column 4: bool 1
    column 5: bool 1
    column 6: bool 1
    column 7: bool 1
    column 8: bool 1
    column 12: bool 1
    column 17: bool 1
    column 24: bool 1
    column 25: bool 1
    column 26: bool 1
    column 27: bool 1
    column 28: bool 1
row: 1 : 7 entries [12:18]
    column 4: bool 1
    column 8: bool 1
    column 13: bool 1
    column 17: bool 1
    column 20: bool 1
    column 24: bool 1
    column 60: bool 1
row: 2 : 7 entries [19:25]
    column 5: bool 1
    column 9: bool 1
    column 14: bool 1
    column 17: bool 1
    column 21: bool 1
    column 25: bool 1
    column 60: bool 1
row: 3 : 7 entries [26:32]
    column 6: bool 1
    column 10: bool 1
    column 15: bool 1
    column 17: bool 1
    ...
row: 4 : 8 entries [33:40]
    ...
row: 5 : 7 entries [41:47]
    ...
row: 6 : 9 entries [48:56]
    ...
row: 7 : 6 entries [57:62]
    ...
row: 8 : 7 entries [63:69]
    ...
row: 9 : 9 entries [70:78]
    ...
...
number of nodes: 67

method 5: vector assign and reduce:
BFS time in seconds:       0.000236
nodes reachable from node 0: 67 out of 67
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.000080
nodes reachable from node 0: 67 out of 67
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.000084
nodes reachable from node 0: 67 out of 67
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.000067
nodes reachable from node 0: 67 out of 67
max BFS level: 5
Wathen: nx 200 ny 200 n 120801 nz 1883201 method 0, time: 0.350 sec

GraphBLAS matrix: from get_matrix: 
nrows: 120801 ncols: 120801 max # entries: 1883201
format: standard CSR vlen: 120801 nvec_nonempty: 120801 nvec: 120801 plen: 120801 vdim: 120801
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 1883201 
row: 0 : 8 entries [0:7]
    column 0: double 6.85160883409121
    column 1: double -6.85160883409121
    column 2: double 2.28386961136374
    column 401: double -6.85160883409121
    column 402: double -9.13547844545495
    column 602: double 2.28386961136374
    column 603: double -9.13547844545495
    column 604: double 3.42580441704561
row: 1 : 8 entries [8:15]
    column 0: double -6.85160883409121
    column 1: double 36.5419137818198
    column 2: double -6.85160883409121
    column 401: double 22.8386961136374
    column 402: double 22.8386961136374
    column 602: double -9.13547844545495
    column 603: double 18.2709568909099
    column 604: double -9.13547844545495
row: 2 : 13 entries [16:28]
    column 0: double 2.28386961136374
    column 1: double -6.85160883409121
    column 2: double 9.19461653492844
    column 3: double -2.34300770083722
    column 4: double 0.781002566945742
    column 401: double -9.13547844545495
    column 402: double -9.19461653492844
    column 403: double -3.12401026778297
    column 602: double 3.42580441704561
    column 603: double -9.13547844545495
    column 604: double 3.06487217830948
    column 605: double -3.12401026778297
    column 606: double 1.17150385041861
row: 3 : 8 entries [29:36]
    column 2: double -2.34300770083722
    ...
row: 4 : 13 entries [37:49]
    ...
row: 5 : 8 entries [50:57]
    ...
row: 6 : 13 entries [58:70]
    ...
row: 7 : 8 entries [71:78]
    ...
row: 8 : 13 entries [79:91]
    ...
row: 9 : 8 entries [92:99]
    ...
...
number of nodes: 120801

method 5: vector assign and reduce:
BFS time in seconds:       0.183739
nodes reachable from node 0: 120801 out of 120801
max BFS level: 201

method 5: same but check each result
BFS time in seconds:       0.173148
nodes reachable from node 0: 120801 out of 120801
max BFS level: 201

method 6: apply unary operator
BFS time in seconds:       0.091465
nodes reachable from node 0: 120801 out of 120801
max BFS level: 201

method 6: same but check each result
BFS time in seconds:       0.100147
nodes reachable from node 0: 120801 out of 120801
max BFS level: 201
random 10000 by 10000, nz: 199764, method 0 time 0.052 sec

GraphBLAS matrix: from get_matrix: 
nrows: 10000 ncols: 10000 max # entries: 199764
format: standard CSR vlen: 10000 nvec_nonempty: 10000 nvec: 10000 plen: 10000 vdim: 10000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 199764 
row: 0 : 18 entries [0:17]
    column 992: double 0.0477919858394116
    column 3179: double 0.847682119205298
    column 3444: double 0.289895321512497
    column 4048: double 0.431196020386364
    column 4570: double 0.832789086581011
    column 5035: double 0.826960051271096
    column 5038: double 0.570909756767479
    column 5333: double 0.168675801873836
    column 5375: double 0.639332255012665
    column 5574: double 0.634235663930174
    column 5752: double 0.120731223487045
    column 5851: double 0.789696951200903
    column 7709: double 0.793450727866451
    column 8083: double 0.441206091494491
    column 8587: double 0.475936155278176
    column 8797: double 0.390728476821192
    column 9514: double 0.0571916867580187
    column 9602: double 0.400341807306131
row: 1 : 22 entries [18:39]
    column 145: double 0.451185644093142
    column 1047: double 0.184179204687643
    column 1453: double 0.467757194738609
    column 1637: double 0.466139713736381
    column 1773: double 0.621509445478683
    column 2483: double 0.508651997436445
    column 2664: double 0.899288918729209
    column 2871: double 0.767632068849757
    column 3727: double 0.0164799951170385
    column 4055: double 0.75838496047853
    column 4407: double 0.760765404217658
    column 4620: double 0.278450880458998
    ...
row: 2 : 27 entries [40:66]
    ...
row: 3 : 12 entries [67:78]
    ...
row: 4 : 19 entries [79:97]
    ...
row: 5 : 30 entries [98:127]
    ...
row: 6 : 10 entries [128:137]
    ...
row: 7 : 21 entries [138:158]
    ...
row: 8 : 20 entries [159:178]
    ...
row: 9 : 21 entries [179:199]
    ...
...
number of nodes: 10000

method 5: vector assign and reduce:
BFS time in seconds:       0.006903
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.004774
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.003783
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.003771
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5
random 10000 by 10000, nz: 199764, method 1 time 0.041 sec

GraphBLAS matrix: from get_matrix: 
nrows: 10000 ncols: 10000 max # entries: 199764
format: standard CSR vlen: 10000 nvec_nonempty: 10000 nvec: 10000 plen: 10000 vdim: 10000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 199764 
row: 0 : 18 entries [0:17]
    column 992: double 0.0477919858394116
    column 3179: double 0.847682119205298
    column 3444: double 0.289895321512497
    column 4048: double 0.431196020386364
    column 4570: double 0.832789086581011
    column 5035: double 0.826960051271096
    column 5038: double 0.570909756767479
    column 5333: double 0.168675801873836
    column 5375: double 0.639332255012665
    column 5574: double 0.634235663930174
    column 5752: double 0.120731223487045
    column 5851: double 0.789696951200903
    column 7709: double 0.793450727866451
    column 8083: double 0.441206091494491
    column 8587: double 0.475936155278176
    column 8797: double 0.390728476821192
    column 9514: double 0.0571916867580187
    column 9602: double 0.400341807306131
row: 1 : 22 entries [18:39]
    column 145: double 0.451185644093142
    column 1047: double 0.184179204687643
    column 1453: double 0.467757194738609
    column 1637: double 0.466139713736381
    column 1773: double 0.621509445478683
    column 2483: double 0.508651997436445
    column 2664: double 0.899288918729209
    column 2871: double 0.767632068849757
    column 3727: double 0.0164799951170385
    column 4055: double 0.75838496047853
    column 4407: double 0.760765404217658
    column 4620: double 0.278450880458998
    ...
row: 2 : 27 entries [40:66]
    ...
row: 3 : 12 entries [67:78]
    ...
row: 4 : 19 entries [79:97]
    ...
row: 5 : 30 entries [98:127]
    ...
row: 6 : 10 entries [128:137]
    ...
row: 7 : 21 entries [138:158]
    ...
row: 8 : 20 entries [159:178]
    ...
row: 9 : 21 entries [179:199]
    ...
...
number of nodes: 10000

method 5: vector assign and reduce:
BFS time in seconds:       0.005547
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.004008
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.002773
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.003176
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5
random 100000 by 100000, nz: 19980358, method 0 time 5.746 sec

GraphBLAS matrix: from get_matrix: 
nrows: 100000 ncols: 100000 max # entries: 19980358
format: standard CSR vlen: 100000 nvec_nonempty: 100000 nvec: 100000 plen: 100000 vdim: 100000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 19980358 
row: 0 : 210 entries [0:209]
    column 68: double 0.890102847376934
    column 266: double 0.880367442854091
    column 1086: double 0.0749534592730491
    column 1639: double 0.89684743797113
    column 1744: double 0.174565874202704
    column 1801: double 0.0485244300668355
    column 2426: double 0.82815027314066
    column 2851: double 0.797021393475143
    column 3535: double 0.0736106448561052
    column 3756: double 0.0606402783288064
    column 4303: double 0.52607806634724
    column 4392: double 0.517319254127628
    column 4441: double 0.982207708975494
    column 6022: double 0.464827417828913
    column 7079: double 0.401226844080935
    column 8567: double 0.889187292092654
    column 8652: double 0.859492782372509
    column 8797: double 0.390728476821192
    column 9221: double 0.459486678670614
    column 9524: double 0.46104312265389
    column 9924: double 0.935819574571978
    column 9962: double 0.951872310556352
    column 10357: double 0.307657094027528
    column 10970: double 0.0696432386242256
    column 11015: double 0.779412213507492
    column 11301: double 0.926328318124943
    column 11313: double 0.189519943845943
    column 11996: double 0.701254310739464
    column 12332: double 0.925534836878567
    column 12390: double 0.84621723075045
    ...
row: 1 : 208 entries [210:417]
    ...
row: 2 : 196 entries [418:613]
    ...
row: 3 : 188 entries [614:801]
    ...
row: 4 : 186 entries [802:987]
    ...
row: 5 : 188 entries [988:1175]
    ...
row: 6 : 191 entries [1176:1366]
    ...
row: 7 : 184 entries [1367:1550]
    ...
row: 8 : 215 entries [1551:1765]
    ...
row: 9 : 215 entries [1766:1980]
    ...
...
number of nodes: 100000

method 5: vector assign and reduce:
BFS time in seconds:       0.160386
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 5: same but check each result
BFS time in seconds:       0.163816
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 6: apply unary operator
BFS time in seconds:       0.154207
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 6: same but check each result
BFS time in seconds:       0.154330
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4
random 100000 by 100000, nz: 19980358, method 1 time 4.788 sec

GraphBLAS matrix: from get_matrix: 
nrows: 100000 ncols: 100000 max # entries: 19980358
format: standard CSR vlen: 100000 nvec_nonempty: 100000 nvec: 100000 plen: 100000 vdim: 100000
hyper_ratio 0.0625
GraphBLAS type:  double size: 8
number of entries: 19980358 
row: 0 : 210 entries [0:209]
    column 68: double 0.890102847376934
    column 266: double 0.880367442854091
    column 1086: double 0.0749534592730491
    column 1639: double 0.89684743797113
    column 1744: double 0.174565874202704
    column 1801: double 0.0485244300668355
    column 2426: double 0.82815027314066
    column 2851: double 0.797021393475143
    column 3535: double 0.0736106448561052
    column 3756: double 0.0606402783288064
    column 4303: double 0.52607806634724
    column 4392: double 0.517319254127628
    column 4441: double 0.982207708975494
    column 6022: double 0.464827417828913
    column 7079: double 0.401226844080935
    column 8567: double 0.889187292092654
    column 8652: double 0.859492782372509
    column 8797: double 0.390728476821192
    column 9221: double 0.459486678670614
    column 9524: double 0.46104312265389
    column 9924: double 0.935819574571978
    column 9962: double 0.951872310556352
    column 10357: double 0.307657094027528
    column 10970: double 0.0696432386242256
    column 11015: double 0.779412213507492
    column 11301: double 0.926328318124943
    column 11313: double 0.189519943845943
    column 11996: double 0.701254310739464
    column 12332: double 0.925534836878567
    column 12390: double 0.84621723075045
    ...
row: 1 : 208 entries [210:417]
    ...
row: 2 : 196 entries [418:613]
    ...
row: 3 : 188 entries [614:801]
    ...
row: 4 : 186 entries [802:987]
    ...
row: 5 : 188 entries [988:1175]
    ...
row: 6 : 191 entries [1176:1366]
    ...
row: 7 : 184 entries [1367:1550]
    ...
row: 8 : 215 entries [1551:1765]
    ...
row: 9 : 215 entries [1766:1980]
    ...
...
number of nodes: 100000

method 5: vector assign and reduce:
BFS time in seconds:       0.156464
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 5: same but check each result
BFS time in seconds:       0.163767
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 6: apply unary operator
BFS time in seconds:       0.167937
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 6: same but check each result
BFS time in seconds:       0.153621
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4
