.TH FPTHRD_CONDATTR 3F "" "FPTHRD API"

.SH NAME
fpthrd_condattr_init, fpthrd_condattr_destroy, fpthrd_condattr_setpshared, fpthrd_condattr_getpshared \- Condition variable creation attributes

.SH SYNOPSIS
.B USE fpthrd
 
.BI "CALL fpthrd_condattr_init(" attr " [, " ierr "])"

.BI "CALL fpthrd_condattr_destroy(" attr " [, " ierr "])"

.BI "CALL fpthrd_condattr_setpshared(" attr ", " pshared " [, " 
.IB ierr "])"

.BI "CALL fpthrd_condattr_getpshared(" attr ", " pshared " [, " 
.IB ierr "])"

.BI "TYPE(FPTHRD_CONDATTR_T) :: " attr
.br
.BI "INTEGER :: " pshared ", " ierr


.SH DESCRIPTION

Condition variable attributes can be specified at condition variable 
initialization time, by passing a
condition attribute object as the second argument to 
.BR "fpthrd_cond_init" (3F).
(Passing 
.B "NULL"
as the second parameter to 
.B "fpthrd_cond_init"
is equivalent to passing a condition attribute object with
all attributes set to their default values.)

.SS "Initialize and Destroy"
.B "fpthrd_condattr_init"
initializes the condition attribute object
.IR "attr" ,
and fills it with default values for the attributes.
.B "fpthrd_condattr_destroy"
uninitializes a condition attribute object,
which must not be reused until it is reinitialized. 

.SS "Set and Get"

Sharing of condition variables between processes is optionally
supported by the POSIX standard.  If your system supports
cross-process synchronization, then the following routines will be
available.

.B "fpthrd_condattr_setpshared"
sets the shared attribute
.IR "attr " to " pshared"
which is either 
.B "FPTHRD_PROCESS_SHARED"
(any condition variable initialized with this attribute may be used
from different processes) or 
.B "FPTHRD_PROCESS_PRIVATE"
(only threads in the same process can use it).
The shared condition variable must be visible to both processes and
initialized to be cross-process by only one of these processes.

.B "fpthrd_condattr_getpshared"
retrieves the process sharing parameter for the condition variable
attribute
.I "attr"
and returns it in 
.IR "pshared" .

.SH NOTES
While POSIX specifies two modes of sharing condition variables between
processes, currently only process-private 
.RB "(" "FPTHRD_PROCESS_PRIVATE" ")"
is supported.  Attempting to initialize process-shared condition
variables will yield undefined results.

.SH "DIAGNOSTICS"
All routines return 0 in the optional
.I "ierr"
on success and a non-zero error code on error.

On error,
.B "fpthrd_condattr_init"
returns the following error codes:
.RS
.TP
.B "ENOMEM"
Insufficient memory.
.TP
.B "EAGAIN"
Insufficient resources.
.RE

On error,
.B "fpthrd_condattr_destroy"
returns the following error code:
.RS
.TP
.B "EINVAL"
.I "attr"
is invalid.
.RE

On error,
.B "fpthrd_condattr_setpshared"
returns the following error codes:
.RS
.TP
.B "EINVAL"
Either 
.IR "attr " or " pshared"
is invalid
.TP
.B "ENOSYS"
Shared memory condition variables are not supported.
.RE

On error,
.B "fpthrd_condattr_getpshared"
returns the following error code:
.RS
.TP
.B "ENOSYS"
Shared memory condition variables are not supported.
.RE

.SH "SEE ALSO"
.BR "fpthrd_cond_init" (3F).
