!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	xgemmt.c	/^datatype *A[2], *B[2], *C[2], *Ctmp;$/;"	v
A	xgetrf.c	/^datatype *A[2];$/;"	v
A	xhegst.c	/^datatype *A[2], *B[2];$/;"	v
A	xhetrf.c	/^datatype *A[2], *Work;$/;"	v
A	xlauum.c	/^datatype *A[2];$/;"	v
A	xpbtrf.c	/^datatype *A[2];$/;"	v
A	xpotrf.c	/^datatype *A[2];$/;"	v
A	xsygst.c	/^datatype *A[2], *B[2];$/;"	v
A	xsytrf.c	/^datatype *A[2], *Work;$/;"	v
A	xtgsyl.c	/^datatype *A[2], *B[2], *C[2], *D[2], *E[2], *F[2], *Work, scale[2], dif[2];$/;"	v
A	xtrsyl.c	/^datatype *A[2], *B[2], *C[2], *Work, scale[2];$/;"	v
A	xtrtri.c	/^datatype *A[2];$/;"	v
B	xgemmt.c	/^datatype *A[2], *B[2], *C[2], *Ctmp;$/;"	v
B	xhegst.c	/^datatype *A[2], *B[2];$/;"	v
B	xsygst.c	/^datatype *A[2], *B[2];$/;"	v
B	xtgsyl.c	/^datatype *A[2], *B[2], *C[2], *D[2], *E[2], *F[2], *Work, scale[2], dif[2];$/;"	v
B	xtrsyl.c	/^datatype *A[2], *B[2], *C[2], *Work, scale[2];$/;"	v
BLAS	test.h	/^#define BLAS(/;"	d
C	xgemmt.c	/^datatype *A[2], *B[2], *C[2], *Ctmp;$/;"	v
C	xtgsyl.c	/^datatype *A[2], *B[2], *C[2], *D[2], *E[2], *F[2], *Work, scale[2], dif[2];$/;"	v
C	xtrsyl.c	/^datatype *A[2], *B[2], *C[2], *Work, scale[2];$/;"	v
CAT	test.h	/^#define CAT(/;"	d
Ctmp	xgemmt.c	/^datatype *A[2], *B[2], *C[2], *Ctmp;$/;"	v
D	xtgsyl.c	/^datatype *A[2], *B[2], *C[2], *D[2], *E[2], *F[2], *Work, scale[2], dif[2];$/;"	v
DOUBLE_ERR_BOUND	config.h	/^#define DOUBLE_ERR_BOUND /;"	d
E	xtgsyl.c	/^datatype *A[2], *B[2], *C[2], *D[2], *E[2], *F[2], *Work, scale[2], dif[2];$/;"	v
ERR_BOUND	test.h	/^#define ERR_BOUND /;"	d
F	xtgsyl.c	/^datatype *A[2], *B[2], *C[2], *D[2], *E[2], *F[2], *Work, scale[2], dif[2];$/;"	v
LAPACK	test.h	/^#define LAPACK(/;"	d
LAPACK_H2	lapack.h	/^#define LAPACK_H2$/;"	d
MAX	util.c	/^#define MAX(/;"	d	file:
MIN	util.c	/^#define MIN(/;"	d	file:
MONE	test.h	/^#define MONE /;"	d
ONE	test.h	/^#define ONE /;"	d
POST	test.h	/^#define POST /;"	d
PRE	test.h	/^#define PRE /;"	d
ROUTINE	xgemmt.c	/^#define ROUTINE /;"	d	file:
ROUTINE	xgemmt.c	/^void XLAPACK(ROUTINE)($/;"	f
ROUTINE	xgetrf.c	/^    #define ROUTINE /;"	d	file:
ROUTINE	xhegst.c	/^    #define ROUTINE /;"	d	file:
ROUTINE	xhetrf.c	/^    #define ROUTINE /;"	d	file:
ROUTINE	xhetrf.c	/^    #undef ROUTINE$/;"	d	file:
ROUTINE	xlauum.c	/^    #define ROUTINE /;"	d	file:
ROUTINE	xpbtrf.c	/^    #define ROUTINE /;"	d	file:
ROUTINE	xpotrf.c	/^    #define ROUTINE /;"	d	file:
ROUTINE	xsygst.c	/^    #define ROUTINE /;"	d	file:
ROUTINE	xsytrf.c	/^    #define ROUTINE /;"	d	file:
ROUTINE	xsytrf.c	/^    #undef ROUTINE$/;"	d	file:
ROUTINE	xtgsyl.c	/^    #define ROUTINE /;"	d	file:
ROUTINE	xtrsyl.c	/^    #define ROUTINE /;"	d	file:
ROUTINE	xtrtri.c	/^    #define ROUTINE /;"	d	file:
SINGLE_ERR_BOUND	config.h	/^#define SINGLE_ERR_BOUND /;"	d
STR	test.h	/^#define STR(/;"	d
TEST	test.h	/^#define TEST(/;"	d
TEST_CONFIG_H	config.h	/^#define TEST_CONFIG_H$/;"	d
TEST_H	test.h	/^#define TEST_H$/;"	d
TEST_SIZE	config.h	/^#define TEST_SIZE /;"	d
TEST_UTIL_H	util.h	/^#define TEST_UTIL_H$/;"	d
Work	xhetrf.c	/^datatype *A[2], *Work;$/;"	v
Work	xsytrf.c	/^datatype *A[2], *Work;$/;"	v
Work	xtgsyl.c	/^datatype *A[2], *B[2], *C[2], *D[2], *E[2], *F[2], *Work, scale[2], dif[2];$/;"	v
Work	xtrsyl.c	/^datatype *A[2], *B[2], *C[2], *Work, scale[2];$/;"	v
XCAT	test.h	/^#define XCAT(/;"	d
XLAPACK	test.h	/^#define XLAPACK(/;"	d
XPREF	test.h	/^#define XPREF(/;"	d
XRELAPACK	test.h	/^#define XRELAPACK(/;"	d
XSTR	test.h	/^#define XSTR(/;"	d
ZERO	test.h	/^#define ZERO /;"	d
c2matgen	util.c	/^void c2matgen(const int m, const int n, float *A, float *B) {$/;"	f
c2vecerr	util.c	/^double c2vecerr(const int n, const float *x, const float *y) {$/;"	f
cCTRANS	test.h	/^#define cCTRANS /;"	d
cDT_MULT	test.h	/^#define cDT_MULT /;"	d
cERR_BOUND_	test.h	/^#define cERR_BOUND_ /;"	d
cMONE	test.h	/^const float  cMONE[] = { -1., 0. };$/;"	v
cONE	test.h	/^const float  cONE[]  = { 1., 0. };$/;"	v
cZERO	test.h	/^const float  cZERO[] = { 0., 0. };$/;"	v
cdatatype_	test.h	/^#define cdatatype_ /;"	d
cmalloc	test.h	/^#define cmalloc(/;"	d
d2matgen	util.c	/^void d2matgen(const int m, const int n, double *A, double *B) {$/;"	f
d2vecerr	util.c	/^double d2vecerr(const int n, const double *x, const double *y) {$/;"	f
dCTRANS	test.h	/^#define dCTRANS /;"	d
dDT_MULT	test.h	/^#define dDT_MULT /;"	d
dERR_BOUND_	test.h	/^#define dERR_BOUND_ /;"	d
dMONE	test.h	/^const double dMONE[] = { -1. };$/;"	v
dONE	test.h	/^const double dONE[]  = { 1. };$/;"	v
dZERO	test.h	/^const double dZERO[] = { 0. };$/;"	v
datatype	test.h	/^#define datatype /;"	d
ddatatype_	test.h	/^#define ddatatype_ /;"	d
dif	xtgsyl.c	/^datatype *A[2], *B[2], *C[2], *D[2], *E[2], *F[2], *Work, scale[2], dif[2];$/;"	v
dmalloc	test.h	/^#define dmalloc(/;"	d
error	test.h	/^double error;$/;"	v
fail	test.h	/^int i, n, n2, fail;$/;"	v
i	test.h	/^int i, n, n2, fail;$/;"	v
i2vecerr	util.c	/^double i2vecerr(const int n, const int *x, const int *y) {$/;"	f
iFOUR	test.h	/^const int iFOUR[]  = { 4 };$/;"	v
iMONE	test.h	/^const int iMONE[]  = { -1 };$/;"	v
iONE	test.h	/^const int iONE[]   = { 1 };$/;"	v
iTHREE	test.h	/^const int iTHREE[] = { 3 };$/;"	v
iTWO	test.h	/^const int iTWO[]   = { 2 };$/;"	v
iWork	xtgsyl.c	/^int *iWork, lWork, info;$/;"	v
iZERO	test.h	/^const int iZERO[]  = { 0 };$/;"	v
imalloc	test.h	/^#define imalloc(/;"	d
info	xgemmt.c	/^int info;$/;"	v
info	xgetrf.c	/^int *ipiv[2], info;$/;"	v
info	xhegst.c	/^int info;$/;"	v
info	xhetrf.c	/^int *ipiv[2], info;$/;"	v
info	xlauum.c	/^int info;$/;"	v
info	xpbtrf.c	/^int info;$/;"	v
info	xpotrf.c	/^int info;$/;"	v
info	xsygst.c	/^int info;$/;"	v
info	xsytrf.c	/^int *ipiv[2], info;$/;"	v
info	xtgsyl.c	/^int *iWork, lWork, info;$/;"	v
info	xtrsyl.c	/^int info;$/;"	v
info	xtrtri.c	/^int info;$/;"	v
ipiv	xgetrf.c	/^int *ipiv[2], info;$/;"	v
ipiv	xhetrf.c	/^int *ipiv[2], info;$/;"	v
ipiv	xsytrf.c	/^int *ipiv[2], info;$/;"	v
lWork	xtgsyl.c	/^int *iWork, lWork, info;$/;"	v
main	test.h	/^int main(int argc, char* argv[]) {$/;"	f
n	test.h	/^int i, n, n2, fail;$/;"	v
n2	test.h	/^int i, n, n2, fail;$/;"	v
post	xgemmt.c	/^void post() {$/;"	f
post	xgetrf.c	/^void post() {$/;"	f
post	xhegst.c	/^void post() {$/;"	f
post	xhetrf.c	/^void post() {$/;"	f
post	xlauum.c	/^void post() {$/;"	f
post	xpbtrf.c	/^void post() {$/;"	f
post	xpotrf.c	/^void post() {$/;"	f
post	xsygst.c	/^void post() {$/;"	f
post	xsytrf.c	/^void post() {$/;"	f
post	xtgsyl.c	/^void post() {$/;"	f
post	xtrsyl.c	/^void post() {$/;"	f
post	xtrtri.c	/^void post() {$/;"	f
pre	xgemmt.c	/^void pre() {$/;"	f
pre	xgetrf.c	/^void pre() {$/;"	f
pre	xhegst.c	/^void pre() {$/;"	f
pre	xhetrf.c	/^void pre() {$/;"	f
pre	xlauum.c	/^void pre() {$/;"	f
pre	xpbtrf.c	/^void pre() {$/;"	f
pre	xpotrf.c	/^void pre() {$/;"	f
pre	xsygst.c	/^void pre() {$/;"	f
pre	xsytrf.c	/^void pre() {$/;"	f
pre	xtgsyl.c	/^void pre() {$/;"	f
pre	xtrsyl.c	/^void pre() {$/;"	f
pre	xtrtri.c	/^void pre() {$/;"	f
s2matgen	util.c	/^void s2matgen(const int m, const int n, float *A, float *B) {$/;"	f
s2vecerr	util.c	/^double s2vecerr(const int n, const float *x, const float *y) {$/;"	f
sCTRANS	test.h	/^#define sCTRANS /;"	d
sDT_MULT	test.h	/^#define sDT_MULT /;"	d
sERR_BOUND_	test.h	/^#define sERR_BOUND_ /;"	d
sMONE	test.h	/^const float  sMONE[] = { -1. };$/;"	v
sONE	test.h	/^const float  sONE[]  = { 1. };$/;"	v
sZERO	test.h	/^const float  sZERO[] = { 0. };$/;"	v
scale	xtgsyl.c	/^datatype *A[2], *B[2], *C[2], *D[2], *E[2], *F[2], *Work, scale[2], dif[2];$/;"	v
scale	xtrsyl.c	/^datatype *A[2], *B[2], *C[2], *Work, scale[2];$/;"	v
sdatatype_	test.h	/^#define sdatatype_ /;"	d
smalloc	test.h	/^#define smalloc(/;"	d
tests	xgemmt.c	/^void tests() {$/;"	f
tests	xgetrf.c	/^void tests() {$/;"	f
tests	xhegst.c	/^void tests() {$/;"	f
tests	xhetrf.c	/^void tests() {$/;"	f
tests	xlauum.c	/^void tests() {$/;"	f
tests	xpbtrf.c	/^void tests() {$/;"	f
tests	xpotrf.c	/^void tests() {$/;"	f
tests	xsygst.c	/^void tests() {$/;"	f
tests	xsytrf.c	/^void tests() {$/;"	f
tests	xtgsyl.c	/^void tests() {$/;"	f
tests	xtrsyl.c	/^void tests() {$/;"	f
tests	xtrtri.c	/^void tests() {$/;"	f
x1	test.h	/^#define x1 /;"	d
x2matgen	test.h	/^#define x2matgen /;"	d
x2vecerr	test.h	/^#define x2vecerr /;"	d
xCTRANS	test.h	/^#define xCTRANS /;"	d
xgemm	xgemmt.c	/^#define xgemm /;"	d	file:
xlacpy	xgemmt.c	/^#define xlacpy /;"	d	file:
xlascl	xtgsyl.c	/^#define xlascl /;"	d	file:
xlascl	xtrsyl.c	/^#define xlascl /;"	d	file:
xmalloc	test.h	/^#define xmalloc /;"	d
xscal	xtgsyl.c	/^#define xscal /;"	d	file:
z2matgen	util.c	/^void z2matgen(const int m, const int n, double *A, double *B) {$/;"	f
z2vecerr	util.c	/^double z2vecerr(const int n, const double *x, const double *y) {$/;"	f
zCTRANS	test.h	/^#define zCTRANS /;"	d
zDT_MULT	test.h	/^#define zDT_MULT /;"	d
zERR_BOUND_	test.h	/^#define zERR_BOUND_ /;"	d
zMONE	test.h	/^const double zMONE[] = { -1., 0. };$/;"	v
zONE	test.h	/^const double zONE[]  = { 1., 0. };$/;"	v
zZERO	test.h	/^const double zZERO[] = { 0., 0. };$/;"	v
zdatatype_	test.h	/^#define zdatatype_ /;"	d
zmalloc	test.h	/^#define zmalloc(/;"	d
