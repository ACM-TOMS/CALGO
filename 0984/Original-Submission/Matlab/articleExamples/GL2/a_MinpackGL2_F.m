% Generated by ADiMat 0.6.0-4975
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2015 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to adimat-users@lists.sc.informatik.tu-darmstadt.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=f
%  - independents=x
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_MinpackGL2_F, rec_MinpackGL2_F,
%  ret_MinpackGL2_F
%

function [a_x nr_f] = a_MinpackGL2_F(x, Prob, a_f)
% MinpackGL2_F: Computes objective for the 2D Ginzburg Landau (GL2) problem
%                  from the MINPACK-2 collection.
% USE:
%               f = MinpackGL2_F(x,Prob)
% where
% x    : vector of length Prob.user.n
% Prob : structure created by MinpackGL2_Prob with components
%    Prob.user.nx=nx;         % no. of gridpoints in x-direction
%    Prob.user.ny=ny;         % no. of gridpoints in y-direction
%    Prob.user.vornum=vornum; % no. of vortices
%    Prob.user.tkappa=tkappa; % Ginzburg-Landau constant
%    Prob.user.hx=hx;         % mesh spacing in x-direction
%    Prob.user.hy=hy;         % mesh spacing in x-direction
%    Prob.user.sqn=sqn;       % sqn=nx*ny
%
% OUTPUT:
%     f: scalar objective function
%
% See also MinpackGL2_Prob, MinpackGL2_FG, , MinpackGL2_Hv, , MinpackGL2_Sp
% AUTHOR: S.A.Forth & K. Lenton
% DATE: 7/01/09
% Copyright 2009-2009: S.A. Forth, Cranfield University 
% REVISIONS:
% DATE  WHO   WHAT
% Original Fortran Header comments follow
%
%      subroutine dgl2fg(nx,ny,x,f,fgrad,task,w,vornum)
%      character*(*) task
%      integer nx, ny, vornum
%      double precision f
%      double precision x(4*nx*ny), fgrad(4*nx*ny), w(4*(nx+1)*(ny+1))
% **********
%
% Subroutine dgl2fg
%
% This subroutine computes the function and gradient of the
% Ginzburg-Landau (2-dimensional) superconductivity problem.
%
% The subroutine statement is
%
%   subroutine dgl2fg(nx,ny,x,f,fgrad,task,w,vornum)
%
% where
%
%   nx is an integer variable.
%     On entry nx is the number of grid points in the first
%        coordinate direction.
%     On exit nx is unchanged.
%
%   ny is an integer variable.
%     On entry ny is the number of grid points in the second
%        coordinate direction.
%     On exit ny is unchanged.
%
%   x is a double precision array of dimension 4*nx*ny.
%     On entry x specifies the vector x if task = 'F', 'G', or 'FG'.
%        Otherwise x need not be specified.
%     On exit x is unchanged if task = 'F', 'G', or 'FG'. Otherwise
%        x is set according to task.
%
%   f is a double precision variable.
%     On entry f need not be specified.
%     On exit f is set to the function evaluated at x if task = 'F'
%        or 'FG'.
%
%   fgrad is a double precision array of dimension 4*nx*ny.
%     On entry fgrad need not be specified.
%     On exit fgrad contains the gradient evaluated at x if
%        task = 'G' or 'FG'.
%
%   task is a character variable.
%     On entry task specifies the action of the subroutine:
%
%        task               action
%        ----               ------
%         'F'     Evaluate the function at x.
%         'G'     Evaluate the gradient at x.
%         'FG'    Evaluate the function and the gradient at x.
%         'XS'    Set x to the standard starting point xs.
%
%     On exit task is unchanged.
%
%   w is a double precision work array of dimension 4*(nx+1)(ny+1).
%
%   vornum is an integer variable.
%     On entry vornum specifies the number of vortices.
%     On exit vornum is unchanged.
%
% MINPACK-2 Project. November 1993.
% Argonne National Laboratory and University of Minnesota.
% Brett M. Averick, Paul L. Plassmann, and Stephen J. Wright.
%
% **********
% if nargin<2
%     error('MINPack:GL2:MinpackGL2_FG:nargin',...
%         'Arguments x and Prob must be supplied')
% end
   n = length(x);
   nx = Prob.user.nx;
   ny = Prob.user.ny;
   tmpba1 = 0;
   if n ~= 4*nx*ny
      tmpba1 = 1;
      error('MINPack:GL2:MinpackGL2_FG:n', 'MINPack:GL2:MinpackGL2_FG:length(x): x not of length 4*nx*ny');
   end
   adimat_push1(tmpba1);
   vornum = Prob.user.vornum;
   tkappa = Prob.user.tkappa;
   hx = Prob.user.hx;
   hy = Prob.user.hy;
   sqn = Prob.user.sqn;
   tmpda1 = nx * ny;
   Z = reshape(x, tmpda1, 4);
   znx = zeros(nx, 1);
   znyp1 = zeros(1, ny + 1);
   tmpca2 = reshape(Z(:, 1), nx, ny);
   tmpca1 = [tmpca2 znx];
   adimat_push1(x);
   x = [tmpca1
         znyp1];
   adimat_push1(tmpca2);
   tmpca2 = reshape(Z(:, 2), nx, ny);
   adimat_push1(tmpca1);
   tmpca1 = [tmpca2 znx];
   y = [tmpca1
         znyp1];
   adimat_push1(tmpca2);
   tmpca2 = reshape(Z(:, 3), nx, ny);
   adimat_push1(tmpca1);
   tmpca1 = [tmpca2 znx];
   vpotx = [tmpca1
         znyp1];
   adimat_push1(tmpca2);
   tmpca2 = reshape(Z(:, 4), nx, ny);
   adimat_push1(tmpca1);
   tmpca1 = [tmpca2 znx];
   vpoty = [tmpca1
         znyp1];
   arg = (2 * pi * vornum * (0 : ny)) / ny;
   tmpda8 = sin(arg);
   tmpda7 = ny + 1;
   tmpca6 = y(1, 1 : tmpda7) .* tmpda8;
   tmpda5 = cos(arg);
   tmpda4 = ny + 1;
   tmpca3 = x(1, 1 : tmpda4) .* tmpda5;
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   tmplia1 = tmpca3 - tmpca6;
   adimat_push_index2(x, tmpda1, 1 : tmpda2);
   x(tmpda1, 1 : tmpda2) = tmplia1;
   adimat_push1(tmpda8);
   tmpda8 = cos(arg);
   adimat_push1(tmpda7);
   tmpda7 = ny + 1;
   adimat_push1(tmpca6);
   tmpca6 = y(1, 1 : tmpda7) .* tmpda8;
   adimat_push1(tmpda5);
   tmpda5 = sin(arg);
   adimat_push1(tmpda4);
   tmpda4 = ny + 1;
   adimat_push1(tmpca3);
   tmpca3 = x(1, 1 : tmpda4) .* tmpda5;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = tmpca3 + tmpca6;
   adimat_push_index2(y, tmpda1, 1 : tmpda2);
   y(tmpda1, 1 : tmpda2) = tmplia1;
   tmpda3 = ny + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = vpotx(1, 1 : tmpda3);
   adimat_push_index2(vpotx, tmpda1, 1 : tmpda2);
   vpotx(tmpda1, 1 : tmpda2) = tmplia1;
   adimat_push1(tmpda7);
   tmpda7 = ny * hy;
   tmpda6 = 2 * pi;
   adimat_push1(tmpda5);
   tmpda5 = tmpda6 * vornum;
   adimat_push1(tmpda4);
   tmpda4 = tmpda5 / tmpda7;
   adimat_push1(tmpda3);
   tmpda3 = ny + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = vpoty(1, 1 : tmpda3) + tmpda4;
   adimat_push_index2(vpoty, tmpda1, 1 : tmpda2);
   vpoty(tmpda1, 1 : tmpda2) = tmplia1;
   adimat_push1(tmpda3);
   tmpda3 = nx + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = x(1 : tmpda3, 1);
   adimat_push_index2(x, 1 : tmpda1, tmpda2);
   x(1 : tmpda1, tmpda2) = tmplia1;
   adimat_push1(tmpda3);
   tmpda3 = nx + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = y(1 : tmpda3, 1);
   adimat_push_index2(y, 1 : tmpda1, tmpda2);
   y(1 : tmpda1, tmpda2) = tmplia1;
   adimat_push1(tmpda3);
   tmpda3 = nx + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = vpotx(1 : tmpda3, 1);
   adimat_push_index2(vpotx, 1 : tmpda1, tmpda2);
   vpotx(1 : tmpda1, tmpda2) = tmplia1;
   adimat_push1(tmpda3);
   tmpda3 = nx + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = vpoty(1 : tmpda3, 1);
   adimat_push_index2(vpoty, 1 : tmpda1, tmpda2);
   vpoty(1 : tmpda1, tmpda2) = tmplia1;
   adimat_push1(tmpca2);
   tmpca2 = y(1 : nx, 1 : ny) .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = x(1 : nx, 1 : ny) .^ 2;
   delsq = tmpca1 + tmpca2;
   tmpca5 = delsq .^ 2;
   tmpca4 = tmpca5 ./ 2;
   adimat_push1(tmpca3);
   tmpca3 = -delsq + tmpca4;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   fcond = tmpca1 / sqn;
   tmpca10 = hx * vpotx(1 : nx, 1 : ny);
   tmpca9 = sin(tmpca10);
   tmpca8 = y(1 : nx, 1 : ny) .* tmpca9;
   tmpca7 = hx * vpotx(1 : nx, 1 : ny);
   adimat_push1(tmpca6);
   tmpca6 = cos(tmpca7);
   adimat_push1(tmpca5);
   tmpca5 = x(1 : nx, 1 : ny) .* tmpca6;
   adimat_push1(tmpda4);
   tmpda4 = nx + 1;
   adimat_push1(tmpca3);
   tmpca3 = x(2 : tmpda4, 1 : ny) - tmpca5 + tmpca8;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   x1a = sum(tmpca1);
   adimat_push1(tmpca10);
   tmpca10 = hx * vpotx(1 : nx, 1 : ny);
   adimat_push1(tmpca9);
   tmpca9 = sin(tmpca10);
   adimat_push1(tmpca8);
   tmpca8 = x(1 : nx, 1 : ny) .* tmpca9;
   adimat_push1(tmpca7);
   tmpca7 = hx * vpotx(1 : nx, 1 : ny);
   adimat_push1(tmpca6);
   tmpca6 = cos(tmpca7);
   adimat_push1(tmpca5);
   tmpca5 = y(1 : nx, 1 : ny) .* tmpca6;
   adimat_push1(tmpda4);
   tmpda4 = nx + 1;
   adimat_push1(tmpca3);
   tmpca3 = y(2 : tmpda4, 1 : ny) - tmpca5 - tmpca8;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   x2a = sum(tmpca1);
   adimat_push1(tmpca10);
   tmpca10 = hy * vpoty(1 : nx, 1 : ny);
   adimat_push1(tmpca9);
   tmpca9 = sin(tmpca10);
   adimat_push1(tmpca8);
   tmpca8 = y(1 : nx, 1 : ny) .* tmpca9;
   adimat_push1(tmpca7);
   tmpca7 = hy * vpoty(1 : nx, 1 : ny);
   adimat_push1(tmpca6);
   tmpca6 = cos(tmpca7);
   adimat_push1(tmpca5);
   tmpca5 = x(1 : nx, 1 : ny) .* tmpca6;
   adimat_push1(tmpda4);
   tmpda4 = ny + 1;
   adimat_push1(tmpca3);
   tmpca3 = x(1 : nx, 2 : tmpda4) - tmpca5 + tmpca8;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   x1b = sum(tmpca1);
   adimat_push1(tmpca10);
   tmpca10 = hy * vpoty(1 : nx, 1 : ny);
   adimat_push1(tmpca9);
   tmpca9 = sin(tmpca10);
   adimat_push1(tmpca8);
   tmpca8 = x(1 : nx, 1 : ny) .* tmpca9;
   adimat_push1(tmpca7);
   tmpca7 = hy * vpoty(1 : nx, 1 : ny);
   adimat_push1(tmpca6);
   tmpca6 = cos(tmpca7);
   adimat_push1(tmpca5);
   tmpca5 = y(1 : nx, 1 : ny) .* tmpca6;
   adimat_push1(tmpda4);
   tmpda4 = ny + 1;
   adimat_push1(tmpca3);
   tmpca3 = y(1 : nx, 2 : tmpda4) - tmpca5 - tmpca8;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   x2b = sum(tmpca1);
   adimat_push1(tmpda7);
   tmpda7 = hy ^ 2;
   adimat_push1(tmpca6);
   tmpca6 = x1b + x2b;
   adimat_push1(tmpca5);
   tmpca5 = tmpca6 / tmpda7;
   adimat_push1(tmpda4);
   tmpda4 = hx ^ 2;
   adimat_push1(tmpca3);
   tmpca3 = x1a + x2a;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 / tmpda4;
   adimat_push1(tmpca1);
   tmpca1 = tmpca2 + tmpca5;
   fkin = tmpca1 / sqn;
   tmpda12 = tkappa ^ 2;
   tmpda11 = ny + 1;
   adimat_push1(tmpca10);
   tmpca10 = vpotx(1 : nx, 2 : tmpda11) - vpotx(1 : nx, 1 : ny);
   adimat_push1(tmpca9);
   tmpca9 = tmpca10 / hy;
   adimat_push1(tmpda8);
   tmpda8 = nx + 1;
   adimat_push1(tmpca7);
   tmpca7 = vpoty(2 : tmpda8, 1 : ny) - vpoty(1 : nx, 1 : ny);
   adimat_push1(tmpca6);
   tmpca6 = tmpca7 / hx;
   adimat_push1(tmpca5);
   tmpca5 = tmpca6 - tmpca9;
   adimat_push1(tmpca4);
   tmpca4 = tmpca5 .^ 2;
   adimat_push1(tmpca3);
   tmpca3 = sum(tmpca4);
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = tmpca2 * tmpda12;
   ffield = tmpca1 / sqn;
   f = fcond + fkin + ffield;
   nr_f = f;
   [a_Z a_y a_vpotx a_vpoty a_delsq a_fcond a_x1a a_x2a a_x1b a_x2b a_fkin a_ffield a_tmpca1 a_tmpca10 a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_tmpca6 a_tmpca7 a_tmpca8 a_tmpca9 a_tmplia1 a_x] = a_zeros(Z, y, vpotx, vpoty, delsq, fcond, x1a, x2a, x1b, x2b, fkin, ffield, tmpca1, tmpca10, tmpca2, tmpca3, tmpca4, tmpca5, tmpca6, tmpca7, tmpca8, tmpca9, tmplia1, x);
   if nargin < 3
      a_f = a_zeros1(f);
   end
   a_fcond = adimat_adjsum(a_fcond, adimat_adjred(fcond, a_f));
   a_fkin = adimat_adjsum(a_fkin, adimat_adjred(fkin, a_f));
   a_ffield = adimat_adjsum(a_ffield, adimat_adjred(ffield, a_f));
   [tmpadjc1] = adimat_a_mrdividel(tmpca1, sqn, a_ffield);
   a_tmpca1 = adimat_adjsum(a_tmpca1, tmpadjc1);
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultl(tmpca2, a_tmpca1, tmpda12));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_tmpca4 = adimat_adjsum(a_tmpca4, a_sum(a_tmpca3, tmpca4));
   a_tmpca3 = a_zeros1(tmpca3);
   tmpca4 = adimat_pop1;
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, 2 .* tmpca5.^1 .* a_tmpca4));
   a_tmpca4 = a_zeros1(tmpca4);
   tmpca5 = adimat_pop1;
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, a_tmpca5));
   a_tmpca9 = adimat_adjsum(a_tmpca9, adimat_adjred(tmpca9, -a_tmpca5));
   a_tmpca5 = a_zeros1(tmpca5);
   [tmpadjc1] = adimat_a_mrdividel(tmpca7, hx, a_tmpca6);
   tmpca6 = adimat_pop1;
   a_tmpca7 = adimat_adjsum(a_tmpca7, tmpadjc1);
   a_tmpca6 = a_zeros1(tmpca6);
   tmpca7 = adimat_pop1;
   a_vpoty(2 : tmpda8, 1 : ny) = adimat_adjsum(a_vpoty(2 : tmpda8, 1 : ny), adimat_adjred(vpoty(2 : tmpda8, 1 : ny), a_tmpca7));
   a_vpoty(1 : nx, 1 : ny) = adimat_adjsum(a_vpoty(1 : nx, 1 : ny), adimat_adjred(vpoty(1 : nx, 1 : ny), -a_tmpca7));
   a_tmpca7 = a_zeros1(tmpca7);
   tmpda8 = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(tmpca10, hy, a_tmpca9);
   tmpca9 = adimat_pop1;
   a_tmpca10 = adimat_adjsum(a_tmpca10, tmpadjc1);
   a_tmpca9 = a_zeros1(tmpca9);
   tmpca10 = adimat_pop1;
   a_vpotx(1 : nx, 2 : tmpda11) = adimat_adjsum(a_vpotx(1 : nx, 2 : tmpda11), adimat_adjred(vpotx(1 : nx, 2 : tmpda11), a_tmpca10));
   a_vpotx(1 : nx, 1 : ny) = adimat_adjsum(a_vpotx(1 : nx, 1 : ny), adimat_adjred(vpotx(1 : nx, 1 : ny), -a_tmpca10));
   a_tmpca10 = a_zeros1(tmpca10);
   [tmpadjc1] = adimat_a_mrdividel(tmpca1, sqn, a_fkin);
   a_tmpca1 = adimat_adjsum(a_tmpca1, tmpadjc1);
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_tmpca1));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   [tmpadjc1] = adimat_a_mrdividel(tmpca3, tmpda4, a_tmpca2);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, tmpadjc1);
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_x1a = adimat_adjsum(a_x1a, adimat_adjred(x1a, a_tmpca3));
   a_x2a = adimat_adjsum(a_x2a, adimat_adjred(x2a, a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   tmpda4 = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(tmpca6, tmpda7, a_tmpca5);
   tmpca5 = adimat_pop1;
   a_tmpca6 = adimat_adjsum(a_tmpca6, tmpadjc1);
   a_tmpca5 = a_zeros1(tmpca5);
   tmpca6 = adimat_pop1;
   a_x1b = adimat_adjsum(a_x1b, adimat_adjred(x1b, a_tmpca6));
   a_x2b = adimat_adjsum(a_x2b, adimat_adjred(x2b, a_tmpca6));
   a_tmpca6 = a_zeros1(tmpca6);
   tmpda7 = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_x2b, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_y(1 : nx, 2 : tmpda4) = adimat_adjsum(a_y(1 : nx, 2 : tmpda4), adimat_adjred(y(1 : nx, 2 : tmpda4), a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, -a_tmpca3));
   a_tmpca8 = adimat_adjsum(a_tmpca8, adimat_adjred(tmpca8, -a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   [tmpda4 tmpca5] = adimat_pop;
   a_y(1 : nx, 1 : ny) = adimat_adjsum(a_y(1 : nx, 1 : ny), adimat_adjred(y(1 : nx, 1 : ny), a_tmpca5 .* tmpca6));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, y(1 : nx, 1 : ny) .* a_tmpca5));
   a_tmpca5 = a_zeros1(tmpca5);
   tmpca6 = adimat_pop1;
   a_tmpca7 = adimat_adjsum(a_tmpca7, -sin(tmpca7) .* a_tmpca6);
   a_tmpca6 = a_zeros1(tmpca6);
   tmpca7 = adimat_pop1;
   a_vpoty(1 : nx, 1 : ny) = adimat_adjsum(a_vpoty(1 : nx, 1 : ny), adimat_adjmultr(vpoty(1 : nx, 1 : ny), hy, a_tmpca7));
   a_tmpca7 = a_zeros1(tmpca7);
   tmpca8 = adimat_pop1;
   a_x(1 : nx, 1 : ny) = adimat_adjsum(a_x(1 : nx, 1 : ny), adimat_adjred(x(1 : nx, 1 : ny), a_tmpca8 .* tmpca9));
   a_tmpca9 = adimat_adjsum(a_tmpca9, adimat_adjred(tmpca9, x(1 : nx, 1 : ny) .* a_tmpca8));
   a_tmpca8 = a_zeros1(tmpca8);
   tmpca9 = adimat_pop1;
   a_tmpca10 = adimat_adjsum(a_tmpca10, cos(tmpca10) .* a_tmpca9);
   a_tmpca9 = a_zeros1(tmpca9);
   tmpca10 = adimat_pop1;
   a_vpoty(1 : nx, 1 : ny) = adimat_adjsum(a_vpoty(1 : nx, 1 : ny), adimat_adjmultr(vpoty(1 : nx, 1 : ny), hy, a_tmpca10));
   a_tmpca10 = a_zeros1(tmpca10);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_x1b, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_x(1 : nx, 2 : tmpda4) = adimat_adjsum(a_x(1 : nx, 2 : tmpda4), adimat_adjred(x(1 : nx, 2 : tmpda4), a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, -a_tmpca3));
   a_tmpca8 = adimat_adjsum(a_tmpca8, adimat_adjred(tmpca8, a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   [tmpda4 tmpca5] = adimat_pop;
   a_x(1 : nx, 1 : ny) = adimat_adjsum(a_x(1 : nx, 1 : ny), adimat_adjred(x(1 : nx, 1 : ny), a_tmpca5 .* tmpca6));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, x(1 : nx, 1 : ny) .* a_tmpca5));
   a_tmpca5 = a_zeros1(tmpca5);
   tmpca6 = adimat_pop1;
   a_tmpca7 = adimat_adjsum(a_tmpca7, -sin(tmpca7) .* a_tmpca6);
   a_tmpca6 = a_zeros1(tmpca6);
   tmpca7 = adimat_pop1;
   a_vpoty(1 : nx, 1 : ny) = adimat_adjsum(a_vpoty(1 : nx, 1 : ny), adimat_adjmultr(vpoty(1 : nx, 1 : ny), hy, a_tmpca7));
   a_tmpca7 = a_zeros1(tmpca7);
   tmpca8 = adimat_pop1;
   a_y(1 : nx, 1 : ny) = adimat_adjsum(a_y(1 : nx, 1 : ny), adimat_adjred(y(1 : nx, 1 : ny), a_tmpca8 .* tmpca9));
   a_tmpca9 = adimat_adjsum(a_tmpca9, adimat_adjred(tmpca9, y(1 : nx, 1 : ny) .* a_tmpca8));
   a_tmpca8 = a_zeros1(tmpca8);
   tmpca9 = adimat_pop1;
   a_tmpca10 = adimat_adjsum(a_tmpca10, cos(tmpca10) .* a_tmpca9);
   a_tmpca9 = a_zeros1(tmpca9);
   tmpca10 = adimat_pop1;
   a_vpoty(1 : nx, 1 : ny) = adimat_adjsum(a_vpoty(1 : nx, 1 : ny), adimat_adjmultr(vpoty(1 : nx, 1 : ny), hy, a_tmpca10));
   a_tmpca10 = a_zeros1(tmpca10);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_x2a, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_y(2 : tmpda4, 1 : ny) = adimat_adjsum(a_y(2 : tmpda4, 1 : ny), adimat_adjred(y(2 : tmpda4, 1 : ny), a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, -a_tmpca3));
   a_tmpca8 = adimat_adjsum(a_tmpca8, adimat_adjred(tmpca8, -a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   [tmpda4 tmpca5] = adimat_pop;
   a_y(1 : nx, 1 : ny) = adimat_adjsum(a_y(1 : nx, 1 : ny), adimat_adjred(y(1 : nx, 1 : ny), a_tmpca5 .* tmpca6));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, y(1 : nx, 1 : ny) .* a_tmpca5));
   a_tmpca5 = a_zeros1(tmpca5);
   tmpca6 = adimat_pop1;
   a_tmpca7 = adimat_adjsum(a_tmpca7, -sin(tmpca7) .* a_tmpca6);
   a_tmpca6 = a_zeros1(tmpca6);
   tmpca7 = adimat_pop1;
   a_vpotx(1 : nx, 1 : ny) = adimat_adjsum(a_vpotx(1 : nx, 1 : ny), adimat_adjmultr(vpotx(1 : nx, 1 : ny), hx, a_tmpca7));
   a_tmpca7 = a_zeros1(tmpca7);
   tmpca8 = adimat_pop1;
   a_x(1 : nx, 1 : ny) = adimat_adjsum(a_x(1 : nx, 1 : ny), adimat_adjred(x(1 : nx, 1 : ny), a_tmpca8 .* tmpca9));
   a_tmpca9 = adimat_adjsum(a_tmpca9, adimat_adjred(tmpca9, x(1 : nx, 1 : ny) .* a_tmpca8));
   a_tmpca8 = a_zeros1(tmpca8);
   tmpca9 = adimat_pop1;
   a_tmpca10 = adimat_adjsum(a_tmpca10, cos(tmpca10) .* a_tmpca9);
   a_tmpca9 = a_zeros1(tmpca9);
   tmpca10 = adimat_pop1;
   a_vpotx(1 : nx, 1 : ny) = adimat_adjsum(a_vpotx(1 : nx, 1 : ny), adimat_adjmultr(vpotx(1 : nx, 1 : ny), hx, a_tmpca10));
   a_tmpca10 = a_zeros1(tmpca10);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_x1a, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_x(2 : tmpda4, 1 : ny) = adimat_adjsum(a_x(2 : tmpda4, 1 : ny), adimat_adjred(x(2 : tmpda4, 1 : ny), a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, -a_tmpca3));
   a_tmpca8 = adimat_adjsum(a_tmpca8, adimat_adjred(tmpca8, a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   [tmpda4 tmpca5] = adimat_pop;
   a_x(1 : nx, 1 : ny) = adimat_adjsum(a_x(1 : nx, 1 : ny), adimat_adjred(x(1 : nx, 1 : ny), a_tmpca5 .* tmpca6));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, x(1 : nx, 1 : ny) .* a_tmpca5));
   a_tmpca5 = a_zeros1(tmpca5);
   tmpca6 = adimat_pop1;
   a_tmpca7 = adimat_adjsum(a_tmpca7, -sin(tmpca7) .* a_tmpca6);
   a_tmpca6 = a_zeros1(tmpca6);
   a_vpotx(1 : nx, 1 : ny) = adimat_adjsum(a_vpotx(1 : nx, 1 : ny), adimat_adjmultr(vpotx(1 : nx, 1 : ny), hx, a_tmpca7));
   a_y(1 : nx, 1 : ny) = adimat_adjsum(a_y(1 : nx, 1 : ny), adimat_adjred(y(1 : nx, 1 : ny), a_tmpca8 .* tmpca9));
   a_tmpca9 = adimat_adjsum(a_tmpca9, adimat_adjred(tmpca9, y(1 : nx, 1 : ny) .* a_tmpca8));
   a_tmpca10 = adimat_adjsum(a_tmpca10, cos(tmpca10) .* a_tmpca9);
   a_vpotx(1 : nx, 1 : ny) = adimat_adjsum(a_vpotx(1 : nx, 1 : ny), adimat_adjmultr(vpotx(1 : nx, 1 : ny), hx, a_tmpca10));
   [tmpadjc1] = adimat_a_mrdividel(tmpca1, sqn, a_fcond);
   a_tmpca1 = adimat_adjsum(a_tmpca1, tmpadjc1);
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_delsq = adimat_adjsum(a_delsq, -adimat_adjred(-delsq, a_tmpca3));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, a_tmpca4 ./ 2));
   a_delsq = adimat_adjsum(a_delsq, adimat_adjred(delsq, 2 .* delsq.^1 .* a_tmpca5));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_delsq));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_delsq));
   tmpca1 = adimat_pop1;
   a_x(1 : nx, 1 : ny) = adimat_adjsum(a_x(1 : nx, 1 : ny), adimat_adjred(x(1 : nx, 1 : ny), 2 .* x(1 : nx, 1 : ny).^1 .* a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_y(1 : nx, 1 : ny) = adimat_adjsum(a_y(1 : nx, 1 : ny), adimat_adjred(y(1 : nx, 1 : ny), 2 .* y(1 : nx, 1 : ny).^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   vpoty = adimat_pop_index2(vpoty, 1 : tmpda1, tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_vpoty(1 : tmpda1, tmpda2))));
   a_vpoty = a_zeros_index2(a_vpoty, vpoty, 1 : tmpda1, tmpda2);
   tmplia1 = adimat_pop1;
   a_vpoty(1 : tmpda3, 1) = adimat_adjsum(a_vpoty(1 : tmpda3, 1), a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpda3] = adimat_pop;
   vpotx = adimat_pop_index2(vpotx, 1 : tmpda1, tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_vpotx(1 : tmpda1, tmpda2))));
   a_vpotx = a_zeros_index2(a_vpotx, vpotx, 1 : tmpda1, tmpda2);
   tmplia1 = adimat_pop1;
   a_vpotx(1 : tmpda3, 1) = adimat_adjsum(a_vpotx(1 : tmpda3, 1), a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpda3] = adimat_pop;
   y = adimat_pop_index2(y, 1 : tmpda1, tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_y(1 : tmpda1, tmpda2))));
   a_y = a_zeros_index2(a_y, y, 1 : tmpda1, tmpda2);
   tmplia1 = adimat_pop1;
   a_y(1 : tmpda3, 1) = adimat_adjsum(a_y(1 : tmpda3, 1), a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpda3] = adimat_pop;
   x = adimat_pop_index2(x, 1 : tmpda1, tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_x(1 : tmpda1, tmpda2))));
   a_x = a_zeros_index2(a_x, x, 1 : tmpda1, tmpda2);
   tmplia1 = adimat_pop1;
   a_x(1 : tmpda3, 1) = adimat_adjsum(a_x(1 : tmpda3, 1), a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpda3] = adimat_pop;
   vpoty = adimat_pop_index2(vpoty, tmpda1, 1 : tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_vpoty(tmpda1, 1 : tmpda2))));
   a_vpoty = a_zeros_index2(a_vpoty, vpoty, tmpda1, 1 : tmpda2);
   tmplia1 = adimat_pop1;
   a_vpoty(1, 1 : tmpda3) = adimat_adjsum(a_vpoty(1, 1 : tmpda3), adimat_adjred(vpoty(1, 1 : tmpda3), a_tmplia1));
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpda3 tmpda4 tmpda5 tmpda7] = adimat_pop;
   vpotx = adimat_pop_index2(vpotx, tmpda1, 1 : tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_vpotx(tmpda1, 1 : tmpda2))));
   a_vpotx = a_zeros_index2(a_vpotx, vpotx, tmpda1, 1 : tmpda2);
   tmplia1 = adimat_pop1;
   a_vpotx(1, 1 : tmpda3) = adimat_adjsum(a_vpotx(1, 1 : tmpda3), a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2] = adimat_pop;
   y = adimat_pop_index2(y, tmpda1, 1 : tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_y(tmpda1, 1 : tmpda2))));
   a_y = a_zeros_index2(a_y, y, tmpda1, 1 : tmpda2);
   tmplia1 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, a_tmplia1));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, a_tmplia1));
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpca3] = adimat_pop;
   a_x(1, 1 : tmpda4) = adimat_adjsum(a_x(1, 1 : tmpda4), adimat_adjred(x(1, 1 : tmpda4), a_tmpca3 .* tmpda5));
   a_tmpca3 = a_zeros1(tmpca3);
   [tmpda4 tmpda5 tmpca6] = adimat_pop;
   a_y(1, 1 : tmpda7) = adimat_adjsum(a_y(1, 1 : tmpda7), adimat_adjred(y(1, 1 : tmpda7), a_tmpca6 .* tmpda8));
   a_tmpca6 = a_zeros1(tmpca6);
   [tmpda7 tmpda8] = adimat_pop;
   x = adimat_pop_index2(x, tmpda1, 1 : tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_x(tmpda1, 1 : tmpda2))));
   a_x = a_zeros_index2(a_x, x, tmpda1, 1 : tmpda2);
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, a_tmplia1));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, -a_tmplia1));
   tmpda1 = adimat_pop1;
   a_x(1, 1 : tmpda4) = adimat_adjsum(a_x(1, 1 : tmpda4), adimat_adjred(x(1, 1 : tmpda4), a_tmpca3 .* tmpda5));
   a_y(1, 1 : tmpda7) = adimat_adjsum(a_y(1, 1 : tmpda7), adimat_adjred(y(1, 1 : tmpda7), a_tmpca6 .* tmpda8));
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_vpoty, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_horzcat(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_Z(:, 4) = adimat_adjsum(a_Z(:, 4), reshape(a_tmpca2, size(Z(:, 4))));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_vpotx, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_horzcat(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_Z(:, 3) = adimat_adjsum(a_Z(:, 3), reshape(a_tmpca2, size(Z(:, 3))));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_y, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_horzcat(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_Z(:, 2) = adimat_adjsum(a_Z(:, 2), reshape(a_tmpca2, size(Z(:, 2))));
   a_tmpca2 = a_zeros1(tmpca2);
   x = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_x, tmpca1));
   a_x = a_zeros1(x);
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_horzcat(a_tmpca1, tmpca2));
   a_Z(:, 1) = adimat_adjsum(a_Z(:, 1), reshape(a_tmpca2, size(Z(:, 1))));
   a_x = adimat_adjsum(a_x, reshape(a_Z, size(x)));
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      error('MINPack:GL2:MinpackGL2_FG:n', 'MINPack:GL2:MinpackGL2_FG:length(x): x not of length 4*nx*ny');
   end
end

function f = rec_MinpackGL2_F(x, Prob)
   n = length(x);
   nx = Prob.user.nx;
   ny = Prob.user.ny;
   tmpba1 = 0;
   if n ~= 4*nx*ny
      tmpba1 = 1;
      error('MINPack:GL2:MinpackGL2_FG:n', 'MINPack:GL2:MinpackGL2_FG:length(x): x not of length 4*nx*ny');
   end
   adimat_push1(tmpba1);
   vornum = Prob.user.vornum;
   tkappa = Prob.user.tkappa;
   hx = Prob.user.hx;
   hy = Prob.user.hy;
   sqn = Prob.user.sqn;
   tmpda1 = nx * ny;
   Z = reshape(x, tmpda1, 4);
   znx = zeros(nx, 1);
   znyp1 = zeros(1, ny + 1);
   tmpca2 = reshape(Z(:, 1), nx, ny);
   tmpca1 = [tmpca2 znx];
   adimat_push1(x);
   x = [tmpca1
         znyp1];
   adimat_push1(tmpca2);
   tmpca2 = reshape(Z(:, 2), nx, ny);
   adimat_push1(tmpca1);
   tmpca1 = [tmpca2 znx];
   y = [tmpca1
         znyp1];
   adimat_push1(tmpca2);
   tmpca2 = reshape(Z(:, 3), nx, ny);
   adimat_push1(tmpca1);
   tmpca1 = [tmpca2 znx];
   vpotx = [tmpca1
         znyp1];
   adimat_push1(tmpca2);
   tmpca2 = reshape(Z(:, 4), nx, ny);
   adimat_push1(tmpca1);
   tmpca1 = [tmpca2 znx];
   vpoty = [tmpca1
         znyp1];
   arg = (2 * pi * vornum * (0 : ny)) / ny;
   tmpda8 = sin(arg);
   tmpda7 = ny + 1;
   tmpca6 = y(1, 1 : tmpda7) .* tmpda8;
   tmpda5 = cos(arg);
   tmpda4 = ny + 1;
   tmpca3 = x(1, 1 : tmpda4) .* tmpda5;
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   tmplia1 = tmpca3 - tmpca6;
   adimat_push_index2(x, tmpda1, 1 : tmpda2);
   x(tmpda1, 1 : tmpda2) = tmplia1;
   adimat_push1(tmpda8);
   tmpda8 = cos(arg);
   adimat_push1(tmpda7);
   tmpda7 = ny + 1;
   adimat_push1(tmpca6);
   tmpca6 = y(1, 1 : tmpda7) .* tmpda8;
   adimat_push1(tmpda5);
   tmpda5 = sin(arg);
   adimat_push1(tmpda4);
   tmpda4 = ny + 1;
   adimat_push1(tmpca3);
   tmpca3 = x(1, 1 : tmpda4) .* tmpda5;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = tmpca3 + tmpca6;
   adimat_push_index2(y, tmpda1, 1 : tmpda2);
   y(tmpda1, 1 : tmpda2) = tmplia1;
   tmpda3 = ny + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = vpotx(1, 1 : tmpda3);
   adimat_push_index2(vpotx, tmpda1, 1 : tmpda2);
   vpotx(tmpda1, 1 : tmpda2) = tmplia1;
   adimat_push1(tmpda7);
   tmpda7 = ny * hy;
   tmpda6 = 2 * pi;
   adimat_push1(tmpda5);
   tmpda5 = tmpda6 * vornum;
   adimat_push1(tmpda4);
   tmpda4 = tmpda5 / tmpda7;
   adimat_push1(tmpda3);
   tmpda3 = ny + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = vpoty(1, 1 : tmpda3) + tmpda4;
   adimat_push_index2(vpoty, tmpda1, 1 : tmpda2);
   vpoty(tmpda1, 1 : tmpda2) = tmplia1;
   adimat_push1(tmpda3);
   tmpda3 = nx + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = x(1 : tmpda3, 1);
   adimat_push_index2(x, 1 : tmpda1, tmpda2);
   x(1 : tmpda1, tmpda2) = tmplia1;
   adimat_push1(tmpda3);
   tmpda3 = nx + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = y(1 : tmpda3, 1);
   adimat_push_index2(y, 1 : tmpda1, tmpda2);
   y(1 : tmpda1, tmpda2) = tmplia1;
   adimat_push1(tmpda3);
   tmpda3 = nx + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = vpotx(1 : tmpda3, 1);
   adimat_push_index2(vpotx, 1 : tmpda1, tmpda2);
   vpotx(1 : tmpda1, tmpda2) = tmplia1;
   adimat_push1(tmpda3);
   tmpda3 = nx + 1;
   adimat_push1(tmpda2);
   tmpda2 = ny + 1;
   adimat_push1(tmpda1);
   tmpda1 = nx + 1;
   adimat_push1(tmplia1);
   tmplia1 = vpoty(1 : tmpda3, 1);
   adimat_push_index2(vpoty, 1 : tmpda1, tmpda2);
   vpoty(1 : tmpda1, tmpda2) = tmplia1;
   adimat_push1(tmpca2);
   tmpca2 = y(1 : nx, 1 : ny) .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = x(1 : nx, 1 : ny) .^ 2;
   delsq = tmpca1 + tmpca2;
   tmpca5 = delsq .^ 2;
   tmpca4 = tmpca5 ./ 2;
   adimat_push1(tmpca3);
   tmpca3 = -delsq + tmpca4;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   fcond = tmpca1 / sqn;
   tmpca10 = hx * vpotx(1 : nx, 1 : ny);
   tmpca9 = sin(tmpca10);
   tmpca8 = y(1 : nx, 1 : ny) .* tmpca9;
   tmpca7 = hx * vpotx(1 : nx, 1 : ny);
   adimat_push1(tmpca6);
   tmpca6 = cos(tmpca7);
   adimat_push1(tmpca5);
   tmpca5 = x(1 : nx, 1 : ny) .* tmpca6;
   adimat_push1(tmpda4);
   tmpda4 = nx + 1;
   adimat_push1(tmpca3);
   tmpca3 = x(2 : tmpda4, 1 : ny) - tmpca5 + tmpca8;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   x1a = sum(tmpca1);
   adimat_push1(tmpca10);
   tmpca10 = hx * vpotx(1 : nx, 1 : ny);
   adimat_push1(tmpca9);
   tmpca9 = sin(tmpca10);
   adimat_push1(tmpca8);
   tmpca8 = x(1 : nx, 1 : ny) .* tmpca9;
   adimat_push1(tmpca7);
   tmpca7 = hx * vpotx(1 : nx, 1 : ny);
   adimat_push1(tmpca6);
   tmpca6 = cos(tmpca7);
   adimat_push1(tmpca5);
   tmpca5 = y(1 : nx, 1 : ny) .* tmpca6;
   adimat_push1(tmpda4);
   tmpda4 = nx + 1;
   adimat_push1(tmpca3);
   tmpca3 = y(2 : tmpda4, 1 : ny) - tmpca5 - tmpca8;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   x2a = sum(tmpca1);
   adimat_push1(tmpca10);
   tmpca10 = hy * vpoty(1 : nx, 1 : ny);
   adimat_push1(tmpca9);
   tmpca9 = sin(tmpca10);
   adimat_push1(tmpca8);
   tmpca8 = y(1 : nx, 1 : ny) .* tmpca9;
   adimat_push1(tmpca7);
   tmpca7 = hy * vpoty(1 : nx, 1 : ny);
   adimat_push1(tmpca6);
   tmpca6 = cos(tmpca7);
   adimat_push1(tmpca5);
   tmpca5 = x(1 : nx, 1 : ny) .* tmpca6;
   adimat_push1(tmpda4);
   tmpda4 = ny + 1;
   adimat_push1(tmpca3);
   tmpca3 = x(1 : nx, 2 : tmpda4) - tmpca5 + tmpca8;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   x1b = sum(tmpca1);
   adimat_push1(tmpca10);
   tmpca10 = hy * vpoty(1 : nx, 1 : ny);
   adimat_push1(tmpca9);
   tmpca9 = sin(tmpca10);
   adimat_push1(tmpca8);
   tmpca8 = x(1 : nx, 1 : ny) .* tmpca9;
   adimat_push1(tmpca7);
   tmpca7 = hy * vpoty(1 : nx, 1 : ny);
   adimat_push1(tmpca6);
   tmpca6 = cos(tmpca7);
   adimat_push1(tmpca5);
   tmpca5 = y(1 : nx, 1 : ny) .* tmpca6;
   adimat_push1(tmpda4);
   tmpda4 = ny + 1;
   adimat_push1(tmpca3);
   tmpca3 = y(1 : nx, 2 : tmpda4) - tmpca5 - tmpca8;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   x2b = sum(tmpca1);
   adimat_push1(tmpda7);
   tmpda7 = hy ^ 2;
   adimat_push1(tmpca6);
   tmpca6 = x1b + x2b;
   adimat_push1(tmpca5);
   tmpca5 = tmpca6 / tmpda7;
   adimat_push1(tmpda4);
   tmpda4 = hx ^ 2;
   adimat_push1(tmpca3);
   tmpca3 = x1a + x2a;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 / tmpda4;
   adimat_push1(tmpca1);
   tmpca1 = tmpca2 + tmpca5;
   fkin = tmpca1 / sqn;
   tmpda12 = tkappa ^ 2;
   tmpda11 = ny + 1;
   adimat_push1(tmpca10);
   tmpca10 = vpotx(1 : nx, 2 : tmpda11) - vpotx(1 : nx, 1 : ny);
   adimat_push1(tmpca9);
   tmpca9 = tmpca10 / hy;
   adimat_push1(tmpda8);
   tmpda8 = nx + 1;
   adimat_push1(tmpca7);
   tmpca7 = vpoty(2 : tmpda8, 1 : ny) - vpoty(1 : nx, 1 : ny);
   adimat_push1(tmpca6);
   tmpca6 = tmpca7 / hx;
   adimat_push1(tmpca5);
   tmpca5 = tmpca6 - tmpca9;
   adimat_push1(tmpca4);
   tmpca4 = tmpca5 .^ 2;
   adimat_push1(tmpca3);
   tmpca3 = sum(tmpca4);
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = tmpca2 * tmpda12;
   ffield = tmpca1 / sqn;
   f = fcond + fkin + ffield;
   adimat_push(n, nx, ny, vornum, tkappa, hx, hy, sqn, Z, znx, znyp1, y, vpotx, vpoty, arg, delsq, fcond, x1a, x2a, x1b, x2b, fkin, ffield, tmpca1, tmpca10, tmpca2, tmpca3, tmpca4, tmpca5, tmpca6, tmpca7, tmpca8, tmpca9, tmpda1, tmpda11, tmpda12, tmpda2, tmpda3, tmpda4, tmpda5, tmpda6, tmpda7, tmpda8, tmplia1, f, x);
   if nargin > 1
      adimat_push1(Prob);
   end
   adimat_push1(nargin);
end

function a_x = ret_MinpackGL2_F(a_f)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      Prob = adimat_pop1;
   end
   [x f tmplia1 tmpda8 tmpda7 tmpda6 tmpda5 tmpda4 tmpda3 tmpda2 tmpda12 tmpda11 tmpda1 tmpca9 tmpca8 tmpca7 tmpca6 tmpca5 tmpca4 tmpca3 tmpca2 tmpca10 tmpca1 ffield fkin x2b x1b x2a x1a fcond delsq arg vpoty vpotx y znyp1 znx Z sqn hy hx tkappa vornum ny nx n] = adimat_pop;
   [a_Z a_y a_vpotx a_vpoty a_delsq a_fcond a_x1a a_x2a a_x1b a_x2b a_fkin a_ffield a_tmpca1 a_tmpca10 a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_tmpca6 a_tmpca7 a_tmpca8 a_tmpca9 a_tmplia1 a_x] = a_zeros(Z, y, vpotx, vpoty, delsq, fcond, x1a, x2a, x1b, x2b, fkin, ffield, tmpca1, tmpca10, tmpca2, tmpca3, tmpca4, tmpca5, tmpca6, tmpca7, tmpca8, tmpca9, tmplia1, x);
   if nargin < 1
      a_f = a_zeros1(f);
   end
   a_fcond = adimat_adjsum(a_fcond, adimat_adjred(fcond, a_f));
   a_fkin = adimat_adjsum(a_fkin, adimat_adjred(fkin, a_f));
   a_ffield = adimat_adjsum(a_ffield, adimat_adjred(ffield, a_f));
   [tmpadjc1] = adimat_a_mrdividel(tmpca1, sqn, a_ffield);
   a_tmpca1 = adimat_adjsum(a_tmpca1, tmpadjc1);
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultl(tmpca2, a_tmpca1, tmpda12));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_tmpca4 = adimat_adjsum(a_tmpca4, a_sum(a_tmpca3, tmpca4));
   a_tmpca3 = a_zeros1(tmpca3);
   tmpca4 = adimat_pop1;
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, 2 .* tmpca5.^1 .* a_tmpca4));
   a_tmpca4 = a_zeros1(tmpca4);
   tmpca5 = adimat_pop1;
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, a_tmpca5));
   a_tmpca9 = adimat_adjsum(a_tmpca9, adimat_adjred(tmpca9, -a_tmpca5));
   a_tmpca5 = a_zeros1(tmpca5);
   [tmpadjc1] = adimat_a_mrdividel(tmpca7, hx, a_tmpca6);
   tmpca6 = adimat_pop1;
   a_tmpca7 = adimat_adjsum(a_tmpca7, tmpadjc1);
   a_tmpca6 = a_zeros1(tmpca6);
   tmpca7 = adimat_pop1;
   a_vpoty(2 : tmpda8, 1 : ny) = adimat_adjsum(a_vpoty(2 : tmpda8, 1 : ny), adimat_adjred(vpoty(2 : tmpda8, 1 : ny), a_tmpca7));
   a_vpoty(1 : nx, 1 : ny) = adimat_adjsum(a_vpoty(1 : nx, 1 : ny), adimat_adjred(vpoty(1 : nx, 1 : ny), -a_tmpca7));
   a_tmpca7 = a_zeros1(tmpca7);
   tmpda8 = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(tmpca10, hy, a_tmpca9);
   tmpca9 = adimat_pop1;
   a_tmpca10 = adimat_adjsum(a_tmpca10, tmpadjc1);
   a_tmpca9 = a_zeros1(tmpca9);
   tmpca10 = adimat_pop1;
   a_vpotx(1 : nx, 2 : tmpda11) = adimat_adjsum(a_vpotx(1 : nx, 2 : tmpda11), adimat_adjred(vpotx(1 : nx, 2 : tmpda11), a_tmpca10));
   a_vpotx(1 : nx, 1 : ny) = adimat_adjsum(a_vpotx(1 : nx, 1 : ny), adimat_adjred(vpotx(1 : nx, 1 : ny), -a_tmpca10));
   a_tmpca10 = a_zeros1(tmpca10);
   [tmpadjc1] = adimat_a_mrdividel(tmpca1, sqn, a_fkin);
   a_tmpca1 = adimat_adjsum(a_tmpca1, tmpadjc1);
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_tmpca1));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   [tmpadjc1] = adimat_a_mrdividel(tmpca3, tmpda4, a_tmpca2);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, tmpadjc1);
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_x1a = adimat_adjsum(a_x1a, adimat_adjred(x1a, a_tmpca3));
   a_x2a = adimat_adjsum(a_x2a, adimat_adjred(x2a, a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   tmpda4 = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(tmpca6, tmpda7, a_tmpca5);
   tmpca5 = adimat_pop1;
   a_tmpca6 = adimat_adjsum(a_tmpca6, tmpadjc1);
   a_tmpca5 = a_zeros1(tmpca5);
   tmpca6 = adimat_pop1;
   a_x1b = adimat_adjsum(a_x1b, adimat_adjred(x1b, a_tmpca6));
   a_x2b = adimat_adjsum(a_x2b, adimat_adjred(x2b, a_tmpca6));
   a_tmpca6 = a_zeros1(tmpca6);
   tmpda7 = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_x2b, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_y(1 : nx, 2 : tmpda4) = adimat_adjsum(a_y(1 : nx, 2 : tmpda4), adimat_adjred(y(1 : nx, 2 : tmpda4), a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, -a_tmpca3));
   a_tmpca8 = adimat_adjsum(a_tmpca8, adimat_adjred(tmpca8, -a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   [tmpda4 tmpca5] = adimat_pop;
   a_y(1 : nx, 1 : ny) = adimat_adjsum(a_y(1 : nx, 1 : ny), adimat_adjred(y(1 : nx, 1 : ny), a_tmpca5 .* tmpca6));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, y(1 : nx, 1 : ny) .* a_tmpca5));
   a_tmpca5 = a_zeros1(tmpca5);
   tmpca6 = adimat_pop1;
   a_tmpca7 = adimat_adjsum(a_tmpca7, -sin(tmpca7) .* a_tmpca6);
   a_tmpca6 = a_zeros1(tmpca6);
   tmpca7 = adimat_pop1;
   a_vpoty(1 : nx, 1 : ny) = adimat_adjsum(a_vpoty(1 : nx, 1 : ny), adimat_adjmultr(vpoty(1 : nx, 1 : ny), hy, a_tmpca7));
   a_tmpca7 = a_zeros1(tmpca7);
   tmpca8 = adimat_pop1;
   a_x(1 : nx, 1 : ny) = adimat_adjsum(a_x(1 : nx, 1 : ny), adimat_adjred(x(1 : nx, 1 : ny), a_tmpca8 .* tmpca9));
   a_tmpca9 = adimat_adjsum(a_tmpca9, adimat_adjred(tmpca9, x(1 : nx, 1 : ny) .* a_tmpca8));
   a_tmpca8 = a_zeros1(tmpca8);
   tmpca9 = adimat_pop1;
   a_tmpca10 = adimat_adjsum(a_tmpca10, cos(tmpca10) .* a_tmpca9);
   a_tmpca9 = a_zeros1(tmpca9);
   tmpca10 = adimat_pop1;
   a_vpoty(1 : nx, 1 : ny) = adimat_adjsum(a_vpoty(1 : nx, 1 : ny), adimat_adjmultr(vpoty(1 : nx, 1 : ny), hy, a_tmpca10));
   a_tmpca10 = a_zeros1(tmpca10);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_x1b, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_x(1 : nx, 2 : tmpda4) = adimat_adjsum(a_x(1 : nx, 2 : tmpda4), adimat_adjred(x(1 : nx, 2 : tmpda4), a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, -a_tmpca3));
   a_tmpca8 = adimat_adjsum(a_tmpca8, adimat_adjred(tmpca8, a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   [tmpda4 tmpca5] = adimat_pop;
   a_x(1 : nx, 1 : ny) = adimat_adjsum(a_x(1 : nx, 1 : ny), adimat_adjred(x(1 : nx, 1 : ny), a_tmpca5 .* tmpca6));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, x(1 : nx, 1 : ny) .* a_tmpca5));
   a_tmpca5 = a_zeros1(tmpca5);
   tmpca6 = adimat_pop1;
   a_tmpca7 = adimat_adjsum(a_tmpca7, -sin(tmpca7) .* a_tmpca6);
   a_tmpca6 = a_zeros1(tmpca6);
   tmpca7 = adimat_pop1;
   a_vpoty(1 : nx, 1 : ny) = adimat_adjsum(a_vpoty(1 : nx, 1 : ny), adimat_adjmultr(vpoty(1 : nx, 1 : ny), hy, a_tmpca7));
   a_tmpca7 = a_zeros1(tmpca7);
   tmpca8 = adimat_pop1;
   a_y(1 : nx, 1 : ny) = adimat_adjsum(a_y(1 : nx, 1 : ny), adimat_adjred(y(1 : nx, 1 : ny), a_tmpca8 .* tmpca9));
   a_tmpca9 = adimat_adjsum(a_tmpca9, adimat_adjred(tmpca9, y(1 : nx, 1 : ny) .* a_tmpca8));
   a_tmpca8 = a_zeros1(tmpca8);
   tmpca9 = adimat_pop1;
   a_tmpca10 = adimat_adjsum(a_tmpca10, cos(tmpca10) .* a_tmpca9);
   a_tmpca9 = a_zeros1(tmpca9);
   tmpca10 = adimat_pop1;
   a_vpoty(1 : nx, 1 : ny) = adimat_adjsum(a_vpoty(1 : nx, 1 : ny), adimat_adjmultr(vpoty(1 : nx, 1 : ny), hy, a_tmpca10));
   a_tmpca10 = a_zeros1(tmpca10);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_x2a, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_y(2 : tmpda4, 1 : ny) = adimat_adjsum(a_y(2 : tmpda4, 1 : ny), adimat_adjred(y(2 : tmpda4, 1 : ny), a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, -a_tmpca3));
   a_tmpca8 = adimat_adjsum(a_tmpca8, adimat_adjred(tmpca8, -a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   [tmpda4 tmpca5] = adimat_pop;
   a_y(1 : nx, 1 : ny) = adimat_adjsum(a_y(1 : nx, 1 : ny), adimat_adjred(y(1 : nx, 1 : ny), a_tmpca5 .* tmpca6));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, y(1 : nx, 1 : ny) .* a_tmpca5));
   a_tmpca5 = a_zeros1(tmpca5);
   tmpca6 = adimat_pop1;
   a_tmpca7 = adimat_adjsum(a_tmpca7, -sin(tmpca7) .* a_tmpca6);
   a_tmpca6 = a_zeros1(tmpca6);
   tmpca7 = adimat_pop1;
   a_vpotx(1 : nx, 1 : ny) = adimat_adjsum(a_vpotx(1 : nx, 1 : ny), adimat_adjmultr(vpotx(1 : nx, 1 : ny), hx, a_tmpca7));
   a_tmpca7 = a_zeros1(tmpca7);
   tmpca8 = adimat_pop1;
   a_x(1 : nx, 1 : ny) = adimat_adjsum(a_x(1 : nx, 1 : ny), adimat_adjred(x(1 : nx, 1 : ny), a_tmpca8 .* tmpca9));
   a_tmpca9 = adimat_adjsum(a_tmpca9, adimat_adjred(tmpca9, x(1 : nx, 1 : ny) .* a_tmpca8));
   a_tmpca8 = a_zeros1(tmpca8);
   tmpca9 = adimat_pop1;
   a_tmpca10 = adimat_adjsum(a_tmpca10, cos(tmpca10) .* a_tmpca9);
   a_tmpca9 = a_zeros1(tmpca9);
   tmpca10 = adimat_pop1;
   a_vpotx(1 : nx, 1 : ny) = adimat_adjsum(a_vpotx(1 : nx, 1 : ny), adimat_adjmultr(vpotx(1 : nx, 1 : ny), hx, a_tmpca10));
   a_tmpca10 = a_zeros1(tmpca10);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_sum(a_x1a, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_x(2 : tmpda4, 1 : ny) = adimat_adjsum(a_x(2 : tmpda4, 1 : ny), adimat_adjred(x(2 : tmpda4, 1 : ny), a_tmpca3));
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, -a_tmpca3));
   a_tmpca8 = adimat_adjsum(a_tmpca8, adimat_adjred(tmpca8, a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   [tmpda4 tmpca5] = adimat_pop;
   a_x(1 : nx, 1 : ny) = adimat_adjsum(a_x(1 : nx, 1 : ny), adimat_adjred(x(1 : nx, 1 : ny), a_tmpca5 .* tmpca6));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, x(1 : nx, 1 : ny) .* a_tmpca5));
   a_tmpca5 = a_zeros1(tmpca5);
   tmpca6 = adimat_pop1;
   a_tmpca7 = adimat_adjsum(a_tmpca7, -sin(tmpca7) .* a_tmpca6);
   a_tmpca6 = a_zeros1(tmpca6);
   a_vpotx(1 : nx, 1 : ny) = adimat_adjsum(a_vpotx(1 : nx, 1 : ny), adimat_adjmultr(vpotx(1 : nx, 1 : ny), hx, a_tmpca7));
   a_y(1 : nx, 1 : ny) = adimat_adjsum(a_y(1 : nx, 1 : ny), adimat_adjred(y(1 : nx, 1 : ny), a_tmpca8 .* tmpca9));
   a_tmpca9 = adimat_adjsum(a_tmpca9, adimat_adjred(tmpca9, y(1 : nx, 1 : ny) .* a_tmpca8));
   a_tmpca10 = adimat_adjsum(a_tmpca10, cos(tmpca10) .* a_tmpca9);
   a_vpotx(1 : nx, 1 : ny) = adimat_adjsum(a_vpotx(1 : nx, 1 : ny), adimat_adjmultr(vpotx(1 : nx, 1 : ny), hx, a_tmpca10));
   [tmpadjc1] = adimat_a_mrdividel(tmpca1, sqn, a_fcond);
   a_tmpca1 = adimat_adjsum(a_tmpca1, tmpadjc1);
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_delsq = adimat_adjsum(a_delsq, -adimat_adjred(-delsq, a_tmpca3));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, a_tmpca4 ./ 2));
   a_delsq = adimat_adjsum(a_delsq, adimat_adjred(delsq, 2 .* delsq.^1 .* a_tmpca5));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_delsq));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_delsq));
   tmpca1 = adimat_pop1;
   a_x(1 : nx, 1 : ny) = adimat_adjsum(a_x(1 : nx, 1 : ny), adimat_adjred(x(1 : nx, 1 : ny), 2 .* x(1 : nx, 1 : ny).^1 .* a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_y(1 : nx, 1 : ny) = adimat_adjsum(a_y(1 : nx, 1 : ny), adimat_adjred(y(1 : nx, 1 : ny), 2 .* y(1 : nx, 1 : ny).^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   vpoty = adimat_pop_index2(vpoty, 1 : tmpda1, tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_vpoty(1 : tmpda1, tmpda2))));
   a_vpoty = a_zeros_index2(a_vpoty, vpoty, 1 : tmpda1, tmpda2);
   tmplia1 = adimat_pop1;
   a_vpoty(1 : tmpda3, 1) = adimat_adjsum(a_vpoty(1 : tmpda3, 1), a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpda3] = adimat_pop;
   vpotx = adimat_pop_index2(vpotx, 1 : tmpda1, tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_vpotx(1 : tmpda1, tmpda2))));
   a_vpotx = a_zeros_index2(a_vpotx, vpotx, 1 : tmpda1, tmpda2);
   tmplia1 = adimat_pop1;
   a_vpotx(1 : tmpda3, 1) = adimat_adjsum(a_vpotx(1 : tmpda3, 1), a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpda3] = adimat_pop;
   y = adimat_pop_index2(y, 1 : tmpda1, tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_y(1 : tmpda1, tmpda2))));
   a_y = a_zeros_index2(a_y, y, 1 : tmpda1, tmpda2);
   tmplia1 = adimat_pop1;
   a_y(1 : tmpda3, 1) = adimat_adjsum(a_y(1 : tmpda3, 1), a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpda3] = adimat_pop;
   x = adimat_pop_index2(x, 1 : tmpda1, tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_x(1 : tmpda1, tmpda2))));
   a_x = a_zeros_index2(a_x, x, 1 : tmpda1, tmpda2);
   tmplia1 = adimat_pop1;
   a_x(1 : tmpda3, 1) = adimat_adjsum(a_x(1 : tmpda3, 1), a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpda3] = adimat_pop;
   vpoty = adimat_pop_index2(vpoty, tmpda1, 1 : tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_vpoty(tmpda1, 1 : tmpda2))));
   a_vpoty = a_zeros_index2(a_vpoty, vpoty, tmpda1, 1 : tmpda2);
   tmplia1 = adimat_pop1;
   a_vpoty(1, 1 : tmpda3) = adimat_adjsum(a_vpoty(1, 1 : tmpda3), adimat_adjred(vpoty(1, 1 : tmpda3), a_tmplia1));
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpda3 tmpda4 tmpda5 tmpda7] = adimat_pop;
   vpotx = adimat_pop_index2(vpotx, tmpda1, 1 : tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_vpotx(tmpda1, 1 : tmpda2))));
   a_vpotx = a_zeros_index2(a_vpotx, vpotx, tmpda1, 1 : tmpda2);
   tmplia1 = adimat_pop1;
   a_vpotx(1, 1 : tmpda3) = adimat_adjsum(a_vpotx(1, 1 : tmpda3), a_tmplia1);
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2] = adimat_pop;
   y = adimat_pop_index2(y, tmpda1, 1 : tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_y(tmpda1, 1 : tmpda2))));
   a_y = a_zeros_index2(a_y, y, tmpda1, 1 : tmpda2);
   tmplia1 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, a_tmplia1));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, a_tmplia1));
   a_tmplia1 = a_zeros1(tmplia1);
   [tmpda1 tmpda2 tmpca3] = adimat_pop;
   a_x(1, 1 : tmpda4) = adimat_adjsum(a_x(1, 1 : tmpda4), adimat_adjred(x(1, 1 : tmpda4), a_tmpca3 .* tmpda5));
   a_tmpca3 = a_zeros1(tmpca3);
   [tmpda4 tmpda5 tmpca6] = adimat_pop;
   a_y(1, 1 : tmpda7) = adimat_adjsum(a_y(1, 1 : tmpda7), adimat_adjred(y(1, 1 : tmpda7), a_tmpca6 .* tmpda8));
   a_tmpca6 = a_zeros1(tmpca6);
   [tmpda7 tmpda8] = adimat_pop;
   x = adimat_pop_index2(x, tmpda1, 1 : tmpda2);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_x(tmpda1, 1 : tmpda2))));
   a_x = a_zeros_index2(a_x, x, tmpda1, 1 : tmpda2);
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, a_tmplia1));
   a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, -a_tmplia1));
   tmpda1 = adimat_pop1;
   a_x(1, 1 : tmpda4) = adimat_adjsum(a_x(1, 1 : tmpda4), adimat_adjred(x(1, 1 : tmpda4), a_tmpca3 .* tmpda5));
   a_y(1, 1 : tmpda7) = adimat_adjsum(a_y(1, 1 : tmpda7), adimat_adjred(y(1, 1 : tmpda7), a_tmpca6 .* tmpda8));
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_vpoty, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_horzcat(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_Z(:, 4) = adimat_adjsum(a_Z(:, 4), reshape(a_tmpca2, size(Z(:, 4))));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_vpotx, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_horzcat(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_Z(:, 3) = adimat_adjsum(a_Z(:, 3), reshape(a_tmpca2, size(Z(:, 3))));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_y, tmpca1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_horzcat(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_Z(:, 2) = adimat_adjsum(a_Z(:, 2), reshape(a_tmpca2, size(Z(:, 2))));
   a_tmpca2 = a_zeros1(tmpca2);
   x = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_x, tmpca1));
   a_x = a_zeros1(x);
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_horzcat(a_tmpca1, tmpca2));
   a_Z(:, 1) = adimat_adjsum(a_Z(:, 1), reshape(a_tmpca2, size(Z(:, 1))));
   a_x = adimat_adjsum(a_x, reshape(a_Z, size(x)));
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      error('MINPack:GL2:MinpackGL2_FG:n', 'MINPack:GL2:MinpackGL2_FG:length(x): x not of length 4*nx*ny');
   end
end
