/**
 * \namespace paraperm
 * \brief Paraperm namespace
 */

/**
 * \class paraperm::Paraperm Paraperm.h "paraperm/Paraperm.h"
 * \brief Parallel generator of random permutaitons 
 *
 * \tparam T Integer data type for permutation elements. Default value is <tt>uintmax_t</tt>.
 *
 * The algorithm is described in detail in [\ref references1 "1"].
 *
 * The intended usage of the class consists of the following steps running within all
 * MPI processes:
 *
 * -# An instance of the class is defined:
 * \code
 * paraperm::Paraperm<> paraperm;
 * \endcode
 * -# Random permutation of <tt>n</tt> elements is generated over an MPI communicator:
 * \code
 * paraperm.generate(MPI_COMM_WORLD, n);
 * \endcode
 * -# Permutation elements within all MPI processes are available as follows:
 * \code
 * const paraperm::Paraperm<>::vector_type& = paraperm.elements();
 * const paraperm::Paraperm<>::value_type pos = paraperm.pos(); // argument of the first local permutation value
 * const paraperm::Paraperm<>::value_type count = paraperm.count(); // number of local permutaion values
 * \endcode
 */

/**
 * \typedef paraperm::Paraperm::value_type
 * \brief Integer data type for permutation elements. Matches template parameter T.
 */

/**
 * \typedef paraperm::Paraperm::vector_type
 * \brief Standard library vector type with elemetns of type #value_type.
 */
 
/**
 * \fn paraperm::Paraperm::~Paraperm()
 * \brief The destructor
 *
 * Release implementation resources.
 */

/**
 * \fn void paraperm::Paraperm::generate(MPI_Comm comm, T n);
 *
 * \brief Parallelly generates random permutation.
 *
 * \param[in] comm a valid MPI communicator
 *
 * \param[in] n number of elements of the permutation
 * 
 * Generation of the random permutation of a set of integer numbers from 0 to (<tt>n</tt> - 1). 
 * After the generation, these elements are available via the perm() member function.
 *
 * <b>Must be called collectively within all MPI processes that belongs to the comm
 * communicator!</b>
 */

/**
 * \fn const vector_type& paraperm::Paraperm::perm() const;
 *
 * \brief Returns local array with generated permutation values.
 *
 * \return vector of type #vector_type with local generated permutation values
 *
 * The argument of the first local value is provided by the pos() member function.
 * The number of local permutation values is provided by the count() member function.
 */

/**
 * \fn T paraperm::Paraperm::pos() const;
 *
 * \brief Returns argument of the first local permutation value.
 *
 * \return argument of the first local permutation value
 */

/**
 * \fn T paraperm::Paraperm::count() const;
 *
 * \brief Returns number of local permutation values.
 *
 * \return the number of local permutation values
 */
