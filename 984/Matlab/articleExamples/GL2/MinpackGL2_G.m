function fgrad=MinpackGL2_G(x,Prob)
% MinpackGL2_G: Computes gradient for the 2D Ginzburg Landau (GL2) problem
%                  from the MINPACK-2 collection.
% USE:
%           fgrad = MinpackGL2_G(x,Prob)
% where
% x    : vector of length Prob.user.n
% Prob : structure created by MinpackGL2_Prob with components
%    Prob.user.nx=nx;         % no. of gridpoints in x-direction
%    Prob.user.ny=ny;         % no. of gridpoints in y-direction
%    Prob.user.vornum=vornum; % no. of vortices
%    Prob.user.tkappa=tkappa; % Ginzburg-Landau constant
%    Prob.user.hx=hx;         % mesh spacing in x-direction
%    Prob.user.hy=hy;         % mesh spacing in x-direction
%    Prob.user.sqn=sqn;       % sqn=nx*ny
%
% OUTPUT:
% fgrad: gradient of objective function
%
% See also MinpackGL2_Prob, MinpackGL2_FG, MinpackGL2_F , MinpackGL2_Hv, , MinpackGL2_Sp

% AUTHOR: S.A.Forth & K. Lenton
% DATE: 7/01/09
% Copyright 2009-2009: S.A. Forth, Cranfield University 
% REVISIONS:
% DATE  WHO   WHAT

% Original Fortran Header comments follow
%
%      subroutine dgl2fg(nx,ny,x,f,fgrad,task,w,vornum)
%      character*(*) task
%      integer nx, ny, vornum
%      double precision f
%      double precision x(4*nx*ny), fgrad(4*nx*ny), w(4*(nx+1)*(ny+1))
% **********
%
% Subroutine dgl2fg
%
% This subroutine computes the function and gradient of the
% Ginzburg-Landau (2-dimensional) superconductivity problem.
%
% The subroutine statement is
%
%   subroutine dgl2fg(nx,ny,x,f,fgrad,task,w,vornum)
%
% where
%
%   nx is an integer variable.
%     On entry nx is the number of grid points in the first
%        coordinate direction.
%     On exit nx is unchanged.
%
%   ny is an integer variable.
%     On entry ny is the number of grid points in the second
%        coordinate direction.
%     On exit ny is unchanged.
%
%   x is a double precision array of dimension 4*nx*ny.
%     On entry x specifies the vector x if task = 'F', 'G', or 'FG'.
%        Otherwise x need not be specified.
%     On exit x is unchanged if task = 'F', 'G', or 'FG'. Otherwise
%        x is set according to task.
%
%   f is a double precision variable.
%     On entry f need not be specified.
%     On exit f is set to the function evaluated at x if task = 'F'
%        or 'FG'.
%
%   fgrad is a double precision array of dimension 4*nx*ny.
%     On entry fgrad need not be specified.
%     On exit fgrad contains the gradient evaluated at x if
%        task = 'G' or 'FG'.
%
%   task is a character variable.
%     On entry task specifies the action of the subroutine:
%
%        task               action
%        ----               ------
%         'F'     Evaluate the function at x.
%         'G'     Evaluate the gradient at x.
%         'FG'    Evaluate the function and the gradient at x.
%         'XS'    Set x to the standard starting point xs.
%
%     On exit task is unchanged.
%
%   w is a double precision work array of dimension 4*(nx+1)(ny+1).
%
%   vornum is an integer variable.
%     On entry vornum specifies the number of vortices.
%     On exit vornum is unchanged.
%
% MINPACK-2 Project. November 1993.
% Argonne National Laboratory and University of Minnesota.
% Brett M. Averick, Paul L. Plassmann, and Stephen J. Wright.
%
% **********

% if nargin<2
%     error('MINPack:GL2:MinpackGL2_FG:nargin',...
%         'Arguments x and Prob must be supplied')
% end

%n=length(x);
nx=Prob.user.nx;
ny=Prob.user.ny;

% check arguments
% if (n ~= 4*nx*ny)
%     error('MINPack:GL2:MinpackGL2_FG:n',...
%         'MINPack:GL2:MinpackGL2_FG:length(x): x not of length 4*nx*ny')
% end

% extract parameters from Prob structure
vornum =Prob.user.vornum;
tkappa =Prob.user.tkappa;
hx =Prob.user.hx;
hy =Prob.user.hy;
sqn =Prob.user.sqn;

% w=reshape(x,nx,ny,4);
% w(nx+1,ny+1,4)=0;
% x=w(:,:,1);
% y=w(:,:,2);
% vpotx=w(:,:,3);
% vpoty=w(:,:,4);
dummy = x(1);
Z = reshape(x,nx*ny,4);
znx = zeros(nx,1); znyp1 = zeros(1,ny+1);
x     = [reshape(Z(:,1),nx,ny) znx; znyp1];
y     = [reshape(Z(:,2),nx,ny) znx; znyp1];
vpotx = [reshape(Z(:,3),nx,ny) znx; znyp1];
vpoty = [reshape(Z(:,4),nx,ny) znx; znyp1];

arg = 2*pi*vornum*(0:ny)/(ny);
x(nx+1,1:ny+1) = x(1,1:ny+1).*cos(arg) - y(1,1:ny+1).*sin(arg);
y(nx+1,1:ny+1) = x(1,1:ny+1).*sin(arg) + y(1,1:ny+1).*cos(arg);
vpotx(nx+1,1:ny+1) = vpotx(1,1:ny+1);
vpoty(nx+1,1:ny+1) = vpoty(1,1:ny+1) + 2*pi*vornum/(ny*hy);

% Top face for order parameter and vector potential.
x(1:nx+1,ny+1) = x(1:nx+1,1);
y(1:nx+1,ny+1) = y(1:nx+1,1);
vpotx(1:nx+1,ny+1) = vpotx(1:nx+1,1);
vpoty(1:nx+1,ny+1) = vpoty(1:nx+1,1);

% gradient follows
gradx = x(1:nx,1:ny).*(x(1:nx,1:ny).^2-1+y(1:nx,1:ny).^2)*2/sqn;
grady = y(1:nx,1:ny).*(x(1:nx,1:ny).^2-1+y(1:nx,1:ny).^2)*2/sqn;
gradax=zeros(nx,ny).*dummy;
graday=zeros(nx,ny).*dummy;

%    Kinetic Energy Part, Interior Points

fkinx1 = (2/(hx*hx*sqn))*(x(3:nx+1,2:ny)-...
    x(2:nx,2:ny).*cos(hx*vpotx(2:nx,2:ny))+...
    y(2:nx,2:ny).*sin(hx*vpotx(2:nx,2:ny)));
fkinx2 = (2/(hx*hx*sqn))*(y(3:nx+1,2:ny)-...
    y(2:nx,2:ny).*cos(hx*vpotx(2:nx,2:ny))-...
    x(2:nx,2:ny).*sin(hx*vpotx(2:nx,2:ny)));
fkiny1 = (2/(hy*hy*sqn))*(x(2:nx,3:ny+1)-...
    x(2:nx,2:ny).*cos(hy*vpoty(2:nx,2:ny))+...
    y(2:nx,2:ny).*sin(hy*vpoty(2:nx,2:ny)));
fkiny2 = (2/(hy*hy*sqn))*(y(2:nx,3:ny+1)-...
    y(2:nx,2:ny).*cos(hy*vpoty(2:nx,2:ny))-...
    x(2:nx,2:ny).*sin(hy*vpoty(2:nx,2:ny)));
ffield = ((vpotx(2:nx,2:ny)-vpotx(2:nx,3:ny+1))/hy +...
    (vpoty(3:nx+1,2:ny)-vpoty(2:nx,2:ny))/hx)*...
    (2*(tkappa^2)/sqn);
gradx(2:nx,2:ny) = gradx(2:nx,2:ny) - cos(hx*vpotx(2:nx,2:ny)).*fkinx1 -...
    sin(hx*vpotx(2:nx,2:ny)).*fkinx2 -...
    cos(hy*vpoty(2:nx,2:ny)).*fkiny1 -...
    sin(hy*vpoty(2:nx,2:ny)).*fkiny2;
grady(2:nx,2:ny) = grady(2:nx,2:ny) + sin(hx*vpotx(2:nx,2:ny)).*fkinx1 -...
    cos(hx*vpotx(2:nx,2:ny)).*fkinx2 +...
    sin(hy*vpoty(2:nx,2:ny)).*fkiny1 -...
    cos(hy*vpoty(2:nx,2:ny)).*fkiny2;
gradax(2:nx,2:ny) = ffield/hy + fkinx1.*(hx*x(2:nx,2:ny).*sin(hx*vpotx(2:nx,2:ny))+...
    hx*y(2:nx,2:ny).*cos(hx*vpotx(2:nx,2:ny))) +...
    fkinx2.*(hx*y(2:nx,2:ny).*sin(hx*vpotx(2:nx,2:ny))-...
    hx*x(2:nx,2:ny).*cos(hx*vpotx(2:nx,2:ny)));
graday(2:nx,2:ny) = - ffield/hx + fkiny1.*(hy*x(2:nx,2:ny).*sin(hy*vpoty(2:nx,2:ny))+...
    hy*y(2:nx,2:ny).*cos(hy*vpoty(2:nx,2:ny))) +...
    fkiny2.*(hy*y(2:nx,2:ny).*sin(hy*vpoty(2:nx,2:ny))-...
    hy*x(2:nx,2:ny).*cos(hy*vpoty(2:nx,2:ny)));
fkinx1 = (2/(hx*hx*sqn))*(x(2:nx,2:ny)-...
    x(1:nx-1,2:ny).*cos(hx*vpotx(1:nx-1,2:ny))+...
    y(1:nx-1,2:ny).*sin(hx*vpotx(1:nx-1,2:ny)));
fkinx2 = (2/(hx*hx*sqn))*(y(2:nx,2:ny)-...
    y(1:nx-1,2:ny).*cos(hx*vpotx(1:nx-1,2:ny))-...
    x(1:nx-1,2:ny).*sin(hx*vpotx(1:nx-1,2:ny)));
fkiny1 = (2/(hy*hy*sqn))*(x(2:nx,2:ny)-...
    x(2:nx,1:ny-1).*cos(hy*vpoty(2:nx,1:ny-1))+...
    y(2:nx,1:ny-1).*sin(hy*vpoty(2:nx,1:ny-1)));
fkiny2 = (2/(hy*hy*sqn))*(y(2:nx,2:ny)-...
    y(2:nx,1:ny-1).*cos(hy*vpoty(2:nx,1:ny-1))-...
    x(2:nx,1:ny-1).*sin(hy*vpoty(2:nx,1:ny-1)));
gradx(2:nx,2:ny) = gradx(2:nx,2:ny) + fkinx1 + fkiny1;
grady(2:nx,2:ny) = grady(2:nx,2:ny) + fkinx2 + fkiny2;
ffield = ((vpotx(2:nx,1:ny-1)-vpotx(2:nx,2:ny))/hy +...
    (vpoty(3:nx+1,1:ny-1)-vpoty(2:nx,1:ny-1))/hx)*...
    (2*(tkappa^2)/sqn);
gradax(2:nx,2:ny) = gradax(2:nx,2:ny) - ffield/hy;
ffield = ((vpotx(1:nx-1,2:ny)-vpotx(1:nx-1,3:ny+1))/hy +...
    (vpoty(2:nx,2:ny)-vpoty(1:nx-1,2:ny))/hx)*(2*(tkappa^2)/sqn);
graday(2:nx,2:ny) = graday(2:nx,2:ny) + ffield/hx;

%    Kinetic Energy Part, Boundary Points.

%    Bottom J = 1
fkinx1 = (2/(hx*hx*sqn))*(x(3:nx+1,1)-...
    x(2:nx,1).*cos(hx*vpotx(2:nx,1))+...
    y(2:nx,1).*sin(hx*vpotx(2:nx,1)));
fkinx2 = (2/(hx*hx*sqn))*(y(3:nx+1,1)-...
    y(2:nx,1).*cos(hx*vpotx(2:nx,1))-...
    x(2:nx,1).*sin(hx*vpotx(2:nx,1)));
fkiny1 = (2/(hy*hy*sqn))*(x(2:nx,2)-...
    x(2:nx,1).*cos(hy*vpoty(2:nx,1))+...
    y(2:nx,1).*sin(hy*vpoty(2:nx,1)));
fkiny2 = (2/(hy*hy*sqn))*(y(2:nx,2)-...
    y(2:nx,1).*cos(hy*vpoty(2:nx,1))-...
    x(2:nx,1).*sin(hy*vpoty(2:nx,1)));
ffield = ((vpotx(2:nx,1)-vpotx(2:nx,2))/hy +...
    (vpoty(3:nx+1,1)-vpoty(2:nx,1))/hx)*(2*(tkappa^2)/sqn);
gradx(2:nx,1) = gradx(2:nx,1) - cos(hx*vpotx(2:nx,1)).*fkinx1 -...
    sin(hx*vpotx(2:nx,1)).*fkinx2 -...
    cos(hy*vpoty(2:nx,1)).*fkiny1 -...
    sin(hy*vpoty(2:nx,1)).*fkiny2;
grady(2:nx,1) = grady(2:nx,1) + sin(hx*vpotx(2:nx,1)).*fkinx1 -...
    cos(hx*vpotx(2:nx,1)).*fkinx2 +...
    sin(hy*vpoty(2:nx,1)).*fkiny1 -...
    cos(hy*vpoty(2:nx,1)).*fkiny2;
gradax(2:nx,1) = gradax(2:nx,1) + ffield/hy +...
    fkinx1.*(hx*x(2:nx,1).*sin(hx*vpotx(2:nx,1))+...
    hx*y(2:nx,1).*cos(hx*vpotx(2:nx,1))) +...
    fkinx2.*(hx*y(2:nx,1).*sin(hx*vpotx(2:nx,1))-...
    hx*x(2:nx,1).*cos(hx*vpotx(2:nx,1)));
graday(2:nx,1) = graday(2:nx,1) - ffield/hx +...
    fkiny1.*(hy*x(2:nx,1).*sin(hy*vpoty(2:nx,1))+...
    hy*y(2:nx,1).*cos(hy*vpoty(2:nx,1))) +...
    fkiny2.*(hy*y(2:nx,1).*sin(hy*vpoty(2:nx,1))-...
    hy*x(2:nx,1).*cos(hy*vpoty(2:nx,1)));
fkinx1 = (2/(hx*hx*sqn))*(x(2:nx,1)-...
    x(1:nx-1,1).*cos(hx*vpotx(1:nx-1,1))+...
    y(1:nx-1,1).*sin(hx*vpotx(1:nx-1,1)));
fkinx2 = (2/(hx*hx*sqn))*(y(2:nx,1)-...
    y(1:nx-1,1).*cos(hx*vpotx(1:nx-1,1))-...
    x(1:nx-1,1).*sin(hx*vpotx(1:nx-1,1)));
fkiny1 = (2/(hy*hy*sqn))*(x(2:nx,ny+1)-...
    x(2:nx,ny).*cos(hy*vpoty(2:nx,ny))+...
    y(2:nx,ny).*sin(hy*vpoty(2:nx,ny)));
fkiny2 = (2/(hy*hy*sqn))*(y(2:nx,ny+1)-...
    y(2:nx,ny).*cos(hy*vpoty(2:nx,ny))-...
    x(2:nx,ny).*sin(hy*vpoty(2:nx,ny)));
gradx(2:nx,1) = gradx(2:nx,1) + fkinx1 + fkiny1;
grady(2:nx,1) = grady(2:nx,1) + fkinx2 + fkiny2;
ffield = ((vpotx(2:nx,ny)-vpotx(2:nx,ny+1))/hy +...
    (vpoty(3:nx+1,ny)-vpoty(2:nx,ny))/hx)*...
    (2*(tkappa^2)/sqn);
gradax(2:nx,1) = gradax(2:nx,1) - ffield/hy;
ffield = ((vpotx(1:nx-1,1)-vpotx(1:nx-1,2))/hy +...
    (vpoty(2:nx,1)-vpoty(1:nx-1,1))/hx)*...
    (2*(tkappa^2)/sqn);
graday(2:nx,1) = graday(2:nx,1) + ffield/hx;

%    Left I = 1.

fkinx1 = (2/(hx*hx*sqn))*(x(2,2:ny)-...
    x(1,2:ny).*cos(hx*vpotx(1,2:ny))+...
    y(1,2:ny).*sin(hx*vpotx(1,2:ny)));
fkinx2 = (2/(hx*hx*sqn))*(y(2,2:ny)-...
    y(1,2:ny).*cos(hx*vpotx(1,2:ny))-...
    x(1,2:ny).*sin(hx*vpotx(1,2:ny)));
fkiny1 = (2/(hy*hy*sqn))*(x(1,3:ny+1)-...
    x(1,2:ny).*cos(hy*vpoty(1,2:ny))+...
    y(1,2:ny).*sin(hy*vpoty(1,2:ny)));
fkiny2 = (2/(hy*hy*sqn))*(y(1,3:ny+1)-...
    y(1,2:ny).*cos(hy*vpoty(1,2:ny))-...
    x(1,2:ny).*sin(hy*vpoty(1,2:ny)));
ffield = ((vpotx(1,2:ny)-vpotx(1,3:ny+1))/hy +...
    (vpoty(2,2:ny)-vpoty(1,2:ny))/hx)*...
    (2*(tkappa^2)/sqn);
gradx(1,2:ny) = gradx(1,2:ny) - cos(hx*vpotx(1,2:ny)).*fkinx1 -...
    sin(hx*vpotx(1,2:ny)).*fkinx2 -...
    cos(hy*vpoty(1,2:ny)).*fkiny1 -...
    sin(hy*vpoty(1,2:ny)).*fkiny2;
grady(1,2:ny) = grady(1,2:ny) + sin(hx*vpotx(1,2:ny)).*fkinx1 -...
    cos(hx*vpotx(1,2:ny)).*fkinx2 +...
    sin(hy*vpoty(1,2:ny)).*fkiny1 -...
    cos(hy*vpoty(1,2:ny)).*fkiny2;
gradax(1,2:ny) = gradax(1,2:ny) + ffield/hy +...
    fkinx1.*(hx*x(1,2:ny).*sin(hx*vpotx(1,2:ny))+...
    hx*y(1,2:ny).*cos(hx*vpotx(1,2:ny))) +...
    fkinx2.*(hx*y(1,2:ny).*sin(hx*vpotx(1,2:ny))-...
    hx*x(1,2:ny).*cos(hx*vpotx(1,2:ny)));
graday(1,2:ny) = graday(1,2:ny) - ffield/hx +...
    fkiny1.*(hy*x(1,2:ny).*sin(hy*vpoty(1,2:ny))+...
    hy*y(1,2:ny).*cos(hy*vpoty(1,2:ny))) +...
    fkiny2.*(hy*y(1,2:ny).*sin(hy*vpoty(1,2:ny))-...
    hy*x(1,2:ny).*cos(hy*vpoty(1,2:ny)));
fkinx1 = (2/(hx*hx*sqn))*(x(nx+1,2:ny)-...
    x(nx,2:ny).*cos(hx*vpotx(nx,2:ny))+...
    y(nx,2:ny).*sin(hx*vpotx(nx,2:ny)));
fkinx2 = (2/(hx*hx*sqn))*(y(nx+1,2:ny)-...
    y(nx,2:ny).*cos(hx*vpotx(nx,2:ny))-...
    x(nx,2:ny).*sin(hx*vpotx(nx,2:ny)));
fkiny1 = (2/(hy*hy*sqn))*(x(1,2:ny)-...
    x(1,1:ny-1).*cos(hy*vpoty(1,1:ny-1))+...
    y(1,1:ny-1).*sin(hy*vpoty(1,1:ny-1)));
fkiny2 = (2/(hy*hy*sqn))*(y(1,2:ny)-...
    y(1,1:ny-1).*cos(hy*vpoty(1,1:ny-1))-...
    x(1,1:ny-1).*sin(hy*vpoty(1,1:ny-1)));
sfac = sin(2*pi*vornum*(1:ny-1)/(ny));
cfac = cos(2*pi*vornum*(1:ny-1)/(ny));
gradx(1,2:ny) = gradx(1,2:ny) + cfac.*fkinx1 + sfac.*fkinx2 + fkiny1;
grady(1,2:ny) = grady(1,2:ny) - sfac.*fkinx1 + cfac.*fkinx2 + fkiny2;
ffield = ((vpotx(1,1:ny-1)-vpotx(1,2:ny))/hy +...
    (vpoty(2,1:ny-1)-vpoty(1,1:ny-1))/hx)*(2*(tkappa^2)/sqn);
gradax(1,2:ny) = gradax(1,2:ny) - ffield/hy;
ffield = ((vpotx(nx,2:ny)-vpotx(nx,3:ny+1))/hy +...
    (vpoty(nx+1,2:ny)-vpoty(nx,2:ny))/hx)*...
    (2*(tkappa^2)/sqn);
graday(1,2:ny) = graday(1,2:ny) + ffield/hx;

%    Kinetic Energy Part, at origin (only needed in zero field).

fkinx1 = (2/(hx*hx*sqn))*(x(2,1)-x(1,1)*cos(hx*vpotx(1,1))+...
    y(1,1)*sin(hx*vpotx(1,1)));
fkinx2 = (2/(hx*hx*sqn))*(y(2,1)-y(1,1)*cos(hx*vpotx(1,1))-...
    x(1,1)*sin(hx*vpotx(1,1)));
fkiny1 = (2/(hy*hy*sqn))*(x(1,2)-x(1,1)*cos(hy*vpoty(1,1))+...
    y(1,1)*sin(hy*vpoty(1,1)));
fkiny2 = (2/(hy*hy*sqn))*(y(1,2)-y(1,1)*cos(hy*vpoty(1,1))-...
    x(1,1)*sin(hy*vpoty(1,1)));
ffield = ((vpotx(1,1)-vpotx(1,2))/hy +...
    (vpoty(2,1)-vpoty(1,1))/hx)*(2*(tkappa^2)/sqn);
gradx(1,1) = gradx(1,1) - cos(hx*vpotx(1,1))*fkinx1 -...
    sin(hx*vpotx(1,1))*fkinx2 -...
    cos(hy*vpoty(1,1))*fkiny1 -...
    sin(hy*vpoty(1,1))*fkiny2;
grady(1,1) = grady(1,1) + sin(hx*vpotx(1,1))*fkinx1 -...
    cos(hx*vpotx(1,1))*fkinx2 +...
    sin(hy*vpoty(1,1))*fkiny1 -...
    cos(hy*vpoty(1,1))*fkiny2;
gradax(1,1) = gradax(1,1) + ffield/hy +...
    fkinx1*(hx*x(1,1)*sin(hx*vpotx(1,1))+...
    hx*y(1,1)*cos(hx*vpotx(1,1))) +...
    fkinx2*(hx*y(1,1)*sin(hx*vpotx(1,1))-...
    hx*x(1,1)*cos(hx*vpotx(1,1)));
graday(1,1) = graday(1,1) - ffield/hx +...
    fkiny1*(hy*x(1,1)*sin(hy*vpoty(1,1))+...
    hy*y(1,1)*cos(hy*vpoty(1,1))) +...
    fkiny2*(hy*y(1,1)*sin(hy*vpoty(1,1))-...
    hy*x(1,1)*cos(hy*vpoty(1,1)));
fkinx1 = (2/(hx*hx*sqn))*(x(nx+1,1)-...
    x(nx,1)*cos(hx*vpotx(nx,1))+...
    y(nx,1)*sin(hx*vpotx(nx,1)));
fkinx2 = (2/(hx*hx*sqn))*(y(nx+1,1)-...
    y(nx,1)*cos(hx*vpotx(nx,1))-...
    x(nx,1)*sin(hx*vpotx(nx,1)));
fkiny1 = (2/(hy*hy*sqn))*(x(1,ny+1)-...
    x(1,ny)*cos(hy*vpoty(1,ny))+...
    y(1,ny)*sin(hy*vpoty(1,ny)));
fkiny2 = (2/(hy*hy*sqn))*(y(1,ny+1)-...
    y(1,ny)*cos(hy*vpoty(1,ny))-...
    x(1,ny)*sin(hy*vpoty(1,ny)));
gradx(1,1) = gradx(1,1) + fkinx1 + fkiny1;
grady(1,1) = grady(1,1) + fkinx2 + fkiny2;
ffield = ((vpotx(1,ny)-vpotx(1,ny+1))/hy +...
    (vpoty(2,ny)-vpoty(1,ny))/hx)*(2*(tkappa^2)/sqn);
gradax(1,1) = gradax(1,1) - ffield/hy;
ffield = ((vpotx(nx,1)-vpotx(nx,2))/hy +...
    (vpoty(nx+1,1)-vpoty(nx,1))/hx)*(2*(tkappa^2)/sqn);
graday(1,1) = graday(1,1) + ffield/hx;

% Unpack work array and assign to output

fgrad=[gradx grady gradax graday];
fgrad=fgrad(:);
