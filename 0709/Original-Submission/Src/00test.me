Assuming you have read the file 00READ.ME and know what files you
have available, the following steps are necessary to implement and
test the software.

1. Check machine dependencies:

	If you have requested and received a distribution for a
	specific system, nothing is necessary. Check the 00READ.ME
	file to see what version you got. Ignore any of the system
	dependent files.

	If not, then look for a file named db.sys or sg.sys, where
	"sys" is the extension for a particular machine dependent code,
	as discussed in the 00READ.ME file. Pick the appropriate file
	and use the machine dependent code from that file in place
	of the code distributed for those routines. More specifically,
	(a) if all the routines have been sent in a single file, then
	replace the routines
	  zzcase, zzdate, zzmpar, zzopen, zzrecl, zzsecs and zztime
	by the same routines from the file db.sys (or sg.sys), as
	appropriate; (b) if several files have been sent, the routines
	gbl1db.f and gbl2db.f (or gbl1sg.f and gbl2sg.f) should be
	replaced by db.sys (or sg.sys); (c) if the files are all separate,
	then just replace the seven files  XXXX.f by XXXX.sys, where
	XXXX is one of case, date, mpar, open, recl, secs or time.

	The size of each of the files "sg.sys" is about 32K; the
	generic version is about 52K. They total nearly 320K. The
	same is true for the "db" versions.

	If there is no suitable version, then look for the generic
	versions in db.gnc and sg.gnc and follow the instructions
	therein to produce your own version. (And please send the
	new code to the author so he may incorporate the code for
	the new version.)

2. Separate out individual files:

	If you have received Unix archive files, separate out the files
	as noted in 00READ.ME.

	If the files were not received in archive format, you may
	separate them out if files have been combined, but this is
	NOT necessary. The ".f" files should compile as is.

3. Compile all of the ".f" files:

	Compile and link all the ".f" files, as in the next paragraph.
	This should produce an executable program.

	If you have received both single (sg) and double (db)
	versions, only compile one version at a time, as required.
	That is, compile all files "...sg.f" to produce an executable
	single precision code, and/or compile all files "...db.f" to
	produce an executable double precision code.

	For checking the results, as noted below, you should choose
	double precision if necessary to ensure that the computations
	are carried out to 14 digits of precision or more.

	The total size of the "...sg.f" files is about 840K; the
	"...db.f" files occupy another 840K.

	You may have to rename some files; e.g. some systems like
	to have fortran source with an extension ".for", rather
	than ".f".

        Compilation of the routine ZZLINK may generate warnings
	about unused variables. These may be safely ignored.

	There may also be ANSI warnings generated about non-
	standard code in the routines ZZMPAR, ZZSECS, ZZOPEN,
	ZZTIME, ZZDATE, ZZCASE and ZZRECL. These may be ignored,
	since these are the routines into which all machine
	dependencies have been collected.

4. Rename files as appropriate:

	The program will require some data files to run. These have
	been provided. They occupy about 60K. However, some systems
	may require some small changes to the names of these files.

	Be careful of the case of the file names; the OPEN statements
	which are used specify the file name in UPPER case. Normally
	then the actual FILE NAME must be in UPPER CASE as well.

	The data files have names with an extension .dat; see 00READ.ME.
	These files are opened within the program using an OPEN statement
	in which the file name is given with **NO** extension.

	Some operating systems may require modification to the actual
	name of the file. For example, if you OPEN the file PROLOG,
	VAX/VMS requires an actual file name PROLOG.DAT for PROLOG,
	but a Unix system would simply look for a file PROLOG.

5. Run Tests

	There are two tests which should be run. They should produce
	exactly the same output. The first is to ensure proper
	functioning when the data file DAUF (or DAUF.DAT) is NOT
	present. The first test run will create the file DAUF. The
	second test will take advantage of the fact that DAUF already
	exists and will not recreate it. Thus it should run much more
	quickly. The output however should be the same.

	The file DAUF can be quite large. It is direct access and
	unformatted, so its size will be system dependent.  On a Sun-4,
	it is nearly 200K.

    TEST 1

	o Make sure all data files are ready, as noted in the previous
	  section. Otherwise you will get errors about missing problems,
	  groups or definitions.

	o Use whatever operating system commands are required so that
	  the program can be run as if it were accepting input from
	  the terminal, but so that in reality the input is coming
	  from the file demo.dat. That is, redirect input to be from
	  demo.dat.  On a Unix system, this is done as

	  a.out <demo.dat

	  On a VMS system, one would enter

	  ASSIGN DEMO.DAT SYS$INPUT

	o As a point of reference, this run takes about 20 secs on a
	  SPARCstation1, and about 90 seconds on a MicroVax II or on
	  a Sun-3.

	o You should check that an output file named DAUF (or
	  something similar, like DAUF.DAT) has been created.

    TEST 2

	o If, for any reason, Test 1 did not succeed, then be sure
	  to remove any file DAUF and then repeat Test 1 before
	  running this test.

	o This is run exactly as test number 1, but since the file
	  DAUF already exists, it takes much less time, i.e. about
	  5 secs on the SPARCstation1, and 22 secs on the Microvax II.

	o The output should be the same as for Test 1.  Note that the
	  output from this test overwrites the files RESULT and COPY
	  produced by test 1.

6. Check the results.

	Compare the output in the output data file COPY to that in
	the  file copy.ref which is distributed. For a system with
	14 digits, the only differences should be subtle differences
	in numeric values near the full precision of the machine,
	and timing differences.

	If you compiled and ran a single precision version which
	executes with notably fewer than 14 digits of precision,
	you may expect significant differences in the results.

7. Use the package.

	If all this has gone successfully, you should be able to use
	the software as described in the TOMS paper and in the user's
	manual.
